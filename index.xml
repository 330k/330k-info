<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>330k info</title>
    <link>https://www2.330k.info/</link>
    <description>Recent content on 330k info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Jun 2017 22:10:24 +0900</lastBuildDate>
    
	<atom:link href="https://www2.330k.info/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自転車について</title>
      <link>https://www2.330k.info/bicycle/introduction/</link>
      <pubDate>Tue, 27 Jun 2017 22:10:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/introduction/</guid>
      <description>SURLY CROSS-CHECK (Aug. 2010 &amp;ndash;)  Nov. 20 2016 ついにブレーキ以外のコンポをDura-Ace(9100)化、ホイールもユーラスにしてしまった・・・。 SURLY cross-checkにDura-Ace、Vブレーキ、SPDペダルなんて組み合わせは他にいないだろうな。
      パーツ 購入時 現在 備考     フレーム・フォーク Surly Crosscheck 460mm -    ヘッドパーツ Canecreek S3 -    ステム Thomson Elite X2 100mm -    ハンドルバー Salsa Short &amp;amp; Shallow 380mm -    シート(サドル) Selle Italia Yutaak -    シートポスト Thomson Elite -    ハブ(フロント) Shimano 105 HB-5700-L Campagnolo Eurus 完組    ハブ(リア) Shimano 105 FH-5700-L (完組Campagnolo Eurus)    スポーク DT-Swiss 型番不明 (完組Campagnolo Eurus)    リム DT-Swiss RR465 (完組Campagnolo Eurus)    タイヤ Schwalve Delta Cruiser 28C Continental GrandPrix 4000S II 25C    クランクセット Shimano 105 FC-5703-L 50-39-30T 170mm Shimano Dura-Ace FC-R9100 50-34T 170mm    ディレイラ(フロント) Shimano 105 FD-5703-S/M Shimano Dura-Ace FD-R9100    ディレイラ(リア) Shimano 105 RD-5700-GS Shimano Dura-Ace RD-R9100    カセットスプロケット Shimano 105 CS-5700 11-25T Shimano Dura-Ace CS-R9100 11-30T    ブレーキレバー Shimano 105 ST-5703 Shimano Dura-Ace ST-R9100    ブレーキ Canecreek SCX-5 Shimano 105 BR-R573 カンチレバーではビビリが発生したためミニV化   ペダル Shimano A-530 Shimano M-540     購入直後の感想  自転車に乗り始めて3年目、ついに自分がツーリングするための自転車をオーダーした。 その結果がこのSURLYのシクロクロスバイク。 長時間・長距離を走るべく、クロモリフレームにコンポーネントは105でフロントトリプル+リア11-25Tでワイドレンジのギアレシオを選択し、ついでに憧れだったSPD(ただし片面)にした。タイヤは悩んだが、とりあえず28Cにしておいた。</description>
    </item>
    
    <item>
      <title>漢字コード変換モジュール for VB6/VBA</title>
      <link>https://www2.330k.info/software/kcconvert/</link>
      <pubDate>Tue, 27 Jun 2017 22:43:13 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/kcconvert/</guid>
      <description>概要 VB6およびExcelなどのVBAにおいて日本語の文字コード変換機能を提供するモジュール。 外部ライブラリを使用せずに変換を行う。
以下の文字コード間の相互変換が可能。
 Shift-JIS EUC-JP JIS UTF-8(BOMなし，あり) UTF-16LE(BOMなし，あり) UTF-16BE(BOMあり)  ダウンロード Vectorの紹介ページへ</description>
    </item>
    
    <item>
      <title>あしあとデータ結合機</title>
      <link>https://www2.330k.info/software/ashiato-data/</link>
      <pubDate>Tue, 27 Jun 2017 22:43:03 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/ashiato-data/</guid>
      <description>概要 auの携帯電話の地図ビューアーの簡易ハンディGPS機能で取得したあしあとデータを結合し，GPXおよびKML形式に変換します．
地図ビューアーで約2時間ごとにログを保存しなければならず，1日ログを取った後，複数のあしあとデータを結合するのが面倒だったため作成しました．
GPXへの変換に際しては時刻情報を残しますので，カシミール3Dなどで速度履歴を見ることも可能です．
ダウンロード Vectorの紹介ページへ</description>
    </item>
    
    <item>
      <title>Vigla</title>
      <link>https://www2.330k.info/software/vigla/</link>
      <pubDate>Tue, 27 Jun 2017 22:42:49 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/vigla/</guid>
      <description>概要 序盤は定石データベースを使用し、中盤を貧弱な評価関数で乗り切り、終盤は完全読みを行う、普通のコンピュータリバーシソフト。
 貧弱な評価関数 マルチスレッドによる高い応答性・操作性 棋譜や盤面の出力が可能 対戦中や棋譜を読み込んで最善手を探索させるなど研究のための機能も一応付属  を特徴とする。
ダウンロード Vectorの紹介ページへ</description>
    </item>
    
    <item>
      <title>Unicodeステガノグラフィ with JavaScript</title>
      <link>https://www2.330k.info/software/plain-text-steganography-with-unicode/</link>
      <pubDate>Tue, 27 Jun 2017 22:42:38 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/plain-text-steganography-with-unicode/</guid>
      <description>概要 ゼロ幅文字を使ってUnicodeのプレーンテキストにステガノグラフィを施す、 ブラウザのJavaScriptで動作するライブラリを書いてみた。 参考にしたのは以下のサイト
 ZERO WIDTH SPACE を使って Unicode ステガノグラフィ Unicode Text Steganography Encoders/Decoders  特徴としては以下の通り。
 デフォルトではゼロ幅文字として4種類を使用(U+200C, U+200D, U+202C, U+FEFF)し、2種類の時よりもエンコード後の文字数を減少(それでも1文字埋め込むために8文字増える) 使用する文字種はライブラリの使用者側で指定可能 使用する文字種に応じて自動的にコード長を変更(例: 2種類のときは1字(16bit)が16字になり、8種類のときは6字になる) 漢字とひらがな、カタカナの間や英単語間にゼロ幅文字を埋め込むことで、できる限り単語検索を邪魔しない(厳密には異なるUnicodeブロック間に挿入する。非英語の欧州の言語や、サロゲートペアを使用する文字の前後には単語内でも挿入される) 埋め込む位置は毎回ランダム 元の文章、隠しテキストともに多言語対応(全部UTF-16としてJavaScriptで扱っているため) GitHubのものは任意のバイナリデータにも対応  ダウンロードや、サイトに使用する際は以下のURLからどうぞ。
https://330k.github.io/misc_tools/unicode_steganography.js
ライセンスはMITライセンス。
使い方は https://330k.github.io/misc_tools/unicode_steganography.html に書きました(英語です)。
動作サンプル:  デフォルトで使用する4種の文字(U+200C, U+200D, U+202C, U+FEFF)は、 GmailやOutlook 2010、iPhoneの標準メールアプリにおいて ゼロ幅として表示 文字化けしない(豆腐にならない) コピー&amp;amp;ペースト時に保存されるもの として選定した。 U+200B(ZERO WIDTH SPACE)はブラウザからGmailで送信するときに削除される。 ただ、メーラを使ってSMTPサーバ(smtp.gmail.com)から送信するときは削除されない。
Bidiを考慮せず左横書きに限定すれば、U+200E(LRM)やU+202B(LRO)などを追加できる。 FacebookやTwitterなど各アプリやウェブサイトの対応状況は参考サイトの2番目に詳しい。
GitHubにアップロードした方はバイナリデータにも対応。 これは通常のステガノグラフィとは逆に、画像などのバイナリデータをプレーンテキスト中に埋め込むことになる。 ただサイズがバカでかくなって存在がバレるので、ステガノグラフィとしての意味はなさないかも。
動作確認ブラウザ  Chromium 45 (Ubuntu 14.04 LTS) Firefox 42 (Ubuntu 14.04 LTS) Edge (Windows 10) Internet Explorer 11 (Windows 10) Safari (iOS 9.</description>
    </item>
    
    <item>
      <title>PPTX外部リンク抽出</title>
      <link>https://www2.330k.info/software/extract-exlinks-pptx/</link>
      <pubDate>Tue, 27 Jun 2017 22:42:27 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/extract-exlinks-pptx/</guid>
      <description> 概要 PowerPointで動画を入れることはよくあるが、その動画がどこにあるファイルなのか分からなくなることがよくある。 一応、PowerPointでもパスを表示させることはできるのだが、何せ表示できる文字数が短すぎて分からない、という無駄機能状態。
 ↑このように「ファイルへのリンクの編集」で表示させることはできるのだが、 深い階層のファイルを参照していると、表示しきれない。
幸い、最新のPowerPointファイル(.pptx)はxmlファイルをzipで固めたものなので、中身を解析して、外部にリンクしているもののパスと、それが使用されているスライドのページ数を抽出するプログラムを作ってみた。
ダウンロード ExtractPPTXExLink.jar
使い方 ExtractPPTXExLink.jarを実行すると、pptxファイルの場所を聞かれるので、1つ選択する。 すると、pptxと同じフォルダに(pptxファイル名)_exlink.txtというファイルにスライドページ番号と外部リンクのパスが出力される。
動作環境  Java 6以上があればOSは問わないはず Windows XP, 7, 8.1, 10, Ubuntu 14.04 LTSで一応動作を確認  </description>
    </item>
    
    <item>
      <title>HTA SQLツール</title>
      <link>https://www2.330k.info/software/hta-sql-tool/</link>
      <pubDate>Tue, 27 Jun 2017 22:42:14 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/hta-sql-tool/</guid>
      <description>概要 今は廃れたHTA(HTML Application)で書いた、汎用SQLツールです。 Windows上で動作し、
 CSVファイル(*.csv) Excelファイル(.xls、.xlsx、.xlsm、.xlsb) Accessファイル(*.mdb)  などをADODB経由で開いてSQLクエリを実行できます。
CSVファイルはディレクトリ⇔データベース、CSVファイル⇔テーブルとして扱われ、 ExcelファイルはExcelブック⇔データベース、シート⇔テーブルとして扱われます。
主に、SQLクエリを実行した結果をExcelに貼り付けて使用することを想定しており、 出力された表はExcelに貼り付けやすいようTSV形式で持っています。 select intoで直接ファイルに書き出すこともできます。
スクリーンショット  ダウンロード Gistからダウンロード
もしくは以下のソースコードをメモ帳にコピー＆ペーストし、拡張子をhtaに変更してください。
&amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;!-- HTA SQL Tool by 330k Copyright (c) 2016 330k This software is released under the MIT License. http://opensource.org/licenses/mit-license.php --&amp;gt; &amp;lt;title&amp;gt;HTA SQL Tool by 330k&amp;lt;/title&amp;gt; &amp;lt;HTA:APPLICATION ID=&amp;quot;USQLEXE&amp;quot; APPLICATIONNAME=&amp;quot;USQLEXE&amp;quot; BORDER=&amp;quot;thick&amp;quot; BORDERSTYLE=&amp;quot;normal&amp;quot; CAPTION=&amp;quot;yes&amp;quot; ICON=&amp;quot;C:\WINDOWS\system32\rsnotify.exe&amp;quot; INNERBORDER=&amp;quot;no&amp;quot; MAXIMIZEBUTTON=&amp;quot;yes&amp;quot; MINIMIZEBUTTON=&amp;quot;yes&amp;quot; SHOWINTASKBAR=&amp;quot;yes&amp;quot; SINGLEINSTANCE=&amp;quot;no&amp;quot; SYSMENU=&amp;quot;yes&amp;quot; VERSION=&amp;quot;1.0&amp;quot; WINDOWSTATE=&amp;quot;normal&amp;quot; SCROLL=&amp;quot;no&amp;quot; SCROLLFLAT=&amp;quot;no&amp;quot; SELECTION=&amp;quot;yes&amp;quot; CONTEXTMENU=&amp;quot;yes&amp;quot; NAVIGABLE=&amp;quot;yes&amp;quot; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; var doc = document; eval(&#39;var document = doc&#39;); var shell = new ActiveXObject(&#39;WScript.</description>
    </item>
    
    <item>
      <title>Gmailをeml形式で保存するChrome拡張機能</title>
      <link>https://www2.330k.info/software/save-as-eml-for-gmail-chrome-extension/</link>
      <pubDate>Tue, 27 Jun 2017 22:34:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/save-as-eml-for-gmail-chrome-extension/</guid>
      <description> Gmailの機能拡充により標準で可能になったため、拡張機能の配布を終了しました
概要 会社でGoogle Apps for Workを導入したところ、「Outlookの時はメールをD&amp;amp;Dで保存できたのに、Gmailになってできなくなった」とのクレームが出てきた。 経理の外注先や監査法人とのやりとりの際に、メールを含む関連資料1式をやりとりするニーズがあるらしい。 Googleで検索すると、「メッセージのソースを表示」→「拡張子をemlにしてメモ帳などで保存」とする方法がみつかった(関連リンク参照)が、 ユーザからは「面倒だ」「拡張子って何？」との声が・・・。
誰か作ってるだろうと思って探してみたが、意外なことに私の調べた限りではそのような拡張機能が見つからなかったので、自分で作ってみた。
せっかくなのでChromeウェブストアに公開してみたので、以下のリンクからどうぞ。
Chromeウェブストア: EMLとして保存(Gmail)
 使い方 Gmailで「メッセージのソースを表示」を行うと、自動でemlファイルがダウンロードされます。 ファイル名は「yyyymmdd_hhmmss.eml」になります(Dateヘッダから取得した日時です)。
仕様についての補足 当初はGmail画面の「メッセージのソースを表示」の下にメニュー項目を追加して、ダウンロードさせるようにしたかったが、 メッセージのソースを表示をした時のURL(https://mail.google.com/mail/u/0/?ui=2&amp;amp;ik=**********&amp;amp;view=om&amp;amp;th=*************)のパラメータのうち、 thはブラウザのlocation.pathやhrefを見ればわかるが、ikはメッセージが表示されるときにページ側のグローバルオブジェクトに格納されるため、 拡張機能内のJavaScriptからはアクセスできない(拡張機能のJavaScriptはページ内のJavaScriptとは別の空間で実行される)。 そのため、メッセージのソースを表示した後に動作するような仕様とした。
もちろんGmail APIを使えばアクセスできるとは思うのだが、そうするとユーザは最初にアプリに対してGmailを読み取る権限を許可しなければならないため、敷居が高くなってしまう。 他の人はこれらの理由で同様の拡張機能の作成を断念したのではないだろうか。
また、Outlookのように保存されるファイル名を件名にしたかったが、ありとあらゆる文字コードに対応しなければならなくなるので単純にDateヘッダから日時を取得する仕様とした。
関連リンク  gmailのメールをemlファイルにする | 今日覚えたことの覚え書き Gmail ヘルプ フォーラム Gmailを1件だけパソコンに保存したい  </description>
    </item>
    
    <item>
      <title>携行品・装備品</title>
      <link>https://www2.330k.info/bicycle/equipments/</link>
      <pubDate>Tue, 27 Jun 2017 22:19:26 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/equipments/</guid>
      <description>現在使用中のもの サドルバッグ レベレイトデザイン PIKA それまでのオーストリッチのサドルバッグ、モンベルのフロントバッグ、ドイターのバックパックを一本化するために購入。 荷物すべてをこのサドルバッグとツールボトルに収めることに成功。 自分のように背が低く、サドルとタイヤの間にあまりクリアランスが取れない場合はタイヤで擦ってしまいやすいので要注意。
あとは余った靴紐を1本持っておくと、レインウェアを取り出しやすいようにバッグの上に括りつけておいたり、 どうしてもタイヤで擦ってしまう場合に強引に上方向に引っ張り上げることができるので非常に便利。
輪行袋 OSTRICH L-100 輪行袋超軽量型  今まではツーリングの計画時に輪行を念頭に置いていなかったので、非常用としてとにかく小さく軽いものを購入。 数回輪行したところ自転車を入れる袋としては全く問題ないが、リアキャリアを外さなければならず、これが列車内で非常に邪魔になる。 リアキャリアをつけずにバックパックのみで日帰りで「行ける所まで行って帰りは輪行」とか「行きは輪行して自転車で帰ってくる」とか「往復輪行してちょっと遠くの峠まで」というときにはうってつけだと思う。 輪行すれば行動半径が2倍になる、ということに気づいてしまったので今後はさらなる活躍が期待される。
ヘッドライト Fenix LD20 某レビューサイトで絶賛されていたためAmazonで購入。 評判通りの明るさ。転勤で首都圏から出てしまったが、街灯がなくても問題なく走行可能。 サイコンの近くに設置すると電波が干渉して速度が出なくなるので出来る限り離すように設置。 GPSロガー Holux M-241
単3乾電池1本で10時間程度駆動する、Bluetoothでスマートフォンにログ出力可のGPSロガー。 USBでUbuntuマシンに接続し、gpsbabelを使用してもログを転送できるが、スマートフォンのBluetoothのほうがデータ転送速度が速いので最近はスマートフォン経由でPCに移動している。
USB充電器 FUJITSU FSC321FX USB⇔NiMH充電池(eneloop)の充電ができるコンパクトな充電器。 2本入れないと充電できないのが欠点だが、スマートフォンへの予備バッテリーのほか、 単3の充電池をヘッドライト、テールライト、GPSロガーで使いまわしているため荷物の軽量化に大きく貢献。
折りたたみ靴 Timberland RADLER TRAIL CAMP Timberlandの折りたためる靴。裸足でも履け、軽いトレッキング程度なら歩けるグリップがある。 SPDシューズで音や滑って転ぶことを気にする必要がないので、自転車を降りた後の行動で重宝している。
現在は使わなくなったもの リアキャリア MINOURA AMT-9100 池袋Y&amp;rsquo;s Roadで箱の中に定価より5割以上安い値札を貼られて入っていたのを掘り出した。 鉄製のMT-800Nを買うつもりだっが、MT-800Nよりも500g以上軽い上に安いのでそのままサイドバッグとともにレジに行った。 積載重量が10kgとMT-800Nの18kgに比べると見劣りするが、自分に18kgもの荷物を運搬できる脚力はないと言い聞かせている。
サイドバッグ ANTARES Konnix ST-950-P 池袋Y&amp;rsquo;s Roadに行ったら他のOSTRICHやdeuterなどのサイドバッグのほぼ半値と安かったので購入。 防水構造を謳ってはいるが基本的に雨の中では走らないので防水性能はまだ分からない。 リアキャリアのパイプにひっかけるプラスチック製のツメがちょっと心許ないが、容量は十分あり、反射材もついていて基本的には満足。
テールランプ Blackburn Mars 4.0 これまた1WのLEDを使っていて明るいと評判のテールランプ。明るいがスイッチは非常に押しにくい。 1ヶ月少しの使用で、基板が異常発熱して電池ごとオシャカになった。 エネループを使っていたのがまずかったのか？ ネットで探してみても同じような症状を示す例は見当たらないので単なる個体差かもしれないが、もうこのメーカの製品は買わない。
フロントバッグ mont-bell ツーリングフロントバッグ バックパックをなくすための試行錯誤の中で、フロントバッグの導入をしてみた。 結果・・・ハンドルが非常に重い。 またヘッドライトが取り付けられなくなったため、エクステンションバーが必要になり、更に重量増。 フロントの荷重が増えたため、フロントタイヤで異物を踏んづけてのパンクがしやすくなってしまった。 あと、なんというか・・・見た目のモンベル臭さが・・・。 ということで現在は使用せず。</description>
    </item>
    
    <item>
      <title>英語版Windows PE環境でバックスラッシュを入力</title>
      <link>https://www2.330k.info/essay/input_backslach_with_us_keyboard_layout/</link>
      <pubDate>Tue, 06 Jun 2017 06:48:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/input_backslach_with_us_keyboard_layout/</guid>
      <description>会社のPCではHDD暗号化ソフトのSecureDocを使用しているが、先日1台のPCが起動しなくなったため、リカバリーディスクを使っての救出を行った際のメモ。
SecureDocのリカバリーディスクはWindows PEベースなのだが、海外の製品なので当然英語キーボード。 起動しなくなったPCのHDDの中身は運良く復旧できそうだったのだが、 データをネットワーク経由で回収しようとしたところネットワーク設定画面でバックスラッシュが入力できなくてハマった。
5分ほどキーボードを押しまくった後、Altキーと文字コード入力で行けることに気がついた。
Alt押す → テンキー9 → テンキー2 → Alt離す
で無事入力できた。
ただ、LetsNoteのNICをWindows PEでは認識できず無駄足に。 結局USBメモリ経由で回収した。</description>
    </item>
    
    <item>
      <title>Xubuntu 16.04 &#43; Snortで簡易IDS構築</title>
      <link>https://www2.330k.info/essay/xubuntu1604_snort_base/</link>
      <pubDate>Tue, 06 Jun 2017 06:37:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/xubuntu1604_snort_base/</guid>
      <description>ウイルス等に侵入された後の対策として、IDSやIPS製品の紹介をベンダーから受けたが、正直なところ価格が高かったのと、検知されるメッセージがSnort由来のものが多い気がしたので、自分でSnortを構築して商用製品との差を調べてみることにした。
構築環境  PC : 余っていたノートPC Panasonic LetsNote CF-NX1 OS : Xubuntu 16.04.2 (LetsNoteの有線LANと無線LANのNICを認識できる可能性が高いディストリビューションとして選択) ルータ : Yamaha RTX810 IDSとして運用(ミラーポートの通信を監視)  手順 基本的に、以下のドキュメント通りでOK。
Snort 2.9.9.x on Ubuntu 14 -16
LetsNoteでは有線LANのNICはenp0s25、無線LANはwlp2s0となった。
注意点は以下の通り。
#rule_url=https://www.snort.org/reg-rules/|snortrules-snapshot.tar.gz|&amp;lt;oinkcode&amp;gt; → rule_url=https://www.snort.org/rules/|snortrules-snapshot.tar.gz|&amp;lt;oinkcode&amp;gt;  ※微妙にURLが変わっているので注意
#sudo /usr/local/bin/pulledpork.pl -c /etc/snort/pulledpork.conf -l → sudo /usr/local/bin/pulledpork.pl -c /etc/snort/pulledpork.conf -l -o /etc/snort/rules/snort.rules  ※-oオプションが必要と怒られた
有線LAN(enp0s25)はミラーポートから受信だけできれば良いので、 /etc/network/interfacesを編集して使われていないネットワークのアドレスを適当に設定。 管理の通信やBASEによるログを眺めるためには無線(wlp2s0)を使用する。
RTX810はhttp://www.rtpro.yamaha.co.jp/RT/manual/rt-common/setup/lan_port-mirroring.html を参照してミラーポートを設定。
 設定(ポート1と2をポート4にミラー) lan port-mirroring lan1 4 in 1 2 out 1 2 解除 no lan port-mirroring lan1  結果 一応IDSとして構築できたので、現在はログを見て様子見。今のところのメモは以下。</description>
    </item>
    
    <item>
      <title>Windows標準機能でZIPファイルの作成</title>
      <link>https://www2.330k.info/essay/create_zip_file_with_wsh_jscript/</link>
      <pubDate>Mon, 08 May 2017 22:37:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/create_zip_file_with_wsh_jscript/</guid>
      <description>JScriptで複数のテキストファイルを書き出し、それをZIPでまとめたかったので作成。 VBAやVBScript版を参考に作ってみた。
参考サイト : http://kiq-creator.com/blog/?eid=33
複数のファイルをZIP圧縮する際のコツとしては、CopyHereをするたびに待機すること。 CopyHereは非同期なので、すぐにJS側に制御が返ってくるが、 複数のファイルを一気にCopyHereしようとすると、「読み取りできません」とエラーが出る。
使い方 以下のコード中のcreateZipFileを自分のスクリプトにコピー&amp;amp;ペーストして
createZipFile( &amp;quot;zipファイルのパス&amp;quot;, [&amp;quot;圧縮対象ファイルのパス1&amp;quot;, &amp;quot;圧縮対象ファイルのパス2&amp;quot;, ...])  とすればOK。 もしくは以下のコードをメモ帳で拡張子をjsにして保存すれば、ドラッグ&amp;amp;ドロップでzipファイルを作成(右クリック→送る→圧縮フォルダーとほぼ同じ動作)。
注意事項 ディレクトリには対応してません。またWindows標準では暗号化ZIPは作成できません。 また圧縮対象ファイルの存在チェック等もやってないので、必要であればエラーハンドリング処理を追加してください。
/** Windows 標準機能でZipファイルを作成するWSH(JScript) Copyright 330k This software is released under the MIT License. http://opensource.org/licenses/mit-license.php */ var args = []; for(var i = 0; i &amp;lt; WScript.Arguments.length; i++){ args.push(WScript.Arguments(i)); } var zipfile = args[0].replace(/(.+)\.(.+?)$/, &amp;quot;$1.zip&amp;quot;); createZipFile(zipfile, args); function createZipFile(zipFilePath, sourceFiles){ var shell = WScript.CreateObject(&amp;quot;Shell.Application&amp;quot;); var fso = WScript.CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;); var file = fso.</description>
    </item>
    
    <item>
      <title>2017年04月29日〜05月05日 東京→名古屋→岐阜→能登半島→金沢→米原</title>
      <link>https://www2.330k.info/bicycle/touring/20170429-0505_nagoya_shirakawago_noto_peninshula_kanazawa/</link>
      <pubDate>Sat, 29 Apr 2017 21:53:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20170429-0505_nagoya_shirakawago_noto_peninshula_kanazawa/</guid>
      <description>2017年のGWは適当に天気の良さそうな方向に走った結果、岐阜の山中から能登半島を回るコースになった。
  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20170429-0505_nagoya_shirakawago_noto_peninshula_kanazawa\/20170429-0505.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2017年4月29日 東京 清水 185.62 8:33:11 64.0 21.7 R1 箱根峠   2017年4月30日 清水 岡崎 167.15 7:12:45 58.4 23.2 R150, R1 大崩海岸   2017年5月1日 岡崎 郡上白鳥 140.</description>
    </item>
    
    <item>
      <title>2017年03月18日 BRM318千葉200km 2レイク</title>
      <link>https://www2.330k.info/bicycle/touring/20170318-brm318chiba-2lakes/</link>
      <pubDate>Sat, 18 Mar 2017 21:53:04 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20170318-brm318chiba-2lakes/</guid>
      <description>「ロングライドしてます」と一応言えるようになるため、初ブルベ参加してきた。 他人が作るコースを正確に辿ることに不慣れなため、難易度低目のコースのBRM318千葉200kmに申し込み。
  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20170318-brm318chiba-2lakes\/20170318.kml&#34; }); ctaLayer.setMap(map); }   前日 スタートの大洗海岸に当日朝に到着する方法がないので、 前日の仕事を早めに切り上げて常磐線に乗り、勝田のビジネスホテルで前泊。 しかも2泊することで当日スタート地点に持っていく荷物を減らして万端の準備。
当日 朝6時45分にホテルを出て、11km離れたスタート地点まで走行。7時15分頃に到着。 スタッフの方に捺印済みの権利放棄書を渡し、名簿に名前を記入、ブルベカードを受取って出走番号を記入。 安全ピンと黒いフェルト布(20mm×60mmくらい)を渡されて、 何に使うものなのか分からずスタッフに質問したところ、「喪章です」との回答が。
その後ブリーフィング時にブルベの稲垣会長という方がNZで1200kmブルベ参加中に事故で亡くなったとの説明が。 15日に起きた事故とのことだが、事前準備で精一杯で何も知らなかった。 そういう理由で今回のブルベは全員が喪章を着けての走行をすることになったそうだ。
写真は8:00スタートの車検。私は8:10スタート。ブレーキ、前後ライトとベルの確認をしてスタート。
 スタート直後は「まずは大洗鳥居下交差点を左、その次はマリンタワー交差点を右・・・」と唱えていたが、 次第にグループが形成されていったため、前に人がいる限りはルートは安心・・・と思っていたら、 ある交差点で2つ前の人が直進し、1つ前の人が左折した。 事前にGarminにルートを作成しておいたので、私は左折した。 直進した人は戻れたのだろうか・・・。
PC1までは人が多かったが、休憩時間の配分が各々違うようで、PC2に着く頃にはだんだんとバラけてきた。
   霞ヶ浦沿いの平坦な道路を淡々と進む。右は通過チェックポイントのかすみがうら市水族館。 回りの人の動きに従い、スタッフの人に自分の名前を告げればよいようだ。 スタート前に自分が書いた名簿がある、ということはスタッフの人が大急ぎで持ってきている、ということか。
その後は写真を撮る余裕もないまま、17時頃にゴール地点到着。 スタッフの人にブルベカードを返してサインをしてゴール。
認定タイムは8:50。途中ミスコースを2回したので走行距離は202.40kmだった。
 さすがに走りやすいルートが選ばれていて、走りやすい200kmだった。 ゴール後、スタッフの人に「次は400kmどうですか？」と誘われたが、装備をもっと整えないと400kmは無理だな・・・。</description>
    </item>
    
    <item>
      <title>2017年02月11日〜12日 伊豆半島</title>
      <link>https://www2.330k.info/bicycle/touring/20170211-12-izu-peninsula/</link>
      <pubDate>Sat, 11 Feb 2017 21:52:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20170211-12-izu-peninsula/</guid>
      <description>早咲きの桜として有名な河津桜を見に、伊豆半島を走ってきた。 桜、梅、月、富士山、さらに土肥峠では雪、と風流な旅になった。
  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20170211-12-izu-peninsula\/20170211-12.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2017年2月11日 東京 熱川 162.04 6:45:42 54.1 24.0 R246, R1, R135    2017年2月12日 熱川 三島 152.59 7:30:06 62.7 20.3 R135, R136 河津、石廊崎、西伊豆    1日目 朝、出発しようとした直前に会社携帯に連絡があり、会社のサーバがダウン。 ハードウェア障害と思われたが、平日昼間まで交換部品が手配できないため、休日中の復旧を断念。出発は当初計画より2時間ほど遅れた。</description>
    </item>
    
    <item>
      <title>2016年12月31日〜2017年1月2日 初日の出ツーリング 犬吠埼</title>
      <link>https://www2.330k.info/bicycle/touring/20161231-20170102-first-sunrise-at-inubozaki/</link>
      <pubDate>Sat, 31 Dec 2016 21:52:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20161231-20170102-first-sunrise-at-inubozaki/</guid>
      <description>新型Dura-Aceに換装したSURLY crosscheckにて2017年の初日の出を犬吠埼で見るべく走ってきた。
  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20161231-20170102-first-sunrise-at-inubozaki\/20161231-20170102.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2016年12月31日 東京 神栖 101.22 3:47:47 56.2 26.7 R6, r11    2017年1月1日 神栖 鴨川 164.20 6:26:46 48.9 25.5 R124, R128, r30 犬吠埼   2017年1月2日 鴨川 東京 112.</description>
    </item>
    
    <item>
      <title>Gmail (G Suite)でフリーメールアドレスへの送信を検知</title>
      <link>https://www2.330k.info/essay/detect_submittion_to_private_mail_from_gmail/</link>
      <pubDate>Tue, 29 Nov 2016 20:45:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/detect_submittion_to_private_mail_from_gmail/</guid>
      <description> 会社ではG Suite(旧Google Apps for Works)を導入しているが、 ある社員が個人のGmailアドレスに会社の情報の入ったメールを送信していた。
幸いPCで操作していたためPCのログ監視ソフト(SKYSEA Client View)で検知し、当該従業員に注意することができた。 ただ、同じことを会社支給のiPhoneでやられた場合に無力だったことに気づいたので、G Suite側でも対策を実施。
設定方法は以下の通り。
 「管理コンソール」の「アプリ」→「Gmail」→「詳細設定」と進む 「コンテンツ コンプライアンス」を追加 影響を受けるメールは「送信」にチェック 「次の一部がメールに一致する場合」を選択 「任意のエンベロープ受信者」が「いずれかの単語に一致する」にhttp://powerbiz.jp/abiz/tips/archives/26/ などから検知対象とするドメイン一覧を取得してスペース区切りにしたものを設定する (1000文字を超える場合は1000文字以内に収まるよう複数に分けて登録)   「上記の表現に一致する場合は、次の処理を行います」には「メッセージを変更」を選択 「その他の送信先」「受信者を追加」で配信先に管理者用のメールアドレスを設定(エイリアスにしておくとフィルタ作成で便利)   設定ができたら保存する(※全ユーザに適用されるまで1時間程度かかる) 管理者用のGmailの設定で、8で設定したアドレスに来たものをフィルタしてラベルをつけるようにしておく  注意事項  設定ミスすると全ユーザのメールが影響を受けるので、テスト用のOUを作ってから検証してから全ユーザに適用する コンテンツコンプライアンスでは、クレジットカード番号やパスポート番号が含まれたメールを検知可能 残念ながら執筆時点(Nov. 29 2016)では日本のマイナンバーの検知機能はない  </description>
    </item>
    
    <item>
      <title>EDINETが生成するPDFにフォントを埋め込む</title>
      <link>https://www2.330k.info/essay/make_font_embedded_pdf_from_edinet/</link>
      <pubDate>Fri, 11 Nov 2016 23:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/make_font_embedded_pdf_from_edinet/</guid>
      <description>EDINETで出力したPDFを会社のプレスリリースで掲載したところ、iPhoneで閲覧できない、という問題が発生した。
PDFファイルを見てみると、日本語フォントが埋め込まれていない(下図)。
 そのため、iPhoneなどMS系の日本語フォントがない環境では、日本語部分が真っ白の閲覧できないものになっていた。 ちなみに、Ubuntuでは別の日本語書体で代替表示された。
 ご丁寧に印刷も低解像度に限られている(上図)。
他社のプレスリリースを探してみると、そのままのPDFが使われていたところが多かったが、 中には低解像度で印刷して1ページが1枚の画像になったPDFも見つかった。苦労の痕跡が・・・。
本来はそのようなPDFを作成するEDINETのシステムが悪いのだが、上の人間は「iPhoneでも見れるようにしろ」と聞かない。
Google先生に聞いてみると、Macで見れないという2011年の投稿が見つかったので、昔からEDINETは変わっていないらしい。 続けて解決策を探すと、「PDFのセキュリティ設定を無視するビューアをつかって仮想PDFプリンタに印刷する」という方法で解決できることが分かった。
PDFのセキュリティ設定を無視するビューアで代表的なものはEdgeやFirefox(2016年11月現在)。従って
 Windows 10なら、EdgeでPDFを開いてプリンタにMicrosoft Print to PDFを選択して印刷 Windows 7でもAcrobatなどの仮想PDFプリンタがあれば、Firefoxで開いて仮想PDFプリンタに印刷  という手順でフォントを埋め込んだPDFを作成できた。(下図はEdge + Microsoft Print to PDFで作成したもの)
 ちなみに、このようにして作成したPDFは法的に問題ないのか弁護士の人に聞いてみたところ、OKらしい。</description>
    </item>
    
    <item>
      <title>勘定奉行の性能劣化に対処</title>
      <link>https://www2.330k.info/essay/performance_degration_of_kanjo_bugyo/</link>
      <pubDate>Sun, 06 Nov 2016 17:22:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/performance_degration_of_kanjo_bugyo/</guid>
      <description>社内では会計システムに勘定奉行(ネットワーク版)を使っているが、 担当者から「勘定奉行で仕訳帳の表示に20秒くらいかかる」と言われたので調査してみた。
その担当者のPC固有の問題かどうかを切り分けるため別のPCから同様の操作を行ってみたところ、同じ症状が発生した。 ということは、サーバ側に問題がありそう。
勘定奉行のクライアントは生のSQL文をサーバに発行する仕組みなので、 Wiresharkでパケットをキャプチャすることで発行されたSQL文を把握することができる。
その状態でサーバ側の負荷を測定してみると、特定のSQL文の処理に時間がかかっていることが分かった。
勘定奉行ではSQL Serverをバックエンドに使っているので、 「SQL Server パフォーマンス」などでGoogle先生に聞いてみると、以下のページがヒット。
どうする？ SQL Server のクエリ パフォーマンスが低下した！
これに従い、サーバ上でSQL Server Management Studioを起動し、勘定奉行で使用しているデータベースで
sp_updatestats  としたところ、1秒程度で処理が完了するようになった。 上記ページには各テーブル単位での統計情報更新や、実行プランの再作成、インデックスの再構築の方法も書かれているが、今回は行わなかった。
このようにSQL文を直接叩きに行く方法は多分メーカ(OBC)では非推奨だと思うが、 クライアント側にsp_updatestatsを発行するメニューくらいつけてほしいものだ。</description>
    </item>
    
    <item>
      <title>GPXトラックログを間引く・簡略化</title>
      <link>https://www2.330k.info/software/simplify_gpx/</link>
      <pubDate>Wed, 28 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/simplify_gpx/</guid>
      <description>  概要 GPSロガーで取ったGPXログを公開する際、
 途切れ途切れのトラックログを結合し 日ごとにそれをまた分割し それぞれを1トラック400ポイント程度に間引いて簡略化する  という手間がかかっていたため、この一連の作業を一括処理するプログラムを作った。
また、ツーリング中には事前に作成しておいたGPXファイルをAndroidのRMapsや地図ロイドに読み込ませて走行ルートを確認しているのだが、 GPXファイルに余分な要素があると、処理に時間がかかってしまう(あまりに重いと処理できないこともある)。
トラックログを間引くアルゴリズムは[Mathematica] 折れ線を間引くに記載した点数を指定するタイプのDouglas-Peuckerを実装している。 メルカトル図法に投影した座標で間引いているので、Google Mapsなどメルカトル図法の地図で見た時に形状をよく保存する。
使い方  ボタンを押してGPXファイルを選択 一括処理する内容をチェックして選択 「処理実行」ボタンをクリックして少し待つ 表示されたリンクをクリックしてGPXファイルをダウンロード  注意事項  Chrome 53、Firefox 49、Edge、IE 11にて動作を確認 IE8では動作しません IE 9, 10は環境が無いため確認できません 重いGPXファイルを処理しようとすると固まります(WorkerではXMLParserが使えないため) 複数ファイルを選択した時の並び順はOSやブラウザ、選択時の操作に依存します  なお、カシミール3DではGPXファイルをXMLとしてパースして読み込んでいるわけではないようで、 空要素(&amp;lt;trkpt lat=&amp;quot;***&amp;quot; lon=&amp;quot;***&amp;quot; /&amp;gt;)の形を認識できない。 そのため&amp;lt;trkpt lat=&amp;quot;***&amp;quot; lon=&amp;quot;***&amp;quot;&amp;gt;&amp;lt;/trkpt&amp;gt;の形に修正したものを出力している。
使用例 元のGPSログをカシミール3Dで読み込んだ画面  デフォルト設定で一括処理した後のGPXファイルを読み込んだ画面 (このデータの場合は、6時間途切れたらトラック分割するので1日毎に分割され、それぞれが400点に間引きされている)  更新履歴  カシミール3Dでも読めるよう、空要素の場合は&amp;lt;trkpt ***&amp;gt;&amp;lt;/trkpt&amp;gt;の形に置換するようにした。 (May 4 2014) 優先度付きキューの実装を変更して高速化。(May 28 2014) プログラムを全面書き直し。トラックの自動分割・結合機能追加。 (Sep. 24 2016) 標高をGoogle Maps Elevations APIから取得する機能を追加して統合。 (Sep. 28 2016)  </description>
    </item>
    
    <item>
      <title>m-241のバイナリデータからトラックログを吸い出す</title>
      <link>https://www2.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</link>
      <pubDate>Thu, 22 Sep 2016 07:14:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</guid>
      <description>GPSロガー(Holux m-241)のメモリが破損しているのか、 実は6月30日と7月3日の軽井沢→直江津ツーリングと、9月の西九州→佐多岬ツーリングでは、 ログが破損していたため、Googleのロケーション履歴を代用している。
バイナリデータは一応吸い出せているようなので、その構造を調べると、 HOLUX m-241 LoggerUtility .trlファイル構造の覚書 より以下のような構造になっている。
 1レコード20バイトの固定長 時刻4バイト 緯度4バイト 経度4バイト 高度3バイト 速度4バイト チェックサム1バイト  また、m-241は時折書き込み先のメモリアドレスがずれることがあるようだ、との情報も見つかったため、 バイナリエディタで除いてみると、どうも4バイトずつずれて記録されたデータがあるようだった。
そこで
 レコードの先頭バイトを4バイトずつオフセットさせて読み込んでみる 緯度と経度が日本付近のものと思われるものを片っ端から拾う 時刻は整数型なのでとりあえず読み込む 高度、速度のデータは無視！  という方針でMathematicaのプログラムを書いてみた。
data = Table[Module[{str, ret}, str = OpenRead[&amp;quot;2016091200.bin&amp;quot;, BinaryFormat -&amp;gt; True]; (* 最初に余分にiバイト読み込んで先頭をずらす *) Do[ BinaryRead[str, &amp;quot;Byte&amp;quot;], {i} ]; (* バイナリ形式で読み込む *) ret = Cases[ MapIndexed[ {First[#2], Sequence @@ #1} &amp;amp;, BinaryReadList[ str, {&amp;quot;Integer32&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Byte&amp;quot;}] ], {count_, d_Integer, lat_Real, lon_Real, __} /; (30 &amp;lt; lat &amp;lt; 40 &amp;amp;&amp;amp; 125 &amp;lt; lon &amp;lt; 140) :&amp;gt; {count, DateString[DatePlus[{1970, 1, 1, 0, 0, 0}, {d, &amp;quot;Second&amp;quot;}], {&amp;quot;Year&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;Month&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;Day&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;Time&amp;quot;, &amp;quot;Z&amp;quot;}], lat, lon}]; Close[str]; ret ], {i, 0, 19, 4}];  ※ 2016091200.</description>
    </item>
    
    <item>
      <title>2016年09月06日〜11日 小倉〜長崎〜佐多岬</title>
      <link>https://www2.330k.info/bicycle/touring/20160906-11-kokura-nagasaki-satamisaki/</link>
      <pubDate>Tue, 06 Sep 2016 21:52:07 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20160906-11-kokura-nagasaki-satamisaki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20160906-11-kokura-nagasaki-satamisaki\/20160906-11_001.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2016年9月6日 小倉 松浦 164.38 6:33:15 56.5 25.1 R3, R202, R204 虹の松原   2016年9月7日 松浦 諫早 156.93    R204, R202, R206, R34 平戸   2016年9月8日 諫早 熊本 147.</description>
    </item>
    
    <item>
      <title>Google MapsでGPXルート作成</title>
      <link>https://www2.330k.info/software/create_gpx_with_google_maps/</link>
      <pubDate>Sat, 06 Aug 2016 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/software/create_gpx_with_google_maps/</guid>
      <description>PC用フルスクリーン版 モバイル(スマートフォン)版  使い方  出発地点と目的地点を入れて「Calculate Route」をクリック。 途中経路を変えたい場合は、通常のGoogleマップのようにドラッグして変更します。「Reduce into *** points」をクリックすると、trkpt要素の数を削減します(Douglas-Peuckerアルゴリズムを使用)。赤線が簡略化されたルートです。 「Add Elevation」をクリックすると、標高(ele要素)を追加します(100点で1秒かかります)。 「Download」をクリックすると、download.gpxというファイル名でGPXファイルがダウンロードされます。  作った経緯 今までは自転車ツーリングをするとき、
 Googleマップでルートを作成 GMapToGPXでGPXファイルにする カシミール3Dで基盤地図情報(標高)で標高データを追加 累積標高などを確認 Androidの地図ロイドなどに取り込んでツーリング中に確認  というやり方でルートを検討・確認していた。
だが&amp;rdquo;新しいGoogleマップ&amp;rdquo;になってから、GMapToGPXが使えなくなってしまったので、 Google Maps API v3を使ってGPXのトラックを生成する、簡単なプログラムを書いてみた。
スマートフォンのブラウザ(標準ブラウザ、Chrome、Firefox)でも動作するので、ツーリングなどの出先でもルートを作成可能。
注意事項  Chrome(Ubuntu, Windows 7, Windows 10)、Firefox(Ubuntu, Windows 7)、IE 11、Edgeで動作確認しています。 Google Maps APIの制限により、途中に設定できる地点は8箇所までです。 Internet Explorer 8ではダウンロードができません。テキストボックスに生成されたGPXテキストをコピーし、メモ帳などに貼り付けutf8で保存してください。 Internet Explorer 9, 10は未確認です。 iOSのSafariではGPXファイルのダウンロードができません。  主な更新・修正点  地図ロイドやルートラボに合わせ、簡略化後の点数を800点と8000点にした。(May 26 2014) Douglas-Peuckerのアルゴリズムで優先度付きキューの実装を変更し、高速化。(May 26 2014) 間引き時にメルカトル図法で投影した座標に対してDouglas-Peuckerを適用するように変更。(Jun 6 2014) モバイル版、フルスクリーン版をGitHubにホスティング先を変更。(Mar 13 2015) IEとEdgeでの動作状況を追記。(Oct.</description>
    </item>
    
    <item>
      <title>Firefoxをグループポリシーで管理する</title>
      <link>https://www2.330k.info/essay/manage_firefox_settings_with_group_policy_without_gpo_for_firefox/</link>
      <pubDate>Tue, 12 Jul 2016 22:07:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/manage_firefox_settings_with_group_policy_without_gpo_for_firefox/</guid>
      <description>公式の情報はこちら : https://www.mozilla.jp/business/faq/tech/setting-management/
上記公式サイトにあるように、ActiveDirectory環境にあるFirefoxの設定を管理する場合、
 クライアント側にアドオン(GPO for Firefox)をインストール サーバ側に管理用テンプレート(ADMファイル)を配置 グループポリシーエディタで設定を編集  という手順が推奨されている。ただ、この方法だと
 既存ユーザへの自動設定は不可(ユーザにアドオンをインストールしてもらう必要がある) ユーザがアドオンを無効化してしまう可能性がある 最新のバージョンで追加された設定項目がない場合がある  といったデメリットがあるので、公式サイト中で「MCD用設定ファイルでの実現」という方法で行うことにした。
要件は以下の通り。
 Firefoxアカウントを使ったパスワード等の同期をさせない 強制的に最新版にアップデートさせる たまにしか社内LANにアクセスしない端末でも設定を反映させたい (公式サイトの「すべてのクライアントの設定を管理者が一括して変更したい」では常時社内LANにアクセスできる端末である必要がある)  手順は以下の通り。
 「autoconfig.js」と「autoconfig.cfg」を公式サイトの例にしたがって記述  autoconfig.js
pref(&amp;quot;general.config.filename&amp;quot;, &amp;quot;autoconfig.cfg&amp;quot;); pref(&amp;quot;general.config.vendor&amp;quot;, &amp;quot;autoconfig&amp;quot;); pref(&amp;quot;general.config.obscure_value&amp;quot;, 0);  autoconfig.cfg (ここではFirefoxアカウントによる同期の不許可と、自動アップデートの有効化を設定)
lockPref(&amp;quot;loop.enabled&amp;quot;, false); lockPref(&amp;quot;services.sync.enabled&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.addons&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.bookmarks&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.history&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.passwords&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.prefs&amp;quot;, false); lockPref(&amp;quot;services.sync.engine.tabs&amp;quot;, false); lockPref(&amp;quot;app.update.enabled&amp;quot;, true); lockPref(&amp;quot;app.update.auto&amp;quot;, true); lockPref(&amp;quot;browser.search.update&amp;quot;, true);   「autoconfig.js」と「autoconfig.cfg」を一般ユーザが読み取り可能なフォルダに配置 (例えば「\ドメインコントローラ\SYSVOL\ドメイン名\Deployment」など) グループポリシーの「コンピュータの構成」「基本設定」「Windowsの設定」「ファイル」を使い、 「autoconfig.js」と「autoconfig.cfg」を公式サイトで指定されたフォルダに配置。    64bit版Windowsに32bit版Firefoxがインストールされている場合は、「項目レベルで対象化する」にチェックし、 「Processor_Architecture」に「AMD64」を設定し、「%PROGRAMFILES(X86)%\Mozilla Firefox」に配置する。 ※ 両方ある場合は2つずつ設定する     最後に実際にクライアントPCにファイルが反映され、Firefoxのabout:configで設定されていることを確認</description>
    </item>
    
    <item>
      <title>2016年06月30日〜07月03日 軽井沢〜直江津</title>
      <link>https://www2.330k.info/bicycle/touring/20160630-0703_karuizawa-naoetsu/</link>
      <pubDate>Thu, 30 Jun 2016 21:51:44 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20160630-0703_karuizawa-naoetsu/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20160630-0703_karuizawa-naoetsu\/20160630-0703.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2016年6月30日 東京 軽井沢 154.89 6:46:24 51.1 22.9 荒川CR, R17, R18    2016年7月3日 軽井沢 直江津 155.37 5:59:01 66.2 26.0 R18     会社の研修旅行が軽井沢で行われることになったので、それに合わせて自転車で前日入りすることにした。</description>
    </item>
    
    <item>
      <title>2016年04月30日〜05月06日 岡山-しまなみ海道-四国西側半周</title>
      <link>https://www2.330k.info/bicycle/touring/20160430-0506_okayama_shimanami_shikoku/</link>
      <pubDate>Sat, 30 Apr 2016 21:51:30 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20160430-0506_okayama_shimanami_shikoku/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20160430-0506_okayama_shimanami_shikoku\/20160430-0506.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2016年4月30日 岡山 松永 86.12 3:46:39 51.0 22.8 R2    2016年5月1日 松永 西条 104.45 5:01:47 52.0 20.7 しまなみ海道, R196 今治城   2016年5月2日 西条 八幡浜 102.</description>
    </item>
    
    <item>
      <title>ffmpegでDVDをMPEGファイルに変換</title>
      <link>https://www2.330k.info/essay/convert-dvd-to-mpeg-in-a-batch-file/</link>
      <pubDate>Thu, 17 Dec 2015 20:49:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/convert-dvd-to-mpeg-in-a-batch-file/</guid>
      <description> 社内でアシスタントからDVDをPCで再生できるようにしたい、という要望を受けたので、 DVDを入れて起動するだけのバッチファイルを作ってみた。
DVDの中身のVTS_01_1.VOB, VTS_01_2.VOBというファイルをffmpegの-iオプションに指定すれば良いのだが、 パイプ記号「|」を使ってファイル名を連結しなければならない。 ただ、バッチファイル中でパイプ記号が入ると上手く連結できないので、 試行錯誤の結果、一旦「$$」という文字を挟んで連結した後、パイプ記号に変換、という手順になった。
使い方  以下のテキストをメモ帳にコピー＆ペースト 下のテキスト中でFドライブを指定している部分を各自のドライブ名に変更 拡張子をbatにして保存 DVDを入れてバッチファイルを起動  原則としてバッチファイルと同じフォルダにdvd_yyyymmdd.mpegというファイルが出来上がる
@ECHO OFF ECHO DVDから普通の動画ファイルへ変換を行います。 ECHO DVDがFドライブに入っていることを確認してください。 PAUSE SET A= FOR %%F IN (&amp;quot;F:\VIDEO_TS\VTS_01_*.VOB&amp;quot;) DO CALL SET A=%%A%%$$%%F SET TIME_TMP=%TIME: =0% SET NOW=%DATE:/=%%TIME_TMP:~0,2%%TIME_TMP:~3,2%%TIME_TMP:~6,2% SET B=&amp;quot;%A:$$=|%&amp;quot; ffmpeg -i &amp;quot;concat:%B:~2,-1%&amp;quot; -target ntsc-dvd -vcodec copy -acodec copy dvd_%NOW%.mpeg ECHO 変換が終了しました。 ECHO 出力ファイル: %~dp0 dvd_%NOW%.mpeg PAUSE  </description>
    </item>
    
    <item>
      <title>CompileするCコンパイラを変更する</title>
      <link>https://www2.330k.info/essay/change-c-compiler-in-mathematica/</link>
      <pubDate>Tue, 08 Dec 2015 17:40:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/change-c-compiler-in-mathematica/</guid>
      <description>Mathematica 8から、CompileでCコンパイラを使って直接ネイティブコードにコンパイルできるようになった。 使用するCコンパイラは、
Needs[&amp;quot;CCompilerDriver`&amp;quot;]; CCompilerDriver`$CCompiler = { &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;GCC&amp;quot;, &amp;quot;Compiler&amp;quot; -&amp;gt; CCompilerDriver`GCCCompiler`GCCCompiler, &amp;quot;CompilerInstallation&amp;quot; -&amp;gt; &amp;quot;/usr/bin&amp;quot;, &amp;quot;CompilerName&amp;quot; -&amp;gt; Automatic };  というように、CCompilerDriver`$CCompilerを変更して指定する。
以前からのCompile(&amp;ldquo;WVM&amp;rdquo;)と、各コンパイラの比較のため、ベンチマークを行ってみた。 検証環境は以下の通り。
 CPU: Intel Core-i7 3770 (インテル® HT テクノロジー ON) OS: Ubuntu 14.04 LTS 64bit Memory: 16 GB DDR3 1333 MHz  検証するCコンパイラは、GCC、Intel C++ Compiler、Clangの3種類。
 gcc: (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4 icc: icc (ICC) 14.0.3 20140422 clang: Ubuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)  Mathematicaコードは以下。1/i^2を総和してπ^2/6を求める単純な計算を行った。 ※私の環境ではICCは/media/storage/intel/compserxe/binにインストールしているので下記コードを使用する場合は注意。</description>
    </item>
    
    <item>
      <title>Tikaを使って指定したディレクトリ以下の全ファイルのメタデータを収集</title>
      <link>https://www2.330k.info/essay/aggregate-metadata-from-all-pdf-office-documents/</link>
      <pubDate>Sun, 29 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/aggregate-metadata-from-all-pdf-office-documents/</guid>
      <description>会社で外部に公開しているPDFファイルの作成者やタイトルにおかしいもの(社名が間違っている etc.)があることに気づき、 会社のファイルサーバにあるWord、Excel、PowerPoint、PDFファイルのメタ情報を一覧で出力し、 Excelにインポートして変なメタ情報が設定されていないかチェックするためのスクリプトを作ってみた。
準備 まずはapacheからTikaをダウンロード(執筆時点では1.11が最新)
wget http://ftp.jaist.ac.jp/pub/apache/tika/tika-app-1.11.jar  全メタデータを収集 とにかく全部のメタデータを収集したいときは、tikaのjarファイルと同じディレクトリに以下のようなスクリプトを配置。 検索対象のディレクトリは3行目で指定する。
#!/bin/bash dir=~/Documents/ output=metadata.xml port=12345 tmpfile=temp.txt java -jar tika-app-1.11.jar -s -x --port $port &amp;gt; $tmpfile &amp;amp; procid=$! sleep 1 echo &amp;quot;&amp;lt;?xml version=\&amp;quot;1.0\&amp;quot; encoding=\&amp;quot;utf-8\&amp;quot; ?&amp;gt;&amp;quot; &amp;gt; $output echo &amp;quot;&amp;lt;files&amp;gt;&amp;quot; &amp;gt;&amp;gt; $output find &amp;quot;$dir&amp;quot; -iname &amp;quot;*.pdf&amp;quot; -o -iname &amp;quot;*.doc&amp;quot; -o -iname &amp;quot;*.doc?&amp;quot; -o -iname &amp;quot;*.xls&amp;quot; -o -iname &amp;quot;*.xls?&amp;quot; -o -iname &amp;quot;*.ppt&amp;quot; -o -iname &amp;quot;*.ppt?&amp;quot; | while read i do echo &amp;quot;&amp;lt;file&amp;gt;&amp;quot; &amp;gt;&amp;gt; $output echo &amp;quot; &amp;lt;filepath&amp;gt;&amp;lt;!</description>
    </item>
    
    <item>
      <title>仮想的な専用線という言葉にだまされた残念な技術者</title>
      <link>https://www2.330k.info/essay/what_l2_forwarding_ssl_vpn_protects/</link>
      <pubDate>Sun, 29 Nov 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/what_l2_forwarding_ssl_vpn_protects/</guid>
      <description>例によってパワハラを受けた研修先で最初に受けたパワハラが、 リモートアクセスのSSL-VPNに関する技術的な質問をした時のことだった。
研修先の会社ではJuniper社(現PulseSecure社)のSSL-VPN製品を導入しており、 クライアントPC側にはNetwork Connectというソフトウェアをインストールしていた。
これはL2フォワーディング方式のSSL-VPNで、起動するとネットワークアダプタに仮想NICが追加される。 仮想NIC経由で通信することで外部からでも社内LANに接続できる。
研修先企業では外出時にSSL-VPNの接続を義務付けている、という話になったときのことだった。
 パワハラ上司(自称ITエンジニア)「外出先のホテルなどでは社内システムにアクセスしない時も絶対にVPNで接続してからインターネットに接続しろ。」
 私「なぜですか？」
 パワハラ上司「同じネットワークにいるコンピュータから盗聴や攻撃をされるだろ！」
 私「HTTPSでないHTTPは確かに盗聴されますが、SSL-VPNで接続したところで攻撃は受けるのではないですか？」
 パワハラ上司「VPNは仮想的に専用線を張るんだ！」
 私「仮想的に専用線を張ったところで物理的には元のネットワークにいますよね？」
 パワハラ上司「専用線で接続したら攻撃されない。だから仮想的に専用線を張ってるんだから攻撃されない！」
 私「(喩え話じゃなくてちゃんと技術的な回答がほしいんだが…)」
 パワハラ上司「ちょっとは調べてから質問しろ」
パワハラ上司「俺の時間もタダじゃねえんだぞ！」
パワハラ上司「間違ったら『はい、すみません』でいいんだ。ほれ、早く言え！」
 私「はい、すみません。」
  とまあ、これが今思い返すと調子に乗らせる原因だったかもしれない。 研修先の自称ITエンジニアの技術力に疑念を持った最初の出来事だった。
Network Connect起動時に作成される仮想NICがメトリックで優先されるように設定されるので、 VPN接続後のクライアント発の通信はすべて仮想NIC経由となる。
ただ私が疑念に抱いたのは、同じ物理ネットワークの他の端末から通信が来た場合は、元の物理NICから応答するのではないか、という点だ。
具体例としては、クライアントPCでファイル共有を有効にしていた場合、 SSL-VPNで接続していても同じネットワークにいる端末から共有しているファイルが見えてしまうのではないか。
技術者なら実際に試してみるべき、ということで、実験してみた。
 クライアントOS: Windows 7 64bit クライアントPC: ファイル共有ON 物理ネットワーク環境: 来客用Wi-Fi(普通の家庭用Wi-Fiルータと同じ環境) SSL-VPNクライアント: Pulse Secure 5.2 (Network Connectの後継のJunos Pulseの後継) SSL-VPNアライアンス: MAG2600  という環境でSSL-VPNを接続した後、 同じ物理ネットワークの他のPCから共有されたファイルが見えるかどうかを確かめてみた。
結果: 見えた　NetBIOS名でもアクセス可能
物理NICに割り当てられたIPアドレスを使ってもアクセスできたが、NetBIOSによる名前解決もできた。 ということはUDPのブロードキャストにも物理NICから応答する、ということが分かった。
物理NICが普通の通信が出来ないとカプセル化したパケットの通信もできない、というのは 普通に考えればわかると思うのだが、残念ながらパワハラエンジニアの知識レベルはその程度だった、ということか。
結論としては、下記の通り。</description>
    </item>
    
    <item>
      <title>ST-5703の変速機構が破損したのでWレバーに交換</title>
      <link>https://www2.330k.info/essay/exchange-st-5703-to-sl-r400/</link>
      <pubDate>Sun, 08 Nov 2015 02:43:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/exchange-st-5703-to-sl-r400/</guid>
      <description>先月の軽井沢〜直江津のあと、2年ぶりに自転車をオーバーホールした。
その一環でシフトワイヤーケーブルの交換を行ったところ、フロントディレイラーの調子がおかしい。
フロントトリプルなので、インナー⇛センター⇛アウターは問題なく変速できるのだが、 アウター⇛センターに変速しようとすると、「バキッ、ガッチャン」と音がして、一気にインナーまで落ちてしまうか、 まったく変速操作を受け付けなくなるか、のどちらかの症状が発生。
ネットで調べると、記 ： シマノ105 STI左レバー ST-5703不調 と同じように、ワイヤー先端のタイコが外れてしまっていた。
何回ワイヤーのタイコの位置を直してもタイコが外れて変速操作の不調が治らない。 さて、何とかならないかと思いながら何回か変速操作をしていたところ、レバーの隙間から以下の写真のような部品が落ちてきた。
 シマノの説明書を見ても該当する部品は見当たらないし、よく見ると穴の周囲は削れているし、 あれ？もしかして、完全に壊れちゃった？
とはいえ、STIレバーは結構お値段がするもので、amazonで25000円くらいする。 それに今のコンポも6年目で走行距離が16000km程度(あまり走れていないな・・・)なので、そろそろ一式換装しようか、と考えていたところ。
一式交換するとなると、11s対応のホイールも交換が必要になり20万円程度の出費を覚悟しなければならないし、 なによりせっかく来月の初めに取った遅めの夏休みに間に合わない。
一晩考えた後、「フロントだけならWレバーでしばらく乗り切ってからコンポを一式換装しよう」ということにした。
というわけで、早速amazonでSL-R400を購入。お盆だったがナチュラムからは翌日届いた。
 早速説明書を読みながら取り付け。取り付け作業の中で、説明書から日本語のページを探すのが一番手間取った。
あとはワイヤーの通し方の説明が全くないことに困惑(STIレバーの説明書には詳しく書いてあるのに)。 だが実物を見てみたら説明が不要なくらい簡単な構造であることが分かった。
 手でクランクを回しながら変速操作をしてみると、フリクションの独特な操作感は確かにハマるものがある。 面倒なワイヤーの調整も不要。これは楽しいかもしれない。
とりあえず来月に予定しているロングツーリングはこれで乗り切ってみる。</description>
    </item>
    
    <item>
      <title>Recon JETを試してみた</title>
      <link>https://www2.330k.info/essay/first-review-of-recon-jet/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/first-review-of-recon-jet/</guid>
      <description>購入したのはかなり早いタイミングだったが、なかなか試すことができなかったRecon JET。
やっと自転車で走るときにつけて使い心地はどんなものか試すことが出来た。 ANT+対応の心拍計などは持っていないので、Recon JET単体でのテスト。
つけ心地  普通のサングラスに比べればやはりパッドが当たる部分が痛くなるが、耐えられないほどではない 日本は車道の左側通行なので、視界の右下をディスプレイに遮られると、後方確認がしにくい  GPS  測位が遅い(m-241に比べて10分以上捕捉に時間がかかることもある) 測位の精度はm-241と同等以上(下記マップは障害物がほとんどない荒川CRを走行したとき) ただし、積算距離の精度は低い(１箇所でも位置がずれると、そのせいで距離が大きく計算される)  Recon JET(赤線)とm-241(青線)のGPSログ比較。
  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/essay\/first-review-of-recon-jet\/2015081602.kml&#34; }); ctaLayer.setMap(map); }   バッテリー  最大2時間半しかもたない 予備のバッテリーを持っていても、1日中走行するには耐えられない  カメラ  解像度は低いので、携帯電話のほうがよっぽどまし。 動画は撮影時間を予め15秒や1分などと予め設定してから撮影をスタートするので、使いどころが難しい。  荒川CRで実際に撮影した画像と動画
 マップ  黒背景に道路が暗い灰色で表示されるので非常に見にくい 道路名や何号線かなどが表示されないため道に迷った時や知らない土地では無力  Recon Uplink  Recon JETを接続すると自動で記録をWeb上に上げてくれる 今までの走行記録(距離、平均速度、獲得標高など)をブラウザで見れるのは便利なので、 毎日ガチで2時間の練習ばかりする人であれば有用かもしれない  総評  サイコンの代替になるにはまだまだ性能不足(特にバッテリー)。 カメラやマップもRecon JETを使うくらいなら携帯電話(スマートフォン)のほうが断然良い。  ということで、残念ながら現時点ではロングツーリングのお供にはなれなかった。</description>
    </item>
    
    <item>
      <title>NHKの受信契約を解除し受信料と通信料金を抑える</title>
      <link>https://www2.330k.info/essay/nhk-contract-cancellation-and-communication-cost-saving/</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/nhk-contract-cancellation-and-communication-cost-saving/</guid>
      <description>現在所持している携帯電話は、2013年11月に購入した京セラ製のURBANO L01。
これにはワンセグ機能が付いているため、NHKの営業センターの人に見つかり、
 「テレビを所持していなくてもワンセグ機能付きの携帯電話を所持しているだけで契約が必要です」
 と言われ、渋々NHKとワンセグのみ受信契約をした。
契約した時から、毎月割がなくなる2015年11月にワンセグ機能がない機種に変更することを決意していたが、 なんとauから出ているAndroidスマートフォンは(TORQUE G01を除き)すべてワンセグ機能が付いている。
ワンセグ機能がついていないのはiPhoneとFx0のみだが、
 iPhoneのSafariでは拙作のGPXでのルート作成ができず(ダウンロードができない)、 FirefoxOSでは多分GPXファイルの作成はできるが、地図ロイドやrmapsに相当するような地図アプリがありそうにない。  私は15年近くauユーザーなので、キャリアメール(@ezweb.ne.jp)も変えたくない(変更の連絡が面倒)。
要件をまとめると、
 ワンセグ機能が付いていないこと(NHKのワンセグ契約を解約するため) 今までの電話番号とキャリアメールのアドレスを維持すること Android端末であること(GPXファイルが作成でき、表示するアプリがあること) 電話は発信・着信ともにめったにしない データ通信も家と会社にはWi-Fiがあるので、月1GBも使わない  という条件で、携帯電話の通信料とNHKに払う受信料のトータルを削減したい。
方針 上の要件を解決するため、色々と検討した結果、以下のような方針とした。
 ワンセグ機能がないSIMフリー端末を購入 MVNOの格安SIMを新規に契約 格安SIMはデータ通信のみ IP電話アプリ(050PlusやSMARTalk)を入れて050の番号で音声通話はできるようにする auの端末はLTEフラットを解除し、電話番号とメールアドレスを維持するための最低限の契約だけ残して実家に置く (実家にはテレビがあり、NHKと契約しているので、ワンセグ受信設備があっても大丈夫) 現在のau電話番号への着信は、SMARTalkの050番号へ転送するように設定し、新端末で着信できるようにする (転送時にauの通話料がかかるが、ほとんど着信もしない) auのキャリアメール(ezweb.ne.jp)はGmailで送受信するように設定  選んだもの  SIMフリー端末 : ASUS ZenFone 2 Laser SIMカード : DMM Mobile データSIM ライトプラン(月額477円) IP電話 : SMARTalk  ヨドバシカメラやビックカメラの実店舗で触ってみたところ、 ZenFone 2 LaserよりP8liteのほうが手に持ってしっくりくるも印象だったが、 microSDXCに対応しているという一点だけでZenFone 2 Laserに決定した。
SIMカードは当時データ通信1GB/月で一番安いもの。
IP電話は、ほとんど通話をしないため、通話料金ではなく月額が無料のSMARTalkを選択。
経費(受信料 + 通信費)の変化 通信費がどれだけ節約できるかをまとめると下表のようになった。</description>
    </item>
    
    <item>
      <title>カンチレバーブレーキをミニVブレーキに換装</title>
      <link>https://www2.330k.info/essay/exchange-canti-lever-brake-to-mini-v-brake/</link>
      <pubDate>Sun, 18 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/exchange-canti-lever-brake-to-mini-v-brake/</guid>
      <description>私が現在乗っている自転車はSURLYのCROSS-CHECKで、一応シクロクロスの分類に入る。 なので、購入時はカンチレバーブレーキ(CaneCreek SCX-5)を付けていた(当時はミニVはなかった)。
5年間はシューをSwiss stopに交換するなどして使用してきたが、
 パワーロスが大きく、長い下り道などで手が疲れる(握力がなくなり下り道で休憩することも) チドリまでのワイヤー長さと、左右のブレーキ間のワイヤー長さの2箇所を調整する必要があり、難しい。 特にフロントでブレーキ時にビビる(ガタつく)ため、スムーズに止まれない。 (当初はフロントフォークの剛性不足かと思ったが、今回の交換で良くなったので、 おそらくチドリでワイヤーを引く構造による剛性不足と考えられる)  という問題に悩まされてきた。
一応フォローしておくと、制動力自体には不安はなかった(握力が続く限りは)。
ところが、シマノがミニVブレーキを発売した、というのを遅ればせながら知った。
ネットではCROSS-CHECKへの取り付け例は見つけられたものの、 自分のブレーキレバー(5700系105)で引けるかどうかは調べきれなかったが、交換を決意。
早速Amazonで、105グレードのBR-R573とブレーキケーブルセットを購入して交換した。
交換作業は上記のページで詳しく解説されているので割愛。 交換後は下の写真(リア)のようになり、タイヤとのクリアランスは十分。 付属品の90度のバナナではワイヤーが横に出すぎたため、自在バナナに変更。
 交換後、荒川CRと都内の一般道を40kmほど試走してみた。 その結果、
 ブレーキレバーを軽く握れるようになった。 制動力も強すぎることはなく、コントローラブル(シューは付属のシマノ製)。 ブレーキング時のビビリ、ガタつきがなくなり、スムーズに止まれるようになった。 ワイヤーの引きしろが少ないので、リムとシューの間のクリアランス調整はシビア。 だが、調整箇所が1箇所になったため調整作業の難易度はむしろ少し下がった。  と、概ね交換した目的を果たせた。
唯一のデメリットとしては、ホイール(リム)に振れが生じるとすぐにシューと接触してしまうこと。 ロングライドではニップル回しも持っていったほうが良さそうだ。</description>
    </item>
    
    <item>
      <title>秘密録音した音声ファイルをYoutubeにバックアップ</title>
      <link>https://www2.330k.info/essay/upload_recorded_mp3_files_to_youtube/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/upload_recorded_mp3_files_to_youtube/</guid>
      <description>私はパワハラ対策として、毎日ICレコーダーを使って秘密録音を実施している。 ただ、毎日10時間を超える録音時間のため、32kbpsで録音しても1日あたり200MB弱の音声ファイルがHDDに追加されていき、HDDの容量を圧迫していく。
そこで、バックアップを兼ねて動画化してYoutubeにアップロードするようにし、 HDDの空き容量が減ってきたらオリジナルの録音ファイルを消去していくことにした。
ffmpeg(avconv)を使い、以下の手順で実施する。
 適当に画像ファイルを作成する 画像ファイルから無音声の動画ファイル(再生時間24時間)を作成する 無音声の動画ファイルと、毎日録音した音声ファイルを結合する 結合した動画ファイルをYoutubeにアップロード  具体的には、適当にblank.pngという名前で640x480とか好みのサイズで画像を作成し、以下のコマンドで24時間の無音声動画ファイル(blank24.mov)を作成。
avconv -y -loop 1 -r 1 -i blank.png -t 86400 blank24.mov  これでフレームレート1 fps、動画時間が24時間(86400秒)の無音声動画ファイルblank24.movができる。 私の環境では5分程度かかったが、このファイルは1度作っておけば何度でも使えるので、最初の1回だけ待てば良い。
次に、この無音声の動画ファイル(blank24.mov)と、録音した音声ファイル(input.mp3)を結合する。
avconv -y -i blank24.mov -i input.mp3 -vcodec copy -acodec copy -shortest output.mov  -shortestオプションを加えているので、24時間のblank24.movと音声ファイルの時間のうち、短い方の時間でoutput.movが作成される。
動画になったことにより、元のMP3ファイルよりもファイルサイズが1割ほど増える。 私の環境では12時間程度録音したものからでも1分程度のエンコード時間で動画ファイルを作成できた。
ちなみに出来上がりの動画ファイルのコンテナがMOVなのは、録音した音声ファイルの拡張子が、 ICレコーダーで録音したMP3、Androidの録音アプリのmp4、iPhoneの録音アプリのm4aと3種類あったため、 それと競合しないコンテナ形式を選んだ。
また、無音声動画ファイル(blank24.mov)を作成せず、1コマンドで静止画と音声ファイルを結合することも可能だが、 都度動画部分のエンコードが発生するため時間がかかる。
毎日音声ファイルが増えていくような状況では、予め無音声動画ファイルをつくっておき、 -vcodec copyとすることで再エンコードを省略すれば、毎日の処理が高速化できる。
ただし、Youtubeの制限により、15分の制限を解除したアカウントでも、動画の最長時間は12時間に制限される。 したがって、私は以下のようなシェルスクリプトを書いて実行している。
#!/bin/bash find ./ -iname &amp;quot;*.mp3&amp;quot; -o -iname &amp;quot;*.mp4&amp;quot; -o -iname &amp;quot;*.m4a&amp;quot; | while read i do hour=`avconv -i &amp;quot;$i&amp;quot; 2&amp;gt;&amp;amp;1 | grep Duration | sed -E &amp;quot;s/.</description>
    </item>
    
    <item>
      <title>2015年08月30日〜09月04日 山陰地方縦断</title>
      <link>https://www2.330k.info/bicycle/touring/20150830-0904-shimane-tottori/</link>
      <pubDate>Sun, 30 Aug 2015 21:51:05 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20150830-0904-shimane-tottori/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20150830-0904-shimane-tottori\/20150830-0904.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2015年8月30日 下関 萩 102.09 4:32:35 59.9 22.5 R191    2015年8月31日 萩 浜田 99.56 4:32:20 47.4 21.9 R191, R9    2015年9月1日 浜田 松江 129.</description>
    </item>
    
    <item>
      <title>言いがかりを付けられたので切り返してみた</title>
      <link>https://www2.330k.info/essay/augue-against-power-harassment-bully/</link>
      <pubDate>Fri, 28 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/augue-against-power-harassment-bully/</guid>
      <description>今朝、以前パワハラを受けていた研修先(以下G社とする)の人間からメールが来た。 要約すると、以下の内容になる。
 撤去作業終わりました
**社(私の会社)の作業なので一般常識的に事前に連絡するのが筋です
 確かに自分の会社が発注した作業で、G社側でネットワーク機器の撤去作業があったのだが、当然私は事前に連絡を行っていた。 それを忘れている自分を棚に上げ、偉そうにこちらに「一般常識」を説いてきた。
他にも研修中は私に対して
 「間違ったらすぐに『はい、すみません』と言え！！」
「報・連・相をきちんとしろ！！」
「社会人として失格だ！」
 と怒鳴られ続けてきた。
以前は研修中ということで下請け同然に扱われることを甘受していたが、 現在は研修期間は終了しており、下請けのように扱われる道理はない。
また、研修中は連日のパワハラで疲弊しきっていたが、研修終了と共に精神的に回復してきたので、 一発切り返すことにしてみた。
 私は事前に連絡していますので、筋は通してあります。
筋を通すという意味では、御社が原因で弊社のシステム移管が遅れていると他社経由で聞きましたが、 御社からは何の連絡もありません。
こちらに筋を通せ、とおっしゃるならば、 御社も筋を通すべきではないでしょうか。
もちろん私の論理に間違いがあれば、ご指摘ください。
弊社としては御社との関係を悪化させる意図はございませんが、 御社の一方的な態度は弊社に限らず、相手に良い印象を与えないと考えます。
 研修先の人間がまともな人間であるならば、
 私に反論する 間違いを認める  のいずれかの連絡が来るはずだが、メールを送信して8時間たった現時点では来ていない。
私には「『間違ったらはい、すみません』と言え！」と怒鳴り続けていたのだが、 やはり自分たちの間違いを認めて自省できるような人間ではなかったようだ。
さて、今後の彼らの対応について予想してみる。
恐らくだがいつもの彼らのやり口から、私のメールへの対応は反論でも謝罪でもなく、 そんなことを言うと、○○してやらんぞ！ もしくは ○○してやるぞ！ という脅迫を行ってくると予想する。
これは現在もG社にユーザーサポート業務を一部委託していることを盾に取った脅迫だ。
とはいえ、その対価として高額な「経営指導料」なるものをG社には支払っている。
ただ、これが相場の4倍程度の値段で、しかも対応時間は平日の日中に限る、というものなので、 東証一部上場のG社は監査法人に経営指導料について突かれると痛い(不正な利益供与と疑われる)のではないか。
今後、進捗があれば追記していきたい。
増長した人間が言う「一般常識」とは何なのか、「社会人」とはどういう行動をするのだろうか。面白そうだ。
後日談(2週間後)
今のところ面白い展開にはならずにすんでいる。 G社は私が休暇を取っている間に、私の上司にきちんと状況を説明しに来たらしい。
G社から私への謝罪はないものの、その後の電話の対応は非常に丁寧になった。 監査法人のコンプライアンス通報窓口へ送るメールの文面を準備していたのだが、送らずに済みそうだ。
今後も続くと良いが・・・
後日談その2(2ヶ月後)
やはり彼らは嫌がらせを行ってきた。
残念ながら私の予想は当たり、 「延長の連絡がないから今月(10月)でメールサーバの契約を切るぞ」 と一方的に通告してきた。 (現在使用しているメールサーバはクラウド型のメールサービスで、過去の経緯からG社と自分の会社で共有している)
事前に「10月以降の支払いはG社と弊社のアカウント数に按分した額をG社から請求する」と取り決めてあるので、 今回のG社の行為は契約違反であり、もしかしたら脅迫罪にもなるかもしれない。
さらに、私の会社で使用している分だけアカウント数が減っても メールサーバの利用料金は変わらないため、G社側にコスト削減などのメリットはない。 完全に嫌がらせ目的であり悪質である。
もう少ししたらメールサーバも切り替えるので、ようやく完全に縁が切れる。
心置きなく温めておいた監査法人への通報メールを送信した。
後日談その3(2ヶ月半後)
どうも監査法人が動いたらしい。</description>
    </item>
    
    <item>
      <title>Windows 10を早速テストしてみた</title>
      <link>https://www2.330k.info/essay/install-windows-10-to-panasonic-letsnote-cf-n10/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/install-windows-10-to-panasonic-letsnote-cf-n10/</guid>
      <description>Windows Insider Programに登録していたので、7/31に「Windows 10がでたよ〜」というメールがGabe Aulからやってきた。
ゆくゆくは更新プログラムが提供されるけど、早く試したい人は「メディア作成ツール」をダウンロードして使うといいよ、 とのことなので、会社で余っていたPCにインストールしてみた。
インストール  機種: Panasonic Let&amp;rsquo;s Note CF-N10(法人向けモデル) Windows 7 32bit版からのアップグレード Office 2010、Adobe Acrobat Pro XI、トレンドマイクロウイルスバスターがインストール済み  インストール方法は基本的に http://ascii.jp/elem/000/001/034/1034923/ の通り。 ※現在は直接ISOファイルがダウンロードできる模様
ただし、指示に従って進めていると、以下の2つのソフトウェアをアンインストールしなさい、と出てくる。
 Intel&amp;reg; Dynamic Power Performance Management Realtek High Definition Audio Driver  Realtekの方は、「アンインストール」ボタンをクリックすればOK。
Intelの方は、 http://answers.microsoft.com/ja-jp/windows/forum/windows_8-windows_install/windows-8/cefec781-59a2-4f78-925a-0b34c70b53b7?auth=1 に情報がある。
Let&amp;rsquo;s Noteの場合、 C:\util2\drivers\etm\DppmCleaner.bat、もしくはLPOSetting.jsを実行する、とあるが、 CF-N10の場合はバージョンが違うためか存在しない。
仕方がないので、時期の近い他機種向けのドライバーをインストールして、上記のLPOSetting.jsを実行することで解決。 その後しばらく待てば、無事Windows 10へのアップグレードが完了した。
インストール結果 現在のところ、インストール後の結果は以下の通り。
 ActiveDirectoryへの参加　→　○成功 グループポリシーの適用　→　△ユーザーの構成のみ有効、コンピュータの構成は有効にならない (ただし、ドメインコントローラ側(Windows Server 2012R2)でのシミュレーションでは適用されるはず) Office 2010の起動　→　△起動は成功(Outlookの設定情報は引き継げず) Adobe Acrobat Pro XIの起動　→　○成功(ただしデフォルトではEdgeでPDFを開く) ウイルスバスター　→　○問題なく動作している模様(リアルタイム検索、パターンファイルのアップデート) BitLockerによるドライブの暗号化　→　○成功(運良くCF-N10もTPMを積んでいた)  その他感想  起動時間はWindows 7とあまり変わらない感触 シャットダウンは早くなった印象 たまに画面の文字がボケる(ClearTypeの設定をいじっても変わらず) 現状ではGPOでコンピュータの構成が効いていないので、クライアント側かサーバ側で対応するタイミングが来るまでは様子見。  Aug.</description>
    </item>
    
    <item>
      <title>会社から外部へのファイル・データ持ち出し対策</title>
      <link>https://www2.330k.info/essay/how-to-take-files-out-from-company/</link>
      <pubDate>Sun, 19 Jul 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-take-files-out-from-company/</guid>
      <description>ベネッセの子会社での情報漏えい事件では、スマートフォンを使ってデータをPCから取り出していたらしい。 そこで、私の研修先の会社の社内SE部門の人たちは、以下の内部者によるファイルやデータの持ち出し対策を行っていた。
 資産管理ソフト(SKYSEA Client View)を導入  USBメモリやスマートフォンを挿しても書き込めないように設定 ネットワーク経由でもSKYSEAにログが残るからわかる  SKYSEAの機能で知らない機器がネットワークに接続されても検知できる(ただし、よく仕組みはわかっていない模様) Webフィルタリングソフト(InterSafe CATS)も導入 会社のメールサーバ経由での送受信メールはすべて保管  M&amp;amp;Aアドバイザリーという業務の特性からとにかく情報漏えい対策にお金はかけており、 セキュリティには相当な自信をお持ちでいらっしゃった。
ただ、素人目からしても抜け道がいくつか見えたので、研修を終えて自分の会社に戻った瞬間に以下に対して策を講じた。
 Bluetoothが使い放題で、右クリックして「送る」メニューをするだけで簡単にファイル送信可能。 またOfficeのBluetoothアドイン経由でも送信可能。 ※SKYSEAにはBluetoothに接続する機器を制限する機能があるが、iPhoneとのテザリングや無線マウス、キーボードを使用している人がいるので研修先企業では禁止にできなかった。 ネットワークの共有(ICS)や、SoftAPにより個人端末を社内LANへ接続可能 ※SKYSEAにはネットワークに登録されていないMACアドレスの端末が接続されたことを検知・遮断する機能あり。だが直接外部端末を社内ネットワークに接続しない(PCでNAPTを行う)場合は、SKYSEAでは検知不可能。 IISをインストールし、AdHocやWiFi Directで接続されると外部端末からアクセスしての持ち出しが可能。 ※SKYSEAはユーザが新たなソフトウェアをインストールすると検知できる。しかし、SKYSEAのサーバにIISも入れる必要があるためデフォルトだとIISがホワイトリストに入ってしまう。 Hyper-Vをインストールして仮想マシン経由でアクセスされると制限が効かず、ログも残らない。 各ユーザに管理者権限を与えているので、デフォルトで管理共有が有効になっており、外部端末からアクセスして持ちだし可能。 ※SKYSEAには共有フォルダの作成を制限できる機能はあるが、インストール時点で作成されていた場合は禁止できない。 NTFSのジャンクションと上記の方法(ICS、SoftAP、IIS)の組み合わせで、ローカルファイルへのアクセスに見せかけてファイルサーバのファイルも持ち出し可能なので、 ログを見てもファイルサーバからデータを持ちだしたことが分からない。 会社では携帯電話にiPhoneを採用しており、クライアントPCにはバックアップ用にiTunesをインストールしている。 構成プロファイルでApple Storeの使用を禁止しているが、  iTunesを使ってPCからApple Storeのアプリを自由にインストール可能 しかもiTunesのファイル共有機能も有効なので、iPhone経由でいくらでも外部に持ち出せる  標準ブラウザとしてFirefoxを採用しているが、Firefox Syncで個人アカウントを作成し、ブックマークやパスワードを個人PCと同期可能。 テキスト情報ならブックマークに見せかけて同期すれば持ち出せる。 Google Chromeで個人のGoogleアカウントとしてログイン、同期可能なので、Firefox Syncと同様にいろいろ持ち出せる。 また、Google Cloud Printにより家のプリンタに出力することも可能。 Google ChromeではInterSafe CATSとSKYSEAの組み合わせではログ取得ができないので、 InterSafe CATSに引っかからないウェブサイトであれば、ファイルをアップロードし放題。ログも残らない。 ※これはSKYSEAの問題ではなく、InterSafe CATSのフィルタリングがかなりエグい仕組みのため &amp;gt; Feb. 6 2016 追記: InterSafe CATS 4.3以降はこの競合問題は解決した Skype.exeを実行不可にしているものの、Skype for Business(Lync)はスルーなので、ファイル送信し放題 また、「Skype.exe」という名前のファイルを実行禁止・ファイル名変更禁止したりできるが、それでも抜け道はある ※SKYSEAはexeファイルのハッシュ値でブラックリストを作成できる　⇔　1bitでも違うexeファイルを作れば抜けられる  ※はSKYSEAの製品自体が悪いわけではないことの説明。 私はSKYSEAはいい買い物だったと思っているので誤解なきよう。</description>
    </item>
    
    <item>
      <title>日本企業における成果主義とパワハラ</title>
      <link>https://www2.330k.info/essay/results-oriented-approach-of-japan-companies-and-power-harassment/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/results-oriented-approach-of-japan-companies-and-power-harassment/</guid>
      <description>今年の5月までの半年間、研修先の企業で
 自分がミスをしたり、言いがかりをつける格好の餌を与える 相手がひたすら満足するまで怒鳴りつける しばらくしたら、定番の以下の言い訳をする  「さっきのは悪気はなかった」 「お前の為を思って怒ったんだ」   のループを繰り返していた。
周りや相手の上司に現状を訴えても、「あいつが怒りは愛があるから良いんだ」と言われる。
パワハラに限らず、体罰をする人は皆「愛を持ってやった、愛の鞭だ」と言う。
こうして私は不眠、吐き気、下痢などの体調不良になり、薬(イリボー、ルネスタ、レクサプロ、リボトリール)が どんどん増えていった。また、カウンセリングにも行くようになった。
話は変わって、勤怠管理システムについて経営者と会議をしたところ、 「うちの会社(金融業)の従業員は、皆プロフェッショナルなので、結果で評価してもらいたいと思っている。 我々経営者も結果で評価する。」 という方針が経営者から出された。
言われた瞬間はちょっとした違和感を覚えただけだったが、よくよく考えてみると、 結果で評価する、と、愛がある指導ならば何でも認められる、は矛盾している。
愛がある指導というプロセスを持って評価していて、結果を評価していない。
結果で評価するならば指導についても結果で評価するべきで、私の場合は
「怒鳴りつける指導を繰り返すことで、不眠や吐き気などの体調不良と 薬による治療、カウンセリングが必要な状態となったという結果をもたらした。」
という結果を持って評価するべきだ。
ということは、不完全な成果主義、結果主義がパワハラを生むのではないか。
とはいえ完全な結果主義を取ると、実際に体調不良にならなければどんな暴力的な言動も問題ない、ということになってしまう。 ただ、金融業の経営者であれば、実際に体調不良になる前でも経営上のリスクとして判断できるはずだ。
次の会議ではちょっとこの理論でジャブを打ってみよう。</description>
    </item>
    
    <item>
      <title>WSUSなしでWindows 10の広告をWindows Updateから非表示にする</title>
      <link>https://www2.330k.info/essay/disable_specific_windows_update_without_wsus/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/disable_specific_windows_update_without_wsus/</guid>
      <description>先月頃から、Windows 7の通知領域に「Windows 10を入手する」とか「無料アップグレードを予約」とかいう邪魔なMicrosoftの広告が入るようになってきた。 社内SEとしてはユーザに勝手にOSをアップグレードされるわけにはいかないので、消し去りたい。
ネットを探してみると、やはり同様の悩みを持つ人は多いらしく、結論としては、
 GWX.exeとGWXUX.exeをタスクマネージャで強制終了する インストールされたWindows Updateの「KB3035583」をアンインストールする 再度Windows Updateがインストールさせようとしてくるので、KB3035583を右クリックして「非表示」にする  ということらしい。 → 参考サイト: 「Windows10を入手する」の通知が消えない＼(^o^)／
さて、1人社内SEとしては以上の手順をユーザの全PCに行うのは無理なので、なんとか自動化したい。 1と2についてはコマンドプロンプトで可能なので、あっさり情報が見つかり、
Taskkill /IM GWX.exe /F Taskkill /IM GWXUX.exe /F wusa.exe /uninstall /kb:3035583 /quiet /norestart  と書いたバッチファイルをログオンスクリプトに仕込むことで可能だった。
問題は3の何度アンインストールしても再インストールさせようとしてくる点。 根本的な解決策はもちろんWSUSサーバを立てて、KB3035583を承認しなければ良い。
だが、私の会社にはWSUSサーバはない。 レジストリをいじったりして特定のWindows Updateを非表示にする方法がないか、と調べてみたら、 Windows Update Agent APIというのがあることを発見。
英語の情報しかなかったが、サンプルを参考に目的の「KB3035583」を非表示にするスクリプト(今回はJavaScript)を書いてみた。
/********************************************************************** WSUSを使用せずに不必要なWindowsUpdateを非表示 Copyright 2015-2016 330k 使用は自己責任でお願いします **********************************************************************/ try{ // インストールしないWindowsUpdateのKB番号 var disabledKBs = [ 2876229, 2952664, 2976978, 2977759, 3021917, 3022345, 3035583, 3068708, 3075249, 3080149, 3123862, 3150513, 2990214,// Win 7 3050265, 3065987, 3075851, 3083324, 3083710, 3102810, 3112343, 3135445, 3138612, 3161608, 3044374,// Win 8.</description>
    </item>
    
    <item>
      <title>パワハラ対策の秘密録音にはICレコーダがベスト</title>
      <link>https://www2.330k.info/essay/use_ic_recorder_for_power_harassment/</link>
      <pubDate>Wed, 08 Jul 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/use_ic_recorder_for_power_harassment/</guid>
      <description>ITエンジニアとしてキャリアチェンジしたため、転職した直後から、研修として別の企業の社内SEのチームに入ることになった。
ただ、そこには典型的なパワハラ指導者がいた。
連日パワハラを受けたり、他の人が受けるのを狭い部屋で聞かされ続け、 精神安定剤や抗不安薬、睡眠薬がないとやっていけないようになってしまった。
このままでは潰れかねないので、パワハラの証拠を得るべく勤務中に秘密録音をしたいと考えていくつか試してみた結果、 ICレコーダを購入するのがベストであるという結論に落ち着いた。
なお、ICレコーダを買う前に以下の選択肢を検討した。
Windows標準のサウンドレコーダー(ノートPC、会社ではLetsNoteの内蔵マイクを使用することを前提)  PCのマイクの性能は概して良くない(おそらくビデオ通話向けなので、PCの正面の音しか拾えない) 途中で終了すると一切録音ファイルが残らない(シャットダウンすると直前の録音は消える) 二重起動できないので、タスクマネージャで10分毎に起動しようとしても、起動と保存・終了にかかる時間があるため、実際には録音時間を9分55秒、サウンドレコーダーの起動間隔を10分などとするしかなく、5秒間は録音できない時間が生じる 会社によってはグループポリシーで禁止されているかもしれない(私の会社ではADをほとんど使いこなされていないため使用可能だった) 会議などPCから離れる場面が多い WMAで圧縮しても音声ファイルの容量が1日で1GB近くなる  会社携帯(iPhone)や個人携帯(Android)の録音アプリ  常時胸ポケットに入れて会話を録音していてもまずバレない とりあえず試す価値はある(マイクや電池の性能によっては十分実用になるかも) iPhoneの場合は、通話を録音できない(3者通話を利用したサービス・アプリはあるが、録音開始まで少々時間がかかる) マイクの性能は電話向けのものが多く、周囲の音を広く拾えるものではない 電池の消耗が速く1日もたない  WSHでWindowsの音声認識エンジンを使い、音がある時だけ録音するスクリプト  追加のソフトはインストール不要で、WSHを実行できるのであればハードルは低い 何も言われていない時は録音しないので、1日の音声ファイルの容量は150MB程度ですむ やはりPC内蔵のマイクでは周囲の音を拾えない マイクの感度を高くすると、キーボードを叩く音などでも結構反応されるが、低くすると普通の会話も反応してくれない PCから離れる場面が多い  PCの内蔵カメラで常時録画(LiveCapture3を使用)  自分のPCの正面に相手の顔を向ければ、パワハラしている時の表情も撮影できる 常時監視モードにすると、PC起動直後から終了直前まで映像と音声の記録が可能 映像込みだが1日1GB程度の容量と、意外と少ない ソフトのインストールを禁止している会社では不可能 やはりPC内蔵マイクの性能により、周囲の音が拾えない PCから離れる場面が多い  以上の検討の結果、PCや携帯ではマイクの性能が秘密録音向きではないため、 素直にICレコーダを購入してポケットに忍ばせるのが一番、となった。
私はPanasonicのXP007(製品情報サイト)にしたが、
 ポケットに入る大きさ 1日(少なくとも12時間程度)は連続録音可能な容量と電池 PCへのデータ転送が楽(毎日録音するので、毎回microSDカードを抜き差しするのは面倒)  という条件を満たせば、他の製品でも良いと思う。
ちなみに、ヨドバシアキバのICレコーダ売り場で製品を比較していたときに、自分がかなり悲壮な表情をしていたと思われ、店員さんも声をかけてこなかった。
なお、少しでも購入を迷っている方は、すぐにでも買ってください！！
精神的な安定への寄与は購入代金をはるかに上回ります。</description>
    </item>
    
    <item>
      <title>Recon Jetが届いたので初期登録をしようとしたら、Windows 8.1も必要だった</title>
      <link>https://www2.330k.info/essay/shipment-of-recon-jet-and-uplink-needs-windows/</link>
      <pubDate>Wed, 20 May 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/shipment-of-recon-jet-and-uplink-needs-windows/</guid>
      <description>2年近く前にパイロット版を予約していたRecon Jetが手元に到着した。 発送はFedEx。
   日付 できごと     2015年4月29日 Recon社(カナダ リッチモンド)を出荷   2015年4月30日 バンクーバー   2015年5月01日 メンフィス空港から空輸   2015年5月02日 成田空港に到着   2015年5月03日 税関通過   2015年5月07日 平日のため受け取れず、FedExに電話して土曜日の午後を希望   2015年5月09日 無事到着(国内の配送は西濃運輸)    箱を開けたらこのような感じ(携帯での撮影のため画質はご容赦を)
    説明書を読むと、
 Recon Jetの電源を入れる 付属のmicroUSBケーブルでPCと接続する ReconのサイトにアクセスしてRecon Uplinkをインストールし、初期登録をせよ  とある。
が、Recon UplinkはWindows版とMac版しかない。 私が今持っているのはUbuntuマシンなので、以下を試してみた。
 wineで動かないかな？ → インストールを完了できず 仮想マシン(Windows XP on VirtualBox)ならどうだ！ → Windows XPには対応していないらしく、こちらも動作せず 今なら無料でWindows 10 Insider Preview版が使えるんじゃね？ → VirtualBoxで仮想マシンを作成しUplinkのインストールとソフトの起動は成功。初期登録までは上手くいったが、その後同期がいつまで待っても始まらない。  このままでは$499が無駄になってしまうので、最終的にWindows 8.</description>
    </item>
    
    <item>
      <title>3Dグラフィックスが正常に表示されない問題</title>
      <link>https://www2.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</guid>
      <description>たまたま私の環境の問題かもしれないが、
 Intel Core-i7 3770 Ubuntu 14.04 LTS Mathematica 8.0.4 Home Edition  という環境で、Mathematicaのノートブック上でPlot3DなどのGraphics3Dオブジェクトが、 うまく表示できないことに悩まされていたが、その解決法が分かった。
メニューの「編集」→「環境設定」から、「詳細」タブを開き、「オプションインスペクタを開く」をクリック。  オプションインスペクタでは「グラフィックス設定」「RenderingOptions」内の&amp;rdquo;Graphics3DRenderingEngine&amp;rdquo;を デフォルトの&amp;rdquo;Automatic&amp;rdquo;から&amp;rdquo;Software&amp;rdquo;に変更する。  私の場合は以上で上手く行った。 Windowsではこのようなことはなかったのだが・・・。</description>
    </item>
    
    <item>
      <title>Mathematicaで論文用の図やグラフを作成するときのまとめ</title>
      <link>https://www2.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</guid>
      <description>Mathematicaで作る図やグラフは美しいんだ！ということを伝えたいので、 もう数年も前になるが、修士論文を書くときにMathematicaで作るグラフにこだわった点を思い出しながらまとめてみる。
論文を書くために使うソフトウェア 私はpLaTeXで論文を書いたが、研究室ではWordが推奨されていた。 図表の番号を管理する必要や図表の位置がずれて飛んでいってしまうといった事態も起きないし、目次や索引、参考文献リストの作成も自動でできる。 ただ、Wordだと添削をしやすいのは確か。
MathematicaでExportする画像の形式 Mathematicaでは多様な画像ファイル形式でExportできるが、論文用のグラフでは多分PNG、EPS、PDFから選択することになると思う。 各画像形式を比較すると、それぞれ以下の特徴がある。
 PNG  ラスタ形式のため、印刷に耐えられるようにするには予め解像度を計算して作成する必要がある 半透過色に対応 Word、pLaTeXどちらでも使える  EPS  ベクタ形式で保存できるため、印刷では自動的にプリンタの解像度で印刷してくれる 半透過色には非対応 pLaTeXで使用可 あまりにEPS画像が多いと、dvipdfm(x)が重くなるので注意  PDF  ベクタ形式で保存できる 半透過色に対応 pLaTeXで使用可 pLaTeXで使うには、予めebbやxbbで.bbファイルや.xbbファイルを作成して、pLaTeXに画像の大きさを知らせる必要がある   したがって、Wordでは基本的に画像をPNG形式で作ることになるが、pLaTeXではEPSやPDFといったベクタ形式の画像フォーマットが使えるのでおすすめ。
私は基本的にMathematicaからPDFでグラフを作成し、 すべての画像に対してpLaTeXについてくるebbを実行するPerlスクリプトを作って実行してからpLaTeXでコンパイルしていた。
もちろん写真はJPEG形式を使用したが、写真にいろいろ矢印や記号を書き加えるときはOpenOffice.orgのImpressでJPEG画像の上にいろいろ矢印などを書き込んでPDFにエクスポートしたものを使った。 当時はPowerPointではPDF出力できなかったためOpenOffice.orgを使ったが、今ではPowerPointでいいと思う。
図・グラフの論文におけるサイズを決め、ImageSizeオプションを指定 おそらくほとんどの論文はA4サイズ(210mm×297mm)で作成されると思う。
そこから左右の余白をそれぞれ30mmとすると、本文の幅は150mmとなる。 図やグラフの幅は本文より少し小さくしたいので、私は基本的に横幅140mmでグラフを作成した。
縦幅はMathematicaではデフォルトで黄金比(GoldenRatio)を使ってくれるので、そのままで良いと思う。 2段組のときは半分の70mmとか65mmとなる。
したがってMathematicaでは、PlotやShowなどのオプションImageSizeに
ImageSize -&amp;gt; 140 * 72 / 25.4  と指定する。これは140mmの横幅で、72dpi(dots per inch)、1 inch = 25.4mmという意味である。
論文用のグラフでは絶対にFrame -&amp;gt; Trueを指定する 論文用のグラフでは流儀として
Frame -&amp;gt; True  を指定して枠のついたグラフにする。
これはExcelなどでグラフを作るときも同様。
枠についた目盛りを細かく調整したい場合は、FrameTicksオプションとFrameTickesStyleオプションを指定する。 また、FrameLabelで各軸のラベルと単位を書き入れるのも忘れずに。</description>
    </item>
    
    <item>
      <title>Mathematicaでパーセプトロンとバックプロパゲーション</title>
      <link>https://www2.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</guid>
      <description>拙作のリバーシプログラムViglaは高校時代に作ったものだが、 評価関数は手の広さと辺の形を適当に数値化したものであるためにあまり強いプログラムにはできなかった。
当時から強いリバーシプログラムは辺や隅のパターンを評価していることは知ってはいたものの、理解出来ずじまいだった。
今回もう一度挑戦してみようと思い、まずはMathematicaでパーセプトロンとバックプロパゲーションによる学習を実装してみた。
簡単のため、出力関数としてはシグモイド関数のみに限定した(一般の関数にできるようにするには、各層のネット値を別に保存する必要があり、煩雑だったため)。 しかしながら、任意の隠し層の数やニューロン数に対応できるように実装した。
というわけで、まずはシグモイド関数と順方向演算を定義。
f[x_] := 1/(1 + Exp[-x]); perceptron[w : {__}][x_] := FoldList[(f /@ (Append[#1, 1].#2)) &amp;amp;, x, w];  wが各層の重み行列のリストで、MathematicaならFoldListを使って1行で順方向演算が定義できる。 Mathematicaでは添字が1から始まるので、通常wi0で表されることが多いバイアス成分は一番最後に置いた。
次に、重み行列をランダムに初期化したパーセプトロンを返す関数として、以下のcreatePerceptronを定義。
createPerceptron[dimensions_, range_] := perceptron[MapThread[ RandomReal[range, {#1, #2}] &amp;amp;, {Most[dimensions] + 1, Rest[dimensions]}]]  dimensionsは各層のニューロン数で、乱数の範囲をrangeで指定する。
例えば、入力層のニューロン数が2、隠し層のニューロン数が2、出力層のニューロン数が1の3層パーセプトロンで、 重みが-0.2から0.2までの乱数となるパーセプトロンは、以下のようにして得られる。
p = createPerceptron[{2, 2, 1}, {-0.2, 0.2}]  この初期状態で、入力層に{0, 0}を与えた時の出力は、
p[{0, 0}] {{0, 0}, {0.512507, 0.510116}, {0.497566}}  となる。2番目の要素が隠し層の値で、最後の{0.497566}が出力層の値である。
次に、バックプロパゲーションによる学習を実装する。
backPropagation[pct : perceptron[w : {__}], x_List, teach_List, rate_: 1] := Module[{out, \[Delta], \[Delta]n, \[CapitalDelta]w}, out = pct[x]; \[Delta]n = With[{y = Last[out]}, (teach - y) y (1 - y)]; \[Delta] = Reverse@FoldList[(Most[#2[[2]]].</description>
    </item>
    
    <item>
      <title>GeoDistanceとその他の測地線距離算出式の精度</title>
      <link>https://www2.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</guid>
      <description>Mathematicaには2点の緯度と経度を与えて、その間の測地線距離を返す関数としてGeoDistanceがある。 しかしながら、ここで書かれているように、その精度には疑問が呈されているようだ。
他の有名な測地線距離の計算方法として、
 ヒュベニの式(カシミール3Dが採用しているが、英語圏では情報が見つからない) 国土地理院の測量計算サイトの計算式のついてのドキュメントを実装したもの 完全な球体とみなして計算(Google EarthやGoogle Maps API v3のcomputeDistanceBetweenが採用、haversine formula)  が見つかったので、GeoDistanceのMethodオプション3種類(&amp;ldquo;Vincenty75&amp;rdquo;, &amp;ldquo;Robbin61&amp;rdquo;, &amp;ldquo;ExtendedNewtonRaphson&amp;rdquo;)と上記の3種類の計算方法の合計6種類について精度を評価してみた。
正確な距離としては、GeographicLib (Wikipediaによると誤差15nmらしい)をJLink経由で使って計算したもの採用し、準拠楕円体はWGS84とした。
ただし、完全な球体とした場合の半径はGoogle EarthやGoogle Mapsにあわせて6378137 mとした。
ランダムな2点間の距離の精度 地球表面上で一様分布となるよう、ランダムに2点を選び、その間の距離の精度を評価した。
 上図は横軸がGeographicLibで計算した正確な距離、縦軸が各計算方法で計算した距離である。
y = xの直線上にあれば正確ということだが、GeoDistanceの&amp;rdquo;Robbin61&amp;rdquo;では1万kmを超えると実際よりも極端に短く計算してしまうようだ。
またヒュベニの式は実際よりも長く計算することが多く、そのような場合について調べてみると高緯度になるほど誤差が大きくなることが分かった。
同じ計算結果を誤差についてプロットしたものが下図である。また表は各計算方法の最大誤差である。
    計算方法 誤差の絶対値     GeoDistance(&amp;ldquo;Vincenty75&amp;rdquo;) 7.119 * 10^-12   GeoDistance(&amp;ldquo;Robbin61&amp;rdquo;) 9.536 * 10^-1   GeoDistance(&amp;ldquo;ExtendedNewtonRaphson&amp;rdquo;) 1.247 * 10^-6   ヒュベニの式 2.022 * 10^1   測量計算サイト計算式 6.682 * 10^-3   完全球体モデル 6.</description>
    </item>
    
    <item>
      <title>Douglas-Peucker向けの優先度付きキュー実装の検討</title>
      <link>https://www2.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</guid>
      <description>折れ線を間引くで書いたように、 Douglas-Peuckerアルゴリズムを改良して指定した点数まで点を削減して折れ線を簡略化する場合、 優先度付きキューを使うことになる。
このアルゴリズムでは
 始点と終点を結ぶ線分で最も距離が大きな点P1を選ぶ 始点と点P1を結ぶ線分で距離最大となる点P2をキューに登録(優先度は点P2と線分の距離) 点P1と終点を結ぶ線分で距離最大となる点P3をキューに登録(優先度は点P3と線分の距離) キューから距離が最大(=優先度最大)の点を選んで、2に戻る  という手順となるため、「キューに2つ登録して、1つ取り出す」ということを繰り返すことになる。
そこで今回はランダムな優先度のデータを
 連続して登録し、連続して取り出す(要はソートしているだけ) 「キューに2つ登録して、1つ取り出す」を繰り返すDouglas-Peuckerを想定した試験  という操作に対してどの優先度付きキューの実装が良い性能をしめすのか、ベンチマークを取ってみた。
優先度付きキューの実装にはいくつか方法があるが、今回は以下の6種類を試してみた。
 Array.sort(): キューへの追加はArray.push()、キューから取り出すときに必要であればArray.sort()してArray.pop()する。非常に単純で楽チン。結果の検証用。 Selection: キューへの追加はArray.push()、キューから取り出すときに最大要素を選択。enqueue: O(1), dequeue: O(n2)。 Insertion: キューへの追加時に挿入ソートを行う。キューから取り出すときはArray.pop()するだけ。enqueue: O(n2), dequeue: O(1)。 Binary Insertion: キューへの追加時に二分挿入ソートを行う。あとは3と同じ。enqueue: O(n2), dequeue: O(1)。 Binary Heap: 二分ヒープ(wikipedia)での実装。ポインタなしで実装できるので省メモリ。java.util.PriorityQueueはこれらしい。enqueue: O(log(n)), dequeue: O(log(n))。 Pairing Heap: ペアリングヒープ(wikipedia: en)での実装。gcc(libstdc++)のpriority_queueはこれらしい。enqueue: O(log(n)), dequeue: O(log(n))。実装にはこれを参考にした。  いずれもJavaScriptで実装した。 実装したものはpriority_queue.html。
ベンチマーク結果 以下、Firefox 29とChromium 34での結果。単位はmsで、小さいほうが高速。 載せていないがVirtualBox上のWindows XPで測定してもほぼ同じ結果だった。
Firefox 29 on Ubuntu 12.04 LTS 64bit    n Sequential      Douglas-PeuckerArray.</description>
    </item>
    
    <item>
      <title>ファイル名順にソートしてzipファイルを作成する</title>
      <link>https://www2.330k.info/essay/create-zip-with-alphabetical-order/</link>
      <pubDate>Mon, 30 Dec 2013 04:36:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/create-zip-with-alphabetical-order/</guid>
      <description>自炊した書籍をzipで作成する際、普通に圧縮すると変な順番で格納されてしまう。 実用上ほとんど問題はないのだが、なんとなくファイル名順に格納したかったので、そのやり方をメモ。
ls -1 ディレクトリ名 | zip -@rjDo0 圧縮ファイル名.zip  やっていることは
 lsに-1オプションをつけてファイル1行ずつでファイル名を出力(デフォルトでは文字コード順) zipに-@オプションをつけ、標準入力にファイル名を渡して圧縮(残りのオプションはお好みで)  findを使って行うときは、もう少し工夫が必要で、以下のように findの-print0オプションとsortの-zオプション、xargsの-0オプションでNull文字区切りでファイル名を出力→ソート→圧縮とする。
find ./ -type f -print0 | sort -z | xargs -0 zip -@rjDo0 圧縮ファイル名.zip  なんとなくAndroidのPerfectViewerで見るときに表示が早くなったような気がする。たぶんプラシーボだけれど。</description>
    </item>
    
    <item>
      <title>Wolfram CDF Playerでローカルファイルの読み込みと書き込みを行う</title>
      <link>https://www2.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</guid>
      <description>[Wolfram CDF Player を汎用する]()にあるように、 CDF PlayerでもJ/Linkを使えばローカルファイルの読み込み、書き込みができる(※CDFファイルの作成にはMathematicaが必要)。
上記リンク先ではテキストファイルを読み込む例が載っているが、バイナリファイルとして読み込んでImportStringを使えば、 Mathematicaが対応している形式すべてのファイルを読み込むことができる。
J/Linkでバイナリファイルを読み込むときのポイントとしては、
 &amp;ldquo;[B&amp;rdquo;というクラス名でbyte型の配列を作ってBufferedInputStream.read(byte[])で一気に読み込むことで高速化 読み込んだbyte[]がMathematicaに入った時に符号付き整数で扱われるため、FromCharacterCodeに突っ込む前に0〜255になるように修正  が挙げられる。
一方、CDF PlayerではExportのみならずExportStringが使えない(ImportStringは使えるのに)ので、書き込むほうは不自由が残る。 ここではテキストと画像(BMP、PNG、JPEG)に限って保存する関数を作ってみた。
ImportWithJLink[filepath_?(FileExistsQ[FindFile[#]] &amp;amp;), format_] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ Module[{br, byte, result}, br = JLink`JavaNew[&amp;quot;java.io.BufferedInputStream&amp;quot;, JLink`JavaNew[&amp;quot;java.io.FileInputStream&amp;quot;, FindFile@filepath]]; byte = JLink`JavaNew[&amp;quot;[B&amp;quot;, {FileByteCount[FindFile@filepath]}]; br@read[byte]; result = ImportString[ FromCharacterCode[ JLink`JavaObjectToExpression[byte] /. x_?Negative :&amp;gt; x + 256], format]; br@close[]; result]]); ExportWithJLink[filepath_, string_String, format : &amp;quot;Text&amp;quot;] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ Module[{bw}, bw = JLink`JavaNew[&amp;quot;java.io.BufferedWriter&amp;quot;, JLink`JavaNew[&amp;quot;java.io.FileWriter&amp;quot;, filepath] ]; bw@write[string]; bw@close[]; filepath ] ]); ExportWithJLink[filepath_, image_, format : &amp;quot;PNG&amp;quot; | &amp;quot;BMP&amp;quot; | &amp;quot;JPG&amp;quot;] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ JLink`LoadJavaClass[&amp;quot;javax.</description>
    </item>
    
    <item>
      <title>ffmpeg&#43;Mathematicaで動画ファイルを作成する</title>
      <link>https://www2.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</link>
      <pubDate>Fri, 27 Sep 2013 00:04:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</guid>
      <description>MathematicaのExportでAVIなどの動画ファイルを作成することは簡単に可能だが、 いかんせんすべてのフレームの画像を作成してからファイルに書きだすので、フレーム数に比例してメモリの使用量が多くなってしまう。 そのため長いムービーの作成は困難であった。
そこで、ffmpeg(avconv)と併用することでメモリ使用量を抑えつつ、長編の動画ファイルを制作する。 具体的には、
 ffmpegで標準入力から読み込ませるOutputStreamオブジェクトを作成する BinaryWriteでそのストリームに各フレームの画像を書き込む 終わったらCloseでストリームを閉じる  とする。ここで、各フレーム画像の形式をPPMにしないとうまく動作しなかった(BMP、PNGなどではなぜか動作せず)。
例えば、以下のようにするとtest001.aviができあがる。
s = OpenWrite[ &amp;quot;!ffmpeg -y -vcodec ppm -f image2pipe -i - -vcodec rawvideo test001.avi&amp;quot;, BinaryFormat -&amp;gt; True]; Do[ BinaryWrite[s, ExportString[ Plot[Sin[x + i], {x, 0, 2 Pi} , ImageSize -&amp;gt; {640, 480} , PlotRange -&amp;gt; {{0, 2 Pi}, {-1, 1}} , Frame -&amp;gt; True] , &amp;quot;PPM&amp;quot;]] , {i, 0, 2 Pi, Pi/50} ]; Close[s]  Exportと同じような使い勝手の関数ExportMovieを作るとこんな感じになる。
Options[ExportMovie] = { &amp;quot;FrameRate&amp;quot; -&amp;gt; 25, &amp;quot;VideoCodecOption&amp;quot; -&amp;gt; &amp;quot;-vcodec rawvideo&amp;quot;, &amp;quot;ExportOptions&amp;quot; -&amp;gt; {} }; ExportMovie[outputfilepath_String, expr_, {i_Symbol, imin_: 1, imax_, di_: 1}, OptionsPattern[]] := Module[{stream}, stream = OpenWrite[ ToString[ StringForm[ &amp;quot;!</description>
    </item>
    
    <item>
      <title>2013年09月17日〜24日 横浜〜東北日本海側〜竜飛崎</title>
      <link>https://www2.330k.info/bicycle/touring/20130917-24-yokohama-tohoku-japan-sea-tappizaki/</link>
      <pubDate>Tue, 17 Sep 2013 21:50:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20130917-24-yokohama-tohoku-japan-sea-tappizaki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20130917-24-yokohama-tohoku-japan-sea-tappizaki\/20130917-24.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2013年9月17日 横浜 渋川 158.37 6:19:59 47.6 25.0 荒川CR、利根川CR    2013年9月18日 渋川 長岡 154.57 6:35:34 56.8 23.4 R17 三国峠   2013年9月19日 長岡 村上 118.</description>
    </item>
    
    <item>
      <title>2013年08月20日〜21日 高松〜鳴門〜室戸岬</title>
      <link>https://www2.330k.info/bicycle/touring/20130820-21-naruto-muroto/</link>
      <pubDate>Tue, 20 Aug 2013 21:50:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20130820-21-naruto-muroto/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20130820-21-naruto-muroto\/20130820-21.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2013年8月20日 高松 日和佐 143.18 6:12:47 57.6 23.0 R11, R55    2013年8月21日 日和佐 安芸 122.85 5:16:27 52.0 23.3 R55 室戸岬    高松スタートで四国を一周しようとしたが、2日めから風邪を引いたため高知県安芸市でリタイア。</description>
    </item>
    
    <item>
      <title>2013年08月02日〜03日 房総半島半周</title>
      <link>https://www2.330k.info/bicycle/touring/20130802-03-bousou-peninsula/</link>
      <pubDate>Fri, 02 Aug 2013 21:50:06 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20130802-03-bousou-peninsula/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20130802-03-bousou-peninsula\/20130802-03.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2013年8月2日 横浜 千倉 102.27 4:00:14 43.5 25.5 R16, R127, R410 野島崎   2013年8月3日 千倉 銚子 154.98 6:03:25 55.7 25.6 R128, r30 犬吠埼    1日目 横浜の自宅からスタートして、国道16号を使って久里浜のフェリー乗り場へ。</description>
    </item>
    
    <item>
      <title>2013年07月09日〜16日 横浜〜東北太平洋側〜大間崎</title>
      <link>https://www2.330k.info/bicycle/touring/20130709-16-yokohama-tohoku-pacific-oomazaki/</link>
      <pubDate>Tue, 09 Jul 2013 21:49:56 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20130709-16-yokohama-tohoku-pacific-oomazaki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20130709-16-yokohama-tohoku-pacific-oomazaki\/20130709-16.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2013年7月9日 横浜 神栖 147.65 6:23:43 44.5 23.1 R1, R6    2013年7月10日 神栖 いわき 153.27 5:54:58 56.6 25.9 R51, R6    2013年7月11日 いわき 角田 146.</description>
    </item>
    
    <item>
      <title>2013年03月06日〜07日 名古屋〜横浜</title>
      <link>https://www2.330k.info/bicycle/touring/20130306-07-nagoya-yokohama/</link>
      <pubDate>Wed, 06 Mar 2013 21:49:33 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20130306-07-nagoya-yokohama/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20130306-07-nagoya-yokohama\/20130316-07.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2013年3月6日 東海市 焼津 158.97 6:06:35 59.9 26.0 R1    2013年3月7日 焼津 横浜 178.61 8:06:30 64.2 22.0 R1                  </description>
    </item>
    
    <item>
      <title>2012年10月21日 富士山スカイライン</title>
      <link>https://www2.330k.info/bicycle/touring/20121021-mt-fuji-skyline/</link>
      <pubDate>Sun, 21 Oct 2012 21:49:12 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20121021-mt-fuji-skyline/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20121021-mt-fuji-skyline\/20121021.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2012年10月21日 富士市 富士市    #N/A R139, r180, r152 富士山スカイライン    海抜0mから富士山スカイラインの新5合目(2400m)まで登った。
              </description>
    </item>
    
    <item>
      <title>MathematicaからSQLiteでBLOBとマルチバイト文字列を扱う</title>
      <link>https://www2.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</guid>
      <description>ドキュメントにはないものの、MathematicaではSQLiteを扱うことができる。 しかしながら、BLOB型や文字列で日本語などを扱うには少し工夫が必要なので、メモ。
BLOB型 select 直接BLOB型をselectすると$Failedが返ってくるので、hex関数で16進文字列として返す。
db = Database`OpenDatabase[sqlitefilepath]; rs = Database`QueryDatabase[db, &amp;quot;select hex(column_name) from table_name&amp;quot;];  これを16進文字列→数値→バイト列→文字列と変換して、最後にImportStringで読み込むと、Mathematicaで読み込める。
ImportSQLiteBLOB[hex_, format_] := ImportString[ FromCharacterCode[IntegerDigits[FromDigits[hex, 16], 256]], format]; ImportSQLiteBLOB[rs[[1, 1]], &amp;quot;PNG&amp;quot;]  insert insertする場合には逆に、データをExportStringで文字列に変換→バイト列→16進文字列と変換し&amp;rdquo;x&amp;rsquo;&amp;ldquo;と&amp;rdquo;&amp;lsquo;&amp;ldquo;で囲う。
ExportSQLiteBLOB[expr_, format_] := StringJoin[&amp;quot;x&#39;&amp;quot;, IntegerString[ToCharacterCode[ExportString[expr, format]], 16, 2], &amp;quot;&#39;&amp;quot;]; Database`QueryDatabase[db, &amp;quot;insert into table_name values (&amp;quot; &amp;lt;&amp;gt; ExportSQLiteBLOB[Plot[Sin[x], {x, 0, Pi}], &amp;quot;PNG&amp;quot;] &amp;lt;&amp;gt; &amp;quot;)&amp;quot;];  マルチバイト文字列 select 日本語などマルチバイト文字列が入っていても適切に変換してくれないので、自前で変換する。
ImportSQLiteString[str_] := FromCharacterCode[ToCharacterCode[str], &amp;quot;UTF8&amp;quot;]; rs = Database`QueryDatabase[db, &amp;quot;select column_name from table_name&amp;quot;]; ImportSQLiteString[rs[[1, 1]]]  insert そのまま突っ込むとエラーが出るので、変換してから突っ込む。ついでにシングルクォーテーションをエスケープしておく。</description>
    </item>
    
    <item>
      <title>Mathematica on Ubuntu 12.04 LTSで日本語関連のトラブル</title>
      <link>https://www2.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</guid>
      <description>Mathematica 8 Home Edition 日本語版をUbuntu 12.04 LTS 64bit版にインストールしたところ、
 ディレクトリ、ファイル名に日本語が含まれるノートブックファイル(.nb)を開けない ディレクトリ、ファイル名に日本語が含まれるとImport/Exportできない、FileNamesで列挙できない ノートブック中に日本語を入力できない $SystemCharacterEncoding、$CharacterEncodingが&amp;rdquo;EUC-JP&amp;rdquo;になっている  などの言語関連の不具合があった。
これから作るノートブックは英語だけで書けば済むが、今までに作ったノートブックファイルが開けないのがつらい。 一応Wolframのサポートにはメールを出したが、期待できそうになかった。
/usr/local/Wolram/以下のファイルで関係有りそうなものを試行錯誤していじった結果、以下の方法で対処できたのでメモ。
 /usr/local/Wolfram/Mathematica/8.0/Executables以下の起動用スクリプトファイルMathematica、mathematicaの「LANG=ja_JP.eucJP」を「LANG=en_US.UTF-8」などに適当に変更orコメントアウト /usr/local/Wolfram/Mathematica/8.0/SystemFiles/CharacterEncodings/UTF-8.mの内容をISO8859-1.mにコピー  $SystemCharacterEncoding、$CharacterEncodingは&amp;rdquo;ISO8859-1&amp;rdquo;になってしまうのが気持ち悪いが、とりあえず実用上問題がなくなった。
あとは本当にISO8859-1の文字コードで書かれたファイルを読み込むことができなくなってしまうが、扱う機会はないので良しとする。
Oct. 7 2016 追記
4年越しにWolfram Researchから連絡が来た。
 In May 2012 you reported an issue with Mathematica wherein Mathematica was unable to open files from folders with non-English cahracters in the name. We believe that the issue has been resolved in the current release of Mathematica.
Thank you for your report and we look forward to a continued, productive relationship with you.</description>
    </item>
    
    <item>
      <title>2012年09月16日〜17日 金沢〜親不知〜直江津</title>
      <link>https://www2.330k.info/bicycle/touring/20120916-17-kanazawa-naoetsu/</link>
      <pubDate>Sun, 16 Sep 2012 21:49:02 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20120916-17-kanazawa-naoetsu/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20120916-17-kanazawa-naoetsu\/20120916-17.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2012年9月16日 金沢 入善 106.96 4:35:10 56.1 23.3 R8 石動   2012年9月17日 入善 直江津 83.59 3:33:47 48.7 23.5 R8 親不知    1日目 前に名古屋から金沢駅までは自走したので、今回は輪行して金沢駅スタート。 建設中の北陸新幹線の高架を見ながら走り、すぐに富山県に入る。</description>
    </item>
    
    <item>
      <title>LS-DYNA用の浮動小数点数をフォーマット</title>
      <link>https://www2.330k.info/essay/format-floating-number-for-s-dyna-with-java/</link>
      <pubDate>Sat, 25 Aug 2012 08:56:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/format-floating-number-for-s-dyna-with-java/</guid>
      <description>LS-DYNAのキーワードファイルを書きだすプログラムを書いたところ、浮動小数点数を固定文字数(10文字)にフォーマットする所でつまづいた。 具体的には
 String.formatやDecimalFormatの動作が遅い(String.formatよりはDecimalFormatのほうが速いが) 文字数を10文字に制限することが難しい(絶対値の大小比較を行なって桁数ごとに条件分岐をしても、四捨五入によって意図しない文字数(11文字)になる)  という問題にあたった。そこでdoubleから長さ10の文字列を力技で書きだすロジックを自作した。特徴は以下の通り。
 正の時は先頭にスペース、負の時は先頭に&amp;rdquo;-&amp;ldquo;を入れる 10文字の制限の中で最も有効桁数が大きくなるようにフォーマット 四捨五入はしない！ DecimalFormatの15倍高速(もう少し工夫はできるが)  private static String formatFloat10(double d){ char[] c = new char[10]; double a; if(d == 0.0){ return &amp;quot; 0.0000000&amp;quot;; } if(d &amp;lt; 0){ c[0] = &#39;-&#39;; a = -d; }else{ c[0] = &#39; &#39;; a = d; } int m = (int)Math.floor(Math.log10(a)); if(m &amp;lt;= -100){ for(int i = 1; i &amp;lt; 1 - m; i++) a *= 10; c[1] = (char)(&#39;0&#39; + Math.</description>
    </item>
    
    <item>
      <title>2012年08月14日〜17日 函館〜稚内</title>
      <link>https://www2.330k.info/bicycle/touring/20120814-17-hakodate-wakkanai/</link>
      <pubDate>Tue, 14 Aug 2012 21:48:37 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20120814-17-hakodate-wakkanai/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20120814-17-hakodate-wakkanai\/20120814-17.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2012年8月14日 函館 室蘭 193.01 8:09:05 57.1 23.7 R5, R37    2012年8月15日 室蘭 美唄 169.58 6:36:00 45.3 25.7 R36, R12    2012年8月16日 美唄 名寄 151.</description>
    </item>
    
    <item>
      <title>2012年04月30日〜05月06日 名古屋〜鹿児島</title>
      <link>https://www2.330k.info/bicycle/touring/20120430-0506-nagoya-kagoshima/</link>
      <pubDate>Mon, 30 Apr 2012 21:48:15 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20120430-0506-nagoya-kagoshima/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20120430-0506-nagoya-kagoshima\/20120428-0506.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2012年4月28日 東海市 枚方 179.78 7:11:21 57.8 25.0 R1 鈴鹿峠   2012年4月29日 枚方 播州赤穂 152.35 6:11:30 52.6 24.6 R1, R2, R250    2012年4月30日 播州赤穂 妹尾 66.</description>
    </item>
    
    <item>
      <title>2012年03月20日 琵琶湖一周</title>
      <link>https://www2.330k.info/bicycle/touring/20120320-biwako-lake/</link>
      <pubDate>Tue, 20 Mar 2012 21:48:01 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20120320-biwako-lake/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20120320-biwako-lake\/20120320.kml&#34; }); ctaLayer.setMap(map); }   2回めのビワイチ。今回は琵琶湖大橋を渡ってショートカットした。
                 </description>
    </item>
    
    <item>
      <title>2011年09月23日〜25日 奈良・京都</title>
      <link>https://www2.330k.info/bicycle/touring/20110923-25-nara-kyoto/</link>
      <pubDate>Fri, 23 Sep 2011 21:47:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110923-25-nara-kyoto/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110923-25-nara-kyoto\/20110923-25.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2011年9月23日 東海市 伊賀上野 82.96 3:30:38 59.6 23.6 R1, R25    2011年9月24日 伊賀上野 奈良 75.50   #N/A R25 法隆寺   2011年9月25日 奈良 京都 44.</description>
    </item>
    
    <item>
      <title>2011年07月18日 乗鞍</title>
      <link>https://www2.330k.info/bicycle/touring/20110718-norikura/</link>
      <pubDate>Mon, 18 Jul 2011 21:47:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110718-norikura/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110718-norikura\/20110718.kml&#34; }); ctaLayer.setMap(map); }                              </description>
    </item>
    
    <item>
      <title>2011年05月21日 犬山城</title>
      <link>https://www2.330k.info/bicycle/touring/20110521-inuyama-castle/</link>
      <pubDate>Sat, 21 May 2011 21:47:15 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110521-inuyama-castle/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110521-inuyama-castle\/20110521.kml&#34; }); ctaLayer.setMap(map); }          </description>
    </item>
    
    <item>
      <title>2011年05月04日〜08日 紀伊半島一周</title>
      <link>https://www2.330k.info/bicycle/touring/20110504-08-kii-peninsula/</link>
      <pubDate>Wed, 04 May 2011 21:46:59 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110504-08-kii-peninsula/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110504-08-kii-peninsula\/20110504-08.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2011年5月4日 東海 志摩 165.81 6:14:26 55.0 26.6 R23, R42    2011年5月5日 志摩 新宮 190.00 8:30:00 55.7 22.4 R42    2011年5月6日 新宮 御坊 163.</description>
    </item>
    
    <item>
      <title>2011年04月30日 御前崎</title>
      <link>https://www2.330k.info/bicycle/touring/20110430-omaezaki/</link>
      <pubDate>Sat, 30 Apr 2011 21:46:31 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110430-omaezaki/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110430-omaezaki\/20110501.kml&#34; }); ctaLayer.setMap(map); }      日付 出発地 到着地 走行距離(km) 走行時間 最高速度(km/h) 平均速度(km/h) 主な経路 景勝地     2011年4月30日 弁天島 焼津 117.83 4:32:08 62.0 26.0 R150 御前崎                    </description>
    </item>
    
    <item>
      <title>2011年01月09日 渥美半島表浜街道</title>
      <link>https://www2.330k.info/bicycle/touring/20110109-atsumi-peninsula/</link>
      <pubDate>Sun, 09 Jan 2011 21:46:16 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20110109-atsumi-peninsula/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20110109-atsumi-peninsula\/20110109.kml&#34; }); ctaLayer.setMap(map); }              </description>
    </item>
    
    <item>
      <title>2010年11月21日 三河湾一周</title>
      <link>https://www2.330k.info/bicycle/touring/20101121-mikawa-wan/</link>
      <pubDate>Sun, 21 Nov 2010 21:45:58 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20101121-mikawa-wan/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20101121-mikawa-wan\/20101121.kml&#34; }); ctaLayer.setMap(map); }          </description>
    </item>
    
    <item>
      <title>2010年11月20日 香嵐渓</title>
      <link>https://www2.330k.info/bicycle/touring/20101120-kourankei/</link>
      <pubDate>Sat, 20 Nov 2010 21:45:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20101120-kourankei/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20101120-kourankei\/20101120.kml&#34; }); ctaLayer.setMap(map); }             </description>
    </item>
    
    <item>
      <title>2010年09月26日 琵琶湖一周</title>
      <link>https://www2.330k.info/bicycle/touring/20100926-biwako-lake/</link>
      <pubDate>Sun, 26 Sep 2010 21:45:31 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100926-biwako-lake/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100926-biwako-lake\/20100926.kml&#34; }); ctaLayer.setMap(map); }                 </description>
    </item>
    
    <item>
      <title>VBAでビットマップ(bmp)を読み書き</title>
      <link>https://www2.330k.info/essay/how-to-read-and-write-24bit-bitmap-files-with-vba/</link>
      <pubDate>Wed, 22 Sep 2010 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-read-and-write-24bit-bitmap-files-with-vba/</guid>
      <description>会社のPCでは自由にソフトウェアをインストールすることができないので、業務で使いそうなものはExcel VBAで自作していくことにした。 まずは手始めに24ビットビットマップの読み書きを行う標準モジュールを作成した。 VBAの機能のみで実装しており、外部のライブラリには依存しない。
使い方  以下のソースをOfficeのマクロで標準モジュールとしてプロジェクトへ追加する。 ReadBitmap(&amp;ldquo;C:***.bmp&amp;rdquo;)で、RGBTRIPLE型の2次元配列が返る。 読み込みは一応1, 4, 8, 24, 32ビットのビットマップファイルに対応。 WriteBitmap24(&amp;ldquo;C:***.bmp&amp;rdquo;)で24ビットのビットマップファイルを書き込む。 おまけ機能として、ReadGIFJPEGでGIFとJPEGファイルも読み込みにも対応。  &#39; Bitmap module by 330k &#39; Copyright (C) 2010 330k, All rights reserved. Option Explicit Public Type RGBTRIPLE rgbBlue As Byte rgbGreen As Byte rgbRed As Byte End Type Private Type RGBQUAD rgbBlue As Byte rgbGreen As Byte rgbRed As Byte rgbReserved As Byte End Type Private Type BITMAPFILEHEADER bfType As String * 2 bfSize As Long bfReserved1 As Integer bfReserved2 As Integer bjOffBits As Long End Type Private Type BitmapInfoHeader biSize As Long biWidth As Long biHeight As Long biPlanes As Integer biBitCount As Integer biCompression As Long biSizeImaze As Long biXPixPerMeter As Long biYPixPerMeter As Long biClrUsed As Long biClrImporant As Long End Type &#39; Read a bitmap file (1, 4, 8, 24 and 32 bit) and return image as 2-dimension array of RGBTriple Public Function ReadBitmap(strFileName As String) As RGBTRIPLE() Dim i As Long Dim j As Long Dim n As Long Dim intFileNumber As Integer Dim bjHeader As BITMAPFILEHEADER Dim biHeader As BitmapInfoHeader Dim lngColors As Long Dim rgbData() As RGBTRIPLE Dim rgbTemp As RGBTRIPLE Dim rgbTable3() As RGBTRIPLE Dim rgbTable4() As RGBQUAD Dim bytTemp As Byte intFileNumber = FreeFile() Open strFileName For Binary As intFileNumber Get intFileNumber, , bjHeader Get intFileNumber, , biHeader ReDim rgbData(0 To biHeader.</description>
    </item>
    
    <item>
      <title>2010年09月19日～20日 名古屋～金沢</title>
      <link>https://www2.330k.info/bicycle/touring/20100919-20-nagoya-kanazawa/</link>
      <pubDate>Sun, 19 Sep 2010 21:45:14 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100919-20-nagoya-kanazawa/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100919-20-nagoya-kanazawa\/20100919.kml&#34; }); ctaLayer.setMap(map); }   日本海側に行くなら冬になる前にしなくては！ということで思いつきで金沢まで行ってみた。 敦賀で1泊して金沢まで行き、帰りは輪行した。
1日目(名古屋～敦賀) まずは養老の滝に行く時にも使ったルートで、名古屋から国道1号→国道155号→愛知県道125号と通って木曽三川を越え、国道258号を北上して関ヶ原を目指す。 このあたりは探せばもう少し平坦なルートが有るかもしれない。
 関ヶ原古戦場に寄ってみたら鉄砲隊の実演イベントをやっていたようだが、天候があまり良くなかったので先を急いだ。
 関ヶ原からは延々と国道365号を進む。 途中何箇所か道幅が狭いところがあったものの、高低差があまりないためスピードに乗ってどんどん進めた。
しかし、木之本に到着したあたりで雨がパラつきはじめ、ルートを変更。 当初は国道365号をそのまま進んで旧北陸本線のトンネル(片側通行1.4km)を突破する予定だったが、雨がひどくなった場合に即座に輪行できるように国道8号を進んで琵琶湖を少し回って塩津から北上することにした。
賤ヶ岳トンネルは琵琶湖一周ルートでも回避されることが多い、ということは知っていたので、旧道を登る。
 塩津からはへばりながらもなんとか福井県に到達。
 18時過ぎに敦賀に到着して、気比の松原などを観光した。
  走行時間: 5時間42分11秒 走行距離: 138.88 km 平均速度: 24.3 km/h 最高速度: 61.0 km/h  2日目(敦賀～金沢) 朝8時に出発しようとしていたら、後輪がパンクしていた。 原因は少し尖った石を踏みつけていたことのようで、パッチを当てて携帯ポンプで空気を入れることで1時間ほどロス。
まずは気比神宮を外側だけ観光。
 金ヶ崎トンネルの手前で、昔ながらの洗濯場をはじめて見た。
 なお、金ヶ崎トンネルの歩道にどうやって行くのかは非常に分かりにくかった。</description>
    </item>
    
    <item>
      <title>2010年09月04日～05日 名古屋～高森</title>
      <link>https://www2.330k.info/bicycle/touring/20100904-05-nagoya-takamori/</link>
      <pubDate>Sat, 04 Sep 2010 21:44:58 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100904-05-nagoya-takamori/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100904-05-nagoya-takamori\/20100904-05.kml&#34; }); ctaLayer.setMap(map); }   母親の実家が現住所から140kmちょっとの丁度いい場所にあるので、峠をいくつか越えてきた。 2日間の合計獲得標高は10000mを超えたが、膝が痛むこともなく走破できたのはやはりドロップハンドルとSPDの効果だろう。
1日目(往路) 午前4時過ぎに出発。 まずは国道155号を豊田市まで進み、次に国道153号(飯田街道)に入る。 国道153号に入ったところからどんどん山を上り、いくつかトンネルをくぐる(足助トンネル、新観音トンネル、大野瀬トンネル)。
    地図に峠の名前は載ってないものの、2箇所ほど上り下りがあった。
大野瀬トンネルを抜けると長野県下伊那郡根羽村に到達。
 工事中で道路がせまくなっていたため走りにくかったが、それ以上に延々と続く登り坂でペースがどんどん落ちた。 ちょうど昼時になったので根羽村と平谷村の中間にある(地形的には峠だと思うが名前は不明)ネバーランドで昼食休憩。
 エネルギを補給したところで、往路の最高到達点となる治部坂峠(1187m)に挑む・・・が、昼食を消化しきれていなかったのか、猛烈な日差しのためかペースは一向に上がらず、500mおきに休憩せざるを得ない事態に。 なんとか自転車を押して歩くという最終手段を取ることはなく、治部坂峠を制覇。
 治部坂峠を下る間でなんとか回復し、最後の峠である寒原峠(1073m)も勢いで乗り越える。
 ちなみに写真には下り勾配7%が7.5km先までとなっているが、実際には10km程度あり、その間はずっと60km/h超で走行した。
その後は国道153号→国道256号→伊那南部広域農道(南信州フルーツライン)を通り、14時30分に無事到着。
 走行時間 : 6時間40分58秒 走行距離 : 143.74 km 平均速度 : 21.5 km/h 最高速度 : 65.8 km/h  2日目(復路) 往路では下った寒原峠からの勾配7%、長さ10kmを復路で登る気にはとてもならなかったので、中央アルプスを越えて木曽谷方面から帰ることにした。</description>
    </item>
    
    <item>
      <title>2010年08月07日 伊勢神宮&amp;伊勢湾一周</title>
      <link>https://www2.330k.info/bicycle/touring/20100807-isejinguu-isewanisshuu/</link>
      <pubDate>Sat, 07 Aug 2010 21:44:48 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100807-isejinguu-isewanisshuu/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100807-isejinguu-isewanisshuu\/20100807.kml&#34; }); ctaLayer.setMap(map); }   新しいシクロクロスバイク(SURLY CROSS-CHECK)が手に入ったので、ずっと温めていた伊勢湾を反時計回りに一周+伊勢神宮参りを決行。
目的は
 伊勢神宮に参拝して交通安全を祈願すること これまでの走行距離の限界に挑戦すること 9月30日に廃止される伊勢湾フェリーに乗船すること  の3つ。 鳥羽発の最終フェリーが15時20分となるため、あまりゆっくりできない。
出発は6時40分。 国道247号を北上し、今回は東海通に入って西進。弥富市で国道1号に入って木曽三川を渡り、三重県に入る。 四日市に入ってすぐ国道23号に入るも、大型車が大量に走っていて自転車には危険だったため、田んぼの中を走る道を適当に走る。
 鈴鹿あたりから国道23号に復帰し、ひたすら南下。 松阪市に入ってからは国道42号→三重県道37号と、伊勢神宮外宮へ最短距離ルートを走る。
なんとか13時前に外宮に到着。
    足早に参拝して、13時20分に外宮を出発。内宮へ急ぐ。
13時55分に内宮到着。 内宮からフェリー乗り場までは20kmちょっと。15時20分発のフェリーに乗るには10分前までにはフェリー乗り場に到着して乗船したい。 移動時間が1時間として14時10分に内宮を発たなければ。
    今回の目的の1つをきっちり果たす。
 結局内宮を出発したのは14時20分。やばい。
最短ルートである三重県道37号線を鳥羽方面へ急ぐ・・・と行きたいところだが、ここにきて延々と登り坂が続く。 なんとか25km/h以上をキープしつつ登りきり、その後平均50km/h程度で一気に海岸まで下る。
15時12分にフェリー乗り場にたどり着き、乗船券は船内発売という形で伊勢湾フェリーに飛び乗った。
 フェリーは16時10分に伊良湖へ到着。
 乗船前に記念撮影できなかったので、伊良湖でフェリー(右側)を撮る。 ちなみにこの伊勢湾フェリーは今年(2010年)9月30日で廃止されるので、その前に乗っておきたかった。</description>
    </item>
    
    <item>
      <title>2010年07月19日 養老の滝</title>
      <link>https://www2.330k.info/bicycle/touring/20100719-yourounotaki/</link>
      <pubDate>Mon, 19 Jul 2010 21:44:20 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100719-yourounotaki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100719-yourounotaki\/20100719.kml&#34; }); ctaLayer.setMap(map); }   浜名湖に行ったときの日焼けがひどかったため、3連休の2日目は休んで、3連休最終日は同僚と養老の滝まで行くことにした。 ルートは名古屋までは国道247号を北上し、その後国道1号を西進、その後国道155号などを通って国道258号と岐阜県道56号を北上というルート。
9時に寮を出発し、広い道路を淡々と走る。 岐阜県、三重県との県境で、木曽三川を次々と横断。
       愛知県から岐阜県、三重県と次々と新しい県に突入。 ただし三重県区間は短く、すぐにまた岐阜県に戻ることになる。
 国道258号と岐阜県道56号は小規模のアップダウンを繰り返す。 同僚が徐々に登坂で遅れるようになり、頂上付近で同僚を待つ。
 13時前に養老の滝の駐車場に到着。 駐車場の係員に尋ねて、駐車場の端っこに駐輪させてもらった。 そこからは徒歩で養老の滝を目指す。
 同僚はこの時点でへばりきってしまったいた。
 3連休最終日ということもあって、家族連れで賑わっていた。
 1.5kmほど歩いて、13時17分ついに養老の滝に到着。
 滝と駐車場の中間地点にある茶屋で昼食をとってエネルギを補給。 同僚に残された体力に不安があるため、帰りはできるかぎり平地を走り、いざとなれば同僚の実家(愛知県西部)に駆け込めるルートに変更。
休憩を入れながらだましだまし走ったものの・・・
 実家まであと5kmというところ(走行距離80km)で同僚の両足が痙攣し、ついにドロップアウト。 このあと同僚の実家から車を出してもらい、回収してもらった。
自分は自転車で同僚の実家まで追いかけ、同僚の様子を確認したのち、寮まで1人で帰った。
反省点としては、同僚の初めてのロングライドとして100km超を走らせるは少し無理だったかもしれないというところ。 まずは50km程度からのほうがいいかもしれない。
 走行時間 : 7時間30分58秒 走行距離 : 130.</description>
    </item>
    
    <item>
      <title>2010年07月17日 浜名湖&amp;浜名湖周遊自転車道</title>
      <link>https://www2.330k.info/bicycle/touring/20100717-hamanako-hamanakocyclingroad/</link>
      <pubDate>Sat, 17 Jul 2010 21:43:51 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100717-hamanako-hamanakocyclingroad/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100717-hamanako-hamanakocyclingroad\/20100717.kml&#34; }); ctaLayer.setMap(map); }   6月中旬に新しい自転車を注文したのだが、まだまだ納車されないようなので、3連休はルイガノのクロスバイクと過ごすことになった。 どこに行こうか、と考えてとりあえず3連休初日は浜名湖にうなぎでも食べに行って精をつけることにした。
   寮を8時に出発し、トロトロと国道1号を東進して11時頃に豊橋を通過、12時20分頃に静岡県に初めて突入。
 遠州灘が見える区間はあまりなかった。自転車はバイパス区間を通行できないので、旧道を進む。
 だいぶお腹も減ってきた13時、ようやく浜名湖(弁天島)に到着。でもお目当てのうな丼屋まではまだ遠い。
    浜名湖周遊自転車道を通って浜名湖畔を快走。 それにしても天気が良く、青空と浜名湖はとても良く映える。
 14時、ようやくうな丼にありつけた。 ちなみに本来はツーリングマップルに載っている「志ぶき」という店が目当てだったのだが、昼時を過ぎても行列ができていたので諦めた。
   昼食後に愛宕神社へお参り。
 浜名湖周遊自転車道をひたすら走る。 浜名湖周遊自転車道は全線が自転車道として独立しているわけではなく、ところどころ車道を走るところもあるのだが、何箇所か自転車道の入り口が分からなかった。
   自転車道の終点、三ヶ日からは天竜浜名湖鉄道に乗り、輪行で帰宅した。
 走行距離 : 128.5 km 走行時間 : 7時間02分53秒 平均速度 : 18.</description>
    </item>
    
    <item>
      <title>2010年07月04日 知多半島一周</title>
      <link>https://www2.330k.info/bicycle/touring/20100704-chitahantou/</link>
      <pubDate>Sun, 04 Jul 2010 21:43:32 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100704-chitahantou/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100704-chitahantou\/20100704.kml&#34; }); ctaLayer.setMap(map); }   名古屋(の隣)に転勤になり、休日が下の写真のようなサイクリング日和になったので、1週間前に実家から新幹線で運んできたルイガノの自転車でとりあえず知多半島一周に出ることにした。コースは地図に示すように知多半島を時計回りに1周することとした。
 出発してからしばらくは街中を進むが、豊浜あたりでようやく左手に海が見えるようになる。国道247号は路肩が狭く、交通量が多くなると少し危険だった。
 2時間ほど走り、距離的にはそろそろ南端についてもおかしくないのだが、地図を持ってくるのを忘れてしまったので、どこが知多半島の先端か分からず。 適当に海に出て写真を撮る。
 もう少し進むと、羽豆岬のフェリーターミナルの案内と鳥居があった。 とりあえず目的としていた知多半島の南端には到達した。 50kmを2時間ちょっとで走ったので、かなりいいペース。
   さて、今度は知多半島西岸を北上・・・なのだが、この日はとにかく向かい風が強い。 道中で何人もの自転車野郎どもとすれ違ったが、反対車線を走る人はみんな飛ばしている。
途中で灯台を発見したので寄ってみた。 野間崎灯台というそうだ。
 その後も国道247号を進むが、常滑までのバイパス区間はアップダウンが激しい。 というか今まで飛ばしすぎたかもしれない。
名鉄常滑線を越える陸橋を迂回し、線路脇の道を走ったが、この道は直線でほとんど勾配がなく走りやすかった。 途中で自転車歴40年以上で今年65歳の方に道案内をしてもらい、その後は10km/h程度でおしゃべりをしながらゆっくり並走した。
名古屋よりも少し先の方に住んでいる、とのことだったが
 「退職してから毎日のように知多半島に走りに来ている」 「若い時は4時間で知多半島を回れたんだが、最近は6時間かかる」 「東京まで22時間で行ったことがあるが、最後に箱根の峠を越えるのはきつかった」  など、数々の武勇伝を聞かせてくれた。
自転車のほとんどのパーツを自分で組むことができるほどのテクニックをお持ちで、良くも悪くも「自転車道」に踏み入れてしまった方のようだ。
太田川を過ぎたところでその方とお別れし、最後にスピードを上げて一気に帰宅した。
 走行時間: 5時間42分39秒 (休憩込み) 走行距離: 105.0 km (GPS) 平均速度: 18.</description>
    </item>
    
    <item>
      <title>2010年03月18日 奥日光</title>
      <link>https://www2.330k.info/bicycle/touring/20100318-okunikkou/</link>
      <pubDate>Thu, 18 Mar 2010 21:43:17 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20100318-okunikkou/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20100318-okunikkou\/20100318.kml&#34; }); ctaLayer.setMap(map); }   同期の漕艇部OBと2人で卒業旅行替わりにちょっと日帰りでポタリングした。 予定していたコースは
 東武日光駅まで輪行 いろは坂を超えて日光湯元あたりまで行く 折り返して日光駅付近まで戻る 時間が余ったら付近を観光  としていた。
走行距離は65km程度なので大した問題は起きないだろうと思っていた。
まずは本郷を7時に出発して浅草駅まで不忍池を通って走り、輪行開始。
 浅草駅08時00分発のきぬ103号に自転車とともに乗り込み、09時49分に東武日光駅に到着。 自転車を輪行袋から出して組み立てる。
 市街地を抜け、いよいよいろは坂に挑む。
 いろは坂を登り始めると道路以外の部分には残雪。
 こまめに休憩しつつ、結果的に40分ほどで明智平に到着。
   明智トンネルを抜けて中禅寺湖に到着。明智トンネルは広い歩道があったので安心して通れた。
 さらに湖畔を走って菖蒲ヶ浜へ。
 また標高を上げて戦場ヶ原に到着。夏が見頃らしいが・・・。
 湯ノ湖に到着。
   沼田方面に抜ける金精道路はまだ通行止め。
 湯ノ湖ビジターセンターで折り返す。
 さて折り返すか、としようとしたその時から天候が急変し、猛吹雪に。 前日の天気予報で降水はないと思い込んでいたのでレインウェアの用意をしていなかったことを激しく後悔。 雪で視界が殆ど無く、手と足の指先の感覚もなくなった中、急がないと路面が凍結してどうしようもなくなると思い、必死に標高を1000m下げる。</description>
    </item>
    
    <item>
      <title>Mathematicaにおけるプログラムの高速化手法</title>
      <link>https://www2.330k.info/essay/how-to-optimize-mathematica-programs/</link>
      <pubDate>Mon, 14 Dec 2009 22:39:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-optimize-mathematica-programs/</guid>
      <description>Mathematicaにおいてプログラムの実行速度を最適化する際の項目を思いつく限り挙げてみた。 高速化に関する公式のドキュメントはこちら。
関数型パラダイムで書く 必然的に組み込み関数を多く使い、リストをまとめて操作することになるので手続き型で書くより速くなることが多い。 コード量も少なくなって読みやすくなるので、よほどのことでない限りMathematicaでは関数型で書く。
具体的には、手続き型ループ構文(Do, For, Whileなど)をやめて、MapやThreadを使うようにする。
出来る限り組み込みの関数を使う 組み込み関数でできることは出来る限りやらせる。 ドキュメントを探すと、Mathematicaは意外と多くのものが組み込みでできるようになっている。
リストは全体をまとめて扱う 大概のループの中身はリストへの関数の適用や、テンソルの演算などに帰着する。
四則演算はリストにそのまま適用可能。 内積はDot、外積はCrossがあるし、それらを一般化したInner、Outerといった関数もある。
Mathematicaでは個々の要素に対する操作は記述しなくてもよい場合が多い。
myDifferences1[v_] := Table[v[[i + 1]] - v[[i]], {i, Length[v] - 1}]; (* 個々の要素を操作する *) myDifferences2[v_] := Most[RotateLeft[v] - v]; (* リスト全体をまとめて操作する *) {Timing[myDifferences1[#];], Timing[myDifferences2[#];], Timing[Differences[#];]} &amp;amp;[RandomReal[{0, 5}, 5000000]] {{1.919, Null}, {0.296, Null}, {0.187, Null}}  リストの要素数変更を避ける 手続き型で要素数が分からないリストを生成するには、ReapとSowを用いる。AppendToやPrependToは厳禁。
myPrimeChoice1[n_] := Module[{r = {}, i}, Do[If[PrimeQ[i], AppendTo[r, i]], {i, n}]; r]; myPrimeChoice2[n_] := Module[{i}, Reap[Do[If[PrimeQ[i], Sow[i]], {i, n}]][[2, 1]]]; {Timing[myPrimeChoice1[200000];], Timing[myPrimeChoice2[200000];]} {{3.</description>
    </item>
    
    <item>
      <title>陽的Runge-Kutta法のButcher tableau</title>
      <link>https://www2.330k.info/essay/explicit-runge-kutta-butcher-tableau/</link>
      <pubDate>Sat, 05 Dec 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/explicit-runge-kutta-butcher-tableau/</guid>
      <description> Explicit Runge-Kutta法の公式はいくつか知られているが、高次の公式になるほどButcher配列の項数が増えるため論文に誤植が多くなる。 それに気づかないまま実際に使うと、プログラムは正しく組めているはずなのに思うように精度が上がらないという落とし穴にはまってしまう。
覚書として、以下に代表的と思われる公式のButcher tableauをまとめる。
以下のButcher tableauはMathematica 8のNumericalDifferentialEquationAnalysisパッケージに含まれるRungeKuttaOrderConditionsで所定の次数条件を達成していることを確認しており、誤植が入り込まないようにそのままMathematica上で画像化している。
使用したMathematicaノートブックはこちら。 必要な人はダウンロードして自分で計算して確認した後に使用してほしい。
MathematicaにCやFortranのソースコード形式で吐かせるのが確実。
※注意事項
公式の名前や出典に関しては自信がないので、鵜呑みにしないこと。
1段1次 Euler法  2段2次 修正Euler法  Heun法  Ralston法 3段3次 Heunの3次法  Kuttaの3次法  Ralstonの3次法 4段4次 古典的Runge-Kutta法  6段5次 Runge-Kutta-Fehlberg法のうち5次の部分  Runge-Kutta-Nystroemのうち5次の部分  Butcherによる5次公式を3つ     7段6次 Hammudによるもの  9段7次 Shanksによるもの  CooperとVernerによる7次公式  11段8次 CooperとVernerによる8次公式  16段9次 Vernerによる埋め込み型公式のうち9次のもの  </description>
    </item>
    
    <item>
      <title>Mathematica 7でImportおよびExportを拡張する</title>
      <link>https://www2.330k.info/essay/extend-import-and-export-of-mathematica7/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/extend-import-and-export-of-mathematica7/</guid>
      <description>MathematicaではImportやExportを使って様々な形式のファイルを読み書きできるが、 標準で対応していないファイル形式についても自分でローダやライタを作り、 それをImportやExportに対応させる方法がExtending Import &amp;amp; Export (Wolfram Library Archive)において解説されている。
しかしこの文書は2003年のもので以前はExperimental`RegisterConverterという関数で登録すればよかったのだが、 この関数はMathematica 7にはない。
Names[&amp;quot;*`*Register*&amp;quot;]  などとして探し回ったところ、
 ImportExport`RegisterFormat ImportExport`RegisterExport ImportExport`RegisterImport  というそれらしいものを見つけた。
早速
ClearAttributes[ImportExport`RegisterFormat, ReadProtected]  として読込みプロテクトを解除してどういう動作をするのか調べたところ、
 ImportExport`RegisterFormat[&amp;ldquo;ファイルフォーマット名&amp;rdquo;]としてファイルフォーマットを登録 ImportExport`RegisterImport[&amp;ldquo;ファイルフォーマット名&amp;rdquo;, myImport]で自前のローダmyImportをImportに登録 ImportExport`RegisterExport[&amp;ldquo;ファイルフォーマット名&amp;rdquo;, myExport]で自前のライタmyExportをExportに登録  という使い方をするようだ。ファイルフォーマット名は&amp;rdquo;GPX&amp;rdquo;でも&amp;rdquo;KML&amp;rdquo;でも&amp;rdquo;JSON&amp;rdquo;でも好きな名前を付けていい。
myImportやmyExportの書式は以前と変わっていないようで、
myImport[filename_String, options___?OptionQ] := Module[{...},...] myExport[filename_String, expression_, options___?OptionQ] := Module[{...},...]  でいい模様。
ImportExport`RegisterFormatには以下のオプションがある。
 BinaryFormat : バイナリファイルならTrue、そうでなければFalse。 ImportExport`Encoding : よくわからないが、標準では&amp;rdquo;BASE64&amp;rdquo;、&amp;rdquo;BZIP2&amp;rdquo;、&amp;rdquo;GZIP&amp;rdquo;、&amp;rdquo;UUE&amp;rdquo;だけでTrueになっている。 ImportExport`Extensions : 対応する拡張子またはそのリスト。{&amp;rdquo;.nb&amp;rdquo;,&amp;rdquo;.html&amp;rdquo;}などと指定する。 AlphaChannel : アルファチャンネルを使う画像かどうか？Exportの際のラスタライズに関係するかも。JPEG2000やPNGなどでTrueになっている。  ただ、ImportExportExtensionsに拡張子を指定して登録しても、Exportでは大丈夫だがImportではうまく判別されない。 ImportExportRegisterImportの動作についてもう少し調べる必要がある。
Wolfram Researchが新しいドキュメントを出してくれれば早いのだけれど…。
Feb. 20 2010追記
Importで自動判別させる方法が判明。
FileFormatDump`AddFormat[&amp;quot;ファイルフォーマット名&amp;quot;, bin, bundle, archive, encoding, magic, ext, mime, test, bundletestfunc]  として、判別するときに用いられる関数のほか、MIMEタイプも登録できる模様。</description>
    </item>
    
    <item>
      <title>Google Sites &#43; Google Analyticsで「サイト上のデータ表示」は要注意</title>
      <link>https://www2.330k.info/essay/attention-to-show-data-in-combination-of-google-sites-and-google-analytics/</link>
      <pubDate>Sun, 15 Nov 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/attention-to-show-data-in-combination-of-google-sites-and-google-analytics/</guid>
      <description>Google SitesではGoogle Analyticsを用いる設定が簡単にできるが、Google Analyticsの「サイト上のデータ表示」を行うと「閉じる」をクリックしても何の反応がない。 画面にレイヤーが重なっていろいろなデータが表示されてしまう状態から抜けられない。
ネットを調べたところ、「閉じる」が見つからないために同じような現象に遭遇している事例は見つかったが、 「閉じる」をクリックしても、
_siteOverlay._close()  をアドレスバーに打ち込んでもダメだった。 おそらくGoogle Sitesを利用している場合特有の現象なのだろう。
この現象が発生することを確認したブラウザは
 Google Chrome 4.0.237.0 Mozilla Firefox 3.5.5 Opera 10 Internet Explorer 8  で、いずれもOSはWindows Vista(32ビット)。ちなみにIE8ではレイアウトも崩れていた。
仕方がないので_siteOverlay.close()の中身をちょっと調べた。
function () { var domain, cookiePath; if (GLOBAL_window._udo) { domain = GLOBAL_window._udo; } else if (GLOBAL_window._gat &amp;amp;&amp;amp; GLOBAL_window._gat._gasoDomain) { domain = GLOBAL_window._gat._gasoDomain; } if (domain) { domain = domain[$$PROP_replace](&amp;quot;domain=&amp;quot;, &amp;quot;&amp;quot;)[$$PROP_replace](&amp;quot;;&amp;quot;, &amp;quot;&amp;quot;)[$$PROP_replace](/ /g, &amp;quot;&amp;quot;); } if (GLOBAL_window._utcp) { cookiePath = GLOBAL_window._utcp; } else if (GLOBAL_window.</description>
    </item>
    
    <item>
      <title>2009年11月07日～08日 東海村(茨城)</title>
      <link>https://www2.330k.info/bicycle/touring/20091107-08-toukaimuraibaraki/</link>
      <pubDate>Sat, 07 Nov 2009 21:43:03 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20091107-08-toukaimuraibaraki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20091107-08-toukaimuraibaraki\/20091107-08.kml&#34; }); ctaLayer.setMap(map); }   ホッケー社会人リーグの最終戦が茨城県東海高校のグラウンドで行われることになったので、国道6号の水戸街道部分を自転車で走破するチャンスと捉えて 1. 試合前日に1日かけて東海村まで行く 1. 試合は13時に開始されるので午前中は東海村の原子力関連施設を観光しにポタリング 1. ついでに試合をする 1. 帰りは輪行 という計画を立て、実行した。
1日目 天気は秋晴れ、気温も10月上旬並みの小春日和と絶好のサイクリング日和。 中でもスティックの運搬方法には頭を悩ませたが、結局スティックケースに入れて肩にかけて運ぶことにし、その代わりバックパックを省略。 その他軽量化のため、荷物からレインウェアを省いたほか、洗面用具なども必要なものに絞ったが、スティックのほかホッケーのユニフォーム、靴(これが重い)を運搬しなければならないため、トータルで見るといつもよりも荷物の量としては多くなってしまった。
8時50分ごろ自宅を出発。
池袋の自宅からどうやって国道6号まで行くか悩んだが、交通量の多いルートで朝から神経を消耗したくなかったので、荒川サイクリングロード経由で行くことにした。 明治通りを通って荒川サイクリングロードに入ってしばらく下ったのち、四つ木橋で国道6号線に入る。 土曜日なのに、自家用車だけでなく大型トラックも非常に多い。
10時過ぎに江戸川を超えて千葉県入り。
 やはりというかなんというか、千葉県に入ると路肩が狭くなり、歩道の舗装状況もひどいので自転車にとっては非常に走りにくくなる。 歩道や自転車にまで気を使って道路を作ることができるかどうかは現地の自治体の財政力に依存することを痛感。
12時前には利根川を超えて茨城県に入る。
   大型車の通行量が一向に減少する気配を見せないので、広くて歩行者がいない歩道をメインに快走する。 細かなアップダウンはあるのだが、甲州街道に比べればなんということもない。 昼食を食べれそうな店を探しながら、延々と国道6号を走るのだが、なかなかこれという店を見つけられないまま牛久まで来てしまう。 日本橋からの50kmポストを通過したが、時刻も13時を過ぎたため、これ以上は耐えられないとコンビニを見つけてそこで済ます。
 昼食のため20分ほど休憩したのち、また走り始める。 土浦バイパス部分ではアップダウンが激しいものの交通量がほとんどない側道を走り、それ以外は大型車を避けるため歩道を走行した。
小休止をはさみながらも黙々と走り、16時過ぎに100kmポストを通過し、16時19分に水戸市へ入る。
   余裕があれば水戸市街に行って偕楽園などを観光したいのだが、日も暮れてきたのでそのまま陸前浜街道と名前を変えた国道6号を突っ走る。 夕暮れのトワイライトの時間帯は自分は1日の中で1番好き。</description>
    </item>
    
    <item>
      <title>多角形の内外判定</title>
      <link>https://www2.330k.info/essay/takakugatanonaigaihantei/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/takakugatanonaigaihantei/</guid>
      <description>ある点が多角形の内側にあるのか外側にあるのかを判定するには主に
 ある点から直線をひいて多角形の辺と何回交差するか判定する(偶数回なら外、奇数回なら中) ある点から多角形の各頂点を順番に見ていったときに何回転するか  の2つの方法がある。
しかし辺との交差回数をカウントするのは、直線と辺が平行だったり、頂点で交差したりする場合などに特別な配慮が必要なので、 ここでは2番目の方法で実装する。
点から多角形上の点を順々に見たときの偏角(反時計まわりを正とする)の和を取ればよいので、ある点Pからみた多角形上の頂点Aから頂点Bまでの偏角∠APBを求める関数をまず作成する。
この実装方法にもベクトルの外積を考えるなど何通りか考えられるが、せっかくMathematicaを使うので楽をして、複素数にしてArgで偏角をとることにする。
Angle[{{x1_, y1_}, {x2_, y2_}, {x3_, y3_}}] := Module[{v1 = Complex[x1 - x3, y1 - y3], v2 = Complex[x2 - x3, y2 - y3]}, If[TrueQ[v1 == 0], 0, Arg[v2/v1]] ]  多角形の内外判定はMathematicaのPolygonなどの表示に合わせ、自己交差している場合は内部と外部を交互に繰り返すものとすると、
 偏角の和が0、±4π、±8π、…のとき点は多角形の外 偏角の和が±2π、±6π、±10π…のとき点は多角形の中  とできる。
以上より多角形の内外を判定する関数InsidePolygonQは以下のように実装できる。
InsidePolygonQ[poly : {{_, _} ..}, p : {_, _}] := Module[ {argsum}, argsum = Round[Total[MapThread[Angle[{##, p}] &amp;amp;, {poly, RotateLeft[poly]}]]/(2 Pi)]; OddQ[argsum] ]  丸め誤差が蓄積すると誤判定してしまうのだが、誤判定するために要求される丸め誤差はπなので、多分大丈夫だと思われる。</description>
    </item>
    
    <item>
      <title>簡易ハンディGPSによるあしあとデータの時刻情報</title>
      <link>https://www2.330k.info/essay/leap-second-in-au-handy-gps-ashiato-data/</link>
      <pubDate>Tue, 27 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/leap-second-in-au-handy-gps-ashiato-data/</guid>
      <description>au携帯電話に入っている地図ビューアーの簡易ハンディGPS機能によって取得したGPSログ(あしあとデータ)は、
本ファイルは、地図ビューアーにより出力されたGPS情報ファイルです。 出力日時:2009/10/27 08:56:46 +0900 +++GPSログ+++ 940669002,139.604988,35.833148  という形式になっており、「+++GPSログ+++」以下の行に時刻、経度、緯度の順番に記録される。
GPSでは時刻を1980年1月6日0時0分0秒(GMT)からの秒数として表すが、au携帯電話の場合はこれに9時間を足した秒数になる。
ただし、GPS時刻は1980年1月6日以降の閏秒を無視しているので、普通のGPSロガーから時刻情報を取り出すときには閏秒の処理が必要になる。 ちなみに2009年1月1日時点でGPSの原子時計は15秒進んでいる。
3行目の出力日時は簡易ハンディGPSからあしあとデータの保存をした時の時刻となる。 上のデータは1回目の測位終了後直ちに保存したものであるので、出力日時の「2009/10/27 08:56:46」というのは「940669002」の表す時刻の数秒後であるはず。
ところが、閏秒を考慮せずにMathematicaで
DatePlus[DateList[{1980, 1, 6, 0, 0, 0}], {940669002, &amp;quot;Second&amp;quot;}]  とすると、
{2009, 10, 27, 8, 56, 42.}  と返ってくる。
電波時計と携帯電話を同時に見ていたのだが、8時56分42秒というのは測位した瞬間に電波時計が指していた時刻と一致している。 15秒前の8時56分27秒の時点ではまだ測位を開始していない。
以上より、auの携帯電話(少なくとも私が持っているW61CA)の簡易ハンディGPSによるあしあとデータの時刻情報は閏秒について修正する必要がない(携帯電話側で修正している)と言える。</description>
    </item>
    
    <item>
      <title>16ビットアプリケーションの標準入出力をリダイレクト</title>
      <link>https://www2.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</link>
      <pubDate>Mon, 26 Oct 2009 21:47:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</guid>
      <description>FORTRANで書かれた古いMS-DOSプログラムを.NET/Linkを使ってMathematicaから操るパッケージを作っていたところ、 Process.StartInfo.RedirectStandardInputやRedirectStandardOutputにTrueを設定してもまったく標準入出力をリダイレクトできなかった。(※OSはVista 32bit)
いろいろ試してみたところ、16ビットのプログラムだとリダイレクトができないらしいということが分かった。 さてどうしたものかとさらにいろいろ打開策を探してみた結果、
 FileNameに&amp;quot;cmd.exe&amp;quot;を設定して、Process.Start()でプロセスを起動。 必要ならStandardInput.WriteLine(&amp;quot;cd 16ビットプログラムのディレクトリ&amp;quot;)としてカレントディレクトリを移動。 StandardInput.WriteLine(&amp;quot;***.EXE&amp;quot;)として16ビットプログラムを起動。  とcmd.exeを間に挟むことにより、16ビットのプログラムに対しても標準入出力のリダイレクトが行えることが分かった。
以下はMathematica+.NET/Linkによるサンプル。 標準出力は書き出されるたびにイベントハンドラで捕捉してoutputsに追加するので、Dynamic[outputs]などとしておくと、本当のターミナルの挙動に近づく。 最初にcmd.exeの出力(&amp;ldquo;Microsoft Windows [Version &amp;hellip;&amp;ldquo;)が入るので、16ビットのプログラムの出力だけがほしい場合は16ビットプログラム起動後にフラグを立てれば大丈夫。
outputs = {}; outputhandler[o_, args_] := Module[ {data = args@Data}, AppendTo[outputs, data]; ]; NETBlock[ proc = NETNew[&amp;quot;System.Diagnostics.Process&amp;quot;]; LoadNETType[&amp;quot;System.Environment&amp;quot;]; proc@StartInfo@FileName = Environment`GetEnvironmentVariable[&amp;quot;ComSpec&amp;quot;]; proc@StartInfo@RedirectStandardInput = True; proc@StartInfo@RedirectStandardOutput = True; proc@StartInfo@UseShellExecute = False; proc@StartInfo@CreateNoWindow = True; proc@StartInfo@WorkingDirectory = DirectoryName[proc@StartInfo@FileName]; AddEventHandler[proc@OutputDataReceived, outputhandler]; proc@Start[]; proc@BeginOutputReadLine[]; proc@StandardInput@WriteLine[&amp;quot;cd &amp;quot; &amp;lt;&amp;gt; &amp;quot;16ビットプログラムのディレクトリ&amp;quot;]; proc@StandardInput@WriteLine[&amp;quot;******.EXE(16ビットプログラム)&amp;quot;]; proc@StandardInput@WriteLine[&amp;quot;16ビットプログラムの標準入力に渡す内容&amp;quot;]; proc@StandardInput@Close[]; proc@WaitForExit[]; proc@Close[]; ];  とはいっても64bit版のWindowsだと16bitのプログラムがそもそも動かない。</description>
    </item>
    
    <item>
      <title>GPXファイルを読み込む</title>
      <link>https://www2.330k.info/essay/import-gpx-file-in-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/import-gpx-file-in-mathematica/</guid>
      <description>MathematicaでGPXファイルを読み込んで解釈する方法のメモ。
対象となるGPXファイルを
xml = Import[filepath, &amp;quot;XML&amp;quot;];  でまずXMLとして読み込んでおいて、
trk = Cases[xml, XMLElement[&amp;quot;trk&amp;quot;, _, _], Infinity];  でtrk要素を抜き出し、
trkpt = (ToExpression[{&amp;quot;lat&amp;quot;, &amp;quot;lon&amp;quot;} /. Cases[#1, XMLElement[&amp;quot;trkpt&amp;quot;, attr_, _] :&amp;gt; attr, Infinity]] &amp;amp; ) /@ trk;  でそれぞれのtrk要素からtrkpt要素を抜き出して緯度と経度を得る。
Sep. 28 2013追記
Mathematica 8からは標準でGPXをImport可能になった。</description>
    </item>
    
    <item>
      <title>友愛数を列挙する</title>
      <link>https://www2.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</guid>
      <description>Mathematicaで友愛数を列挙するプログラム例として以下のようなものが見受けられる。
yakuwa[n_] := DivisorSigma[1, n] - n; Do[If[(yakuwa[yakuwa[k]] == k) &amp;amp;&amp;amp; (yakuwa[k] != k), Print[{k, yakuwa[k]}]], {k, 1, 1000}];  しかし、Doでループを回してPrintで書き出していくのはMathematica的に美しくないと思う。
Mathematicaなら関数型プログラミングとパターンマッチを用いるのが良いと思うので、私なら以下のように書く。
Cases[NestList[DivisorSigma[1, #] - # &amp;amp;, #, 2] &amp;amp; /@ Range[100000], {a_, b_, a_} /; a &amp;lt; b -&amp;gt; {a, b}]  実行速度もこちらのほうが1割程度速い。
この書き方から一般の社交数を求めるプログラムに拡張するのは簡単で、例えば5個組の社交数を探す場合は以下のようになる。
Cases[NestList[DivisorSigma[1, #] - # &amp;amp;, #, 5] &amp;amp; /@ Range[100000], {a_, b__, a_} /; a &amp;lt; Min[b] -&amp;gt; {a, b}]  ただし、私の方法はメモリを大量に使う。</description>
    </item>
    
    <item>
      <title>折れ線を間引く</title>
      <link>https://www2.330k.info/essay/oresenwomabiku/</link>
      <pubDate>Sat, 24 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/essay/oresenwomabiku/</guid>
      <description>読み込んだGPSログのデータを間引きたい、と思って調べたところ、 (Ramer-)Douglas-Peuckerのアルゴリズムというものがあることが分かった。
基本的な考え方は、
 折れ線の始点と終点を結ぶ線分と各点の距離を求める。 すべての点との距離が許容誤差ε以内に入っていれば始点と終点だけを返して終了。 そうでなければ距離が最大の点Pを1つ選択。 始点から点Pまでの折れ線と、点Pから終点までの折れ線のそれぞれについてまた1から処理する。  という再帰的なもの。
再帰的なものはMathematicaの得意分野なので、MathematicaでRamer-Douglas-Peuckerのアルゴリズムを実装してみた。
線分と点の距離 さて、まずは線分と点の距離を求める関数を作成する。
ネットで検索すると直線と点の距離を求めるものが多いが、線分と点の距離のほうが形状をよく保存できるのではないだろうか、と個人的に考えている。
線分ABに点Pから下ろした垂線の足が点Hだとすると、
 線分ABと直線PHは直交⇔内積が0 点Hは直線AB上にある⇔実数tに対してB = t H(B、Hは点Aから見た点B、点Hの位置ベクトル)  の条件から、Hの座標と実数tの値が求まる。 Mathematicaを使うと
A = {ax, ay}; B = {bx, by}; P = {px, py}; H = {x, y}; Solve[{ (H - A).(P - H) == 0, H == A + (B - A) t }, {x, y, t}][[2]] // FullSimplify {x -&amp;gt; (ay^2 bx + ax^2 px + ax ay (-by + py) - ay bx (by + py) + ax (by^2 - 2 bx px - by py) + bx (bx px + by py))/((ax - bx)^2 + (ay - by)^2), y -&amp;gt; ((ax - bx) (by (ax - px) + ay (-bx + px)) + (ay - by)^2 py)/((ax - bx)^2 + (ay - by)^2), t -&amp;gt; (ax^2 + ay^2 + bx px - ax (bx + px) + by py - ay (by + py))/((ax - bx)^2 + (ay - by)^2)}  となる。 これは2次元の場合だが、一般に</description>
    </item>
    
    <item>
      <title>2009年09月18日～20日 高森(長野)</title>
      <link>https://www2.330k.info/bicycle/touring/20090918-20-takamorinagano/</link>
      <pubDate>Fri, 18 Sep 2009 21:42:24 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20090918-20-takamorinagano/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20090918-20-takamorinagano\/20090918-20.kml&#34; }); ctaLayer.setMap(map); }   9月の連休(シルバーウィーク)を利用して、農作業の手伝いも兼ねて祖母宅まで自転車で行くことにした。 中山道経由も考えたが、ルートとしてはまずは甲州街道から伊那路を辿ることにした。
1日目 前日夜に京都より帰宅してから体調が万全とは言えなかったものの、天気予報を見るとなんとか雨は降らない模様。出発を1日延期すると道路の混雑や宿がとれないことが予想されるので、多少悩んだが朝9時30分に出発を決意。
とりあえず1日目は笹子峠(旧笹子トンネル)を超えて勝沼を目安に、できれば甲府まで、少なくとも大月までが目標。自宅を出て春日通り、山手通り、甲州街道とだいぶ慣れた道を進む。
大体予定通り昼ごろに高尾に着いたので、安くすますためマクドナルドで100円のもののみを注文して昼食にする。
   その後大垂水峠(392m)を超え、去年は目的地であった相模湖も通過し、100kmポストも通過した。
大月市に入った時点で、ずっとGPSのログを取らせていた携帯電話のバッテリ残量表示が1つになったため、電源を切る。
15時を過ぎた時点で走行距離は100km近くなり、足も疲労が溜まってきて上り坂がきつくなってきた。勝沼までを目標にしていたが、これから夜の笹子峠に挑むのは危険と思い、初狩駅付近で宿が取れたら1日目の日程を終了し、どうしようもない場合のみ新笹子トンネルを突っ切ることに決める。
初狩駅のすぐ前に旅館があることは調査済みだったので、連休前で予約がいっぱいの可能性も覚悟して今夜宿泊できるか尋ねたところ、他に宿泊客はいないので大丈夫、との返答を得た。1泊夕食付で5200円。安い。1日目は初狩にて終了。
  走行距離:99.99km 走行時間:4時間40分38秒 平均速度:21.3km/h 最高速度:53.0km/h  2日目 さて、前日の目標であった笹子峠超えを2日目に延期してしまったので、2日目は距離を稼がねばならない。旅館の朝食をなしにした理由はこのためで、朝7時に出発し、ファミマでおにぎりと糖分補給用の菓子パンを購入して朝食とし、笹子峠に挑む。
さすがに甲州街道の最難所と言われるだけあり、急勾配で休憩をはさまないと1km進めない。 登る途中で、矢立ての杉なるものの案内を見つけたので自転車を降りて寄ってみた。 うまく写真に収められなかったでかい。屋久島の縄文杉というのはこれより大きいのか。
    で、標高1000mを超えてようやく旧笹子トンネルに到着。
 この旧笹子トンネルは古いだけあってランプがなく、真っ暗で路面の状態がまったく見えない。
 びくびくしながらもトンネルを通過。上の写真は勝沼側から撮ったもの。
 旧笹子トンネルを通過してからは、勝沼・塩山を通過し、標高約250mの甲府盆地まで一気に駆け下る。 苦しいヒルクライムをしてまで峠を攻めるのは、ただこのダウンヒルにあると言ってもよい。 速度は軽く50km/hを超える。 交通量がほぼ0なのでコーナーのたびにアウトインアウトを意識してみたり。 もちろんカーブミラーはちゃんと確認している。</description>
    </item>
    
    <item>
      <title>2009年08月08日 富津岬</title>
      <link>https://www2.330k.info/bicycle/touring/20090808-futtsumisaki/</link>
      <pubDate>Sat, 08 Aug 2009 21:42:04 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20090808-futtsumisaki/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20090808-futtsumisaki\/20090808.kml&#34; }); ctaLayer.setMap(map); }   教授の発案で、研究室のメンバーで富津海岸で海水浴→木更津に住む教授の家でホームパーティという催しが行われたので、自転車で参加することに。 池袋の自宅を6時30分に出発し、春日通りからお茶の水を通って国道14号千葉街道に入る。 江東区まではよく走るのだが、江戸川区に入るのは初めてだったため、千葉街道が左に逸れるのを見逃してしまい、江戸川を渡ろうとしたら首都高速の橋しかかかっていなかった。
 江戸川にはサイクリングロードがあることは知っていたので、その入り口を見つけて上流に遡る。
 しばらくすると千葉街道の橋が見えたのでこれを渡り、千葉県に入る。 朝は雲がかかっていて涼しかったのだが、昼になるにつれて雲が晴れ、夏の日光が気温を上げていった。
 千葉県に入ってからの千葉街道は片側1車線で路肩もほとんどなく、普段なら自転車にとっては走りにくい道なのだが、夏休み中の土日とあってか交通量が多く、自動車とほぼ同じ速度で順調に千葉街道を進んだ。 千葉を過ぎると国道14号から国道357号に変わり、蘇我ではJFEの東日本製鉄所(千葉地区)の前を通ったので記念撮影。 さらにそのまま南下すると国道16号に入るが、海岸沿いで高低差のほとんどない片側2車線の道路を快走。
午前11時ごろには木更津市に入る。下のは久留里線。
 11時30分にラーメン屋で昼食を取って、40分ぐらい休憩したのち再出発。 再び国道16号を進み、君津製鉄所、富津のR&amp;amp;Eセンター、ついでに富津火力発電所の前まで行って記念撮影。
    その後13時に真夏の日差しが照りつけるなか、こまめに水分補給をしながら最終目的地富津岬に到着。
 変な形の展望台の頂上まで登って写真撮影。
   その後教授ほか研究室のメンバーと富津海岸で待ち合わせに行き、久しぶりの海水浴を楽しんだ。
 100km以上走って、海水浴場ではしゃぎ、最終的に教授宅でアルコール、という3連荘は体力的にきつく、翌日も疲労困憊だった。
走行記録  走行時間:6時間 走行距離:108km 平均速度:18km/h 最高速度:?  正確な記録をしていなかった…。</description>
    </item>
    
    <item>
      <title>2009年03月08日～10日 今市</title>
      <link>https://www2.330k.info/bicycle/touring/20090308-10-imaichi/</link>
      <pubDate>Sun, 08 Mar 2009 21:41:45 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20090308-10-imaichi/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20090308-10-imaichi\/20090308-10.kml&#34; }); ctaLayer.setMap(map); }   ホッケー部の後輩たちが今市(栃木県日光市)にある今市青少年スポーツセンターで合宿をする、とのことなので、先輩OBと2人で自転車で参加することになった。
1日目 天候が最大の不安であったが、なんとか雨は降らない模様。 先輩OBが住む北千住駅前で9時に待ち合わせのため、ホッケー用のウェアや靴をパニアバッグに詰め込んで自宅を8時過ぎに出発。
明治通りを王子駅まですすみ、その後荒川まで北上、あとは荒川河川敷のサイクリングロードを千住大橋まで行ってから南に行って北千住駅まで走った。
先輩と合流したら、江戸川サイクリングロードを目指す。 下町の細い路地に多少迷いながらも江戸川に到着、あとはサイクリングロードを飛ばすだけ・・・と思っていたが、 強烈な向かい風(季節風) 単調な上り坂 (川沿いだから) 休憩のタイミングがとりづらい(信号がない) ため思ったようには進めず、巡航速度も20km/hそこそこ。
 そのため当初は江戸川サイクリングロード→利根渡良瀬サイクリングロード→思川サイクリングロードと進む予定だったがサイクリングロードメインのルートは断念し、国道16号に出て吉野家で昼食をとった後、国道4号バイパスを通ることに。 国道4号バイパスは側道が広くて自転車にとっては非常に走りやすい。 ただ物資補給のために立ち寄りたいコンビニが少なかった。
   順調に埼玉県→茨城県→栃木県と進み、しばらくして国道4号旧道に入り、雀宮駅前にある1日目の宿に到着。
 自転車をホテルに置いた後、電車で宇都宮に行って餃子を食べて翌日に備えた。
 走行時間 : 6時間3分26秒 走行距離 : 119.45km 平均速度 : 19.7km/h 最高速度 : 41.5km/h  2日目 朝起きたところ夜に雨が降った様子もなく、路面の状態は良好。 いざ今市青少年スポーツセンターへ。</description>
    </item>
    
    <item>
      <title>2009年02月08日 お台場ポタリング</title>
      <link>https://www2.330k.info/bicycle/touring/20090208-odaiba/</link>
      <pubDate>Sun, 08 Feb 2009 21:41:14 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20090208-odaiba/</guid>
      <description>  function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20090208-odaiba\/20090208.kml&#34; }); ctaLayer.setMap(map); }   譲ってもらったロードレーサーに慣れるため、 翌週用事のあった東京ガス深川グラウンドまでの道の下見を兼ねて、 海が見える方向を目指して気ままに走った。
        </description>
    </item>
    
    <item>
      <title>2008年08月18日 相模湖</title>
      <link>https://www2.330k.info/bicycle/touring/20080818-sagamiko/</link>
      <pubDate>Mon, 18 Aug 2008 00:00:00 +0900</pubDate>
      
      <guid>https://www2.330k.info/bicycle/touring/20080818-sagamiko/</guid>
      <description>function initMap(){ var map, ctaLayer; map = new google.maps.Map(document.getElementById(&#34;map-canvas&#34;), { center: {lat: 35.6832581, lng: 139.7555827}, zoom: 8 }); ctaLayer = new google.maps.KmlLayer({ url: &#34;https:\/\/www2.330k.info\/\/bicycle\/touring\/20080818-sagamiko\/20080818.kml&#34; }); ctaLayer.setMap(map); }   大学院の講義の1つにソーラークルーレスボートの製作があり、その実走行試験を相模湖で行うとのことなので自転車で行ってみることにした。 それ以前は自転車による1日の最長走行距離は36km(東京→横浜)だったのだが、相模湖までは片道65kmと当時の自分にとってはかなりチャレンジング。
池袋の自宅を8時30分に出て、春日通り、明治通りと通って新宿まで行き、そこから相模湖までずっと甲州街道(国道20号)を走る。 途中後輪の空気圧が気になったので八王子の自転車屋で空気を入れなおしてもらったほかは特に問題はなく、52km走って高尾に到着。 後日知ることになったのだが、実は後輪のチューブに小さい穴があいていた。
ここから7km先の東京都と神奈川県の境にある大垂水峠まではずっと上り坂。 高尾の標高は200mないが大垂水峠は392mなので、約200m登る。 とはいえ、いかんせん初めてのヒルクライムなのでこの高低差がどの程度のものなのか見当がつかない。
 高尾山口をすぎてしばらくしてあたりにラブホテル以外に何も見当たらなくなってきたところで一旦休憩。
 その後一気に大垂水峠まで。 途中で自転車を押しながら歩く若者2人組を抜いたが、初めてのヒルクライムは足をつかずに完走できた。
あとは相模湖まで一気に下る。
 正午に相模湖駅前に到着。 とりあえず相模湖駅に行って記念撮影。
その後相模湖畔まで下りてソーラーボートプロジェクトの面々に合流し、正式メンバーじゃないのにいろいろと邪魔する。
    往路は結局片道65kmほどを休憩含めて4時間かからずに走れた。
往路は16時半に出発。 来る時に下ったところは当然登らないといけないので、最初の6kmほどは上りとなる。 相模湖駅の標高は212mで、湖面はそれより低い。 とはいえ登るときの勝手がわかってきたので思ったよりも楽に大垂水峠に到達し(途中でロードレーサーに乗った50代ぐらいのおじさんにあっという間に抜かれたが)、あとは都心部まで基本的にひたすら下る。 トラックの後ろにひっついて下っていた時に本日の最高速度49.1km/hを記録。
来る時と同じ行程ではつまらないので、日野バイパスは通らずに帰ろうとしたのだが、途中で立川駅付近や回田町あたりで何回か道に迷う。 結局五日市街道→青梅街道と通って新宿まで戻った。
結局20時半に帰宅。 帰りは迷ったので4時間かかった。 暗かったので写真はなし。
走行記録  走行時間 : 5時間49分40秒 走行距離 : 133.</description>
    </item>
    
  </channel>
</rss>