<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on 330k info</title>
    <link>https://www.330k.info/tags/javascript/</link>
    <description>Recent content in JavaScript on 330k info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 01 Mar 2019 07:01:13 +0900</lastBuildDate>
    
	<atom:link href="https://www.330k.info/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bxSliderで2番目以降の画像が一瞬表示されるのを防止する</title>
      <link>https://www.330k.info/essay/show-only-first-images/</link>
      <pubDate>Fri, 01 Mar 2019 07:01:13 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/show-only-first-images/</guid>
      <description>もうjQueryも古いと言われているが、会社のウェブサイトでjQueryプラグインのbxSliderが使われている。 Google先生のPageSpeed Insightに注意されたとおり、レンダリングブロックするJavaScriptを後ろ(&amp;lt;/body&amp;gt;直上)に配置したところ、 2枚目以降の画像が一瞬表示されてしまう現象が発生。 これはJSをレンダリングブロックしないように後ろに配置したり、</description>
    </item>
    
    <item>
      <title>Google Analyticsで動画(Video要素)のイベントを計測</title>
      <link>https://www.330k.info/essay/measure_video_events_with_google_analytics/</link>
      <pubDate>Mon, 02 Oct 2017 23:27:45 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/measure_video_events_with_google_analytics/</guid>
      <description>会社のウェブサイトに貼ってある動画ファイルが、実際にどれだけ再生されているのか調査するべく、 Google Analyticsのイベントで計測するためのコードを作ってみた。 計測対象は以下のイベント。 再生開始(play) 最後まで再生(ended) 一時停止(pause) 再生再開(resume) シークした(seeked) どこまで再生したか(動画時間の10%, 25%, 50%, 75%, 90%) HTML側 &amp;lt;video id=&amp;quot;movie001&amp;quot; width=&amp;quot;(動画幅)&amp;q</description>
    </item>
    
    <item>
      <title>Unicode制御文字(LRO, RLO)でコピー・改変を防止 (構想)</title>
      <link>https://www.330k.info/essay/scramble_unicode_lro_rlo/</link>
      <pubDate>Mon, 21 Aug 2017 22:38:20 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/scramble_unicode_lro_rlo/</guid>
      <description>Unicode制御文字のうち、LRO(Left-to-right override, U+202D)とRLO(Right-to-left override, U+202E)は 行中でも文字列の方向を変更する。 1行の中に何度もLROとRLOが入ると、カーソルキーが踊って楽しいことになる。 例: 下のテキストボックスの中の文字列を編集したり、カーソルキーで移動しようとしても上手くできないはず。 ‮‭い‮を‭ろ‮る‭は‮ぬ‭に‮り‭ほ‮ち‭へ ‮‭わ‮</description>
    </item>
    
    <item>
      <title>Windows標準機能でZIPファイルの作成</title>
      <link>https://www.330k.info/essay/create_zip_file_with_wsh_jscript/</link>
      <pubDate>Mon, 08 May 2017 22:37:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/create_zip_file_with_wsh_jscript/</guid>
      <description>JScriptで複数のテキストファイルを書き出し、それをZIPでまとめたかったので作成。 VBAやVBScript版を参考に作ってみた。 参考サイト : http://kiq-creator.com/blog/?eid=33 複数のファイルをZIP圧縮する際のコツとしては、CopyHereをするたびに待機すること。 CopyHereは非同期なので、すぐにJS側に制御が返ってくるが、 複数のファイルを一気にCopyHereしようとすると、「読み取りできません」とエラーが出る。 使い</description>
    </item>
    
    <item>
      <title>Unicodeステガノグラフィ with JavaScript</title>
      <link>https://www.330k.info/software/plain-text-steganography-with-unicode/</link>
      <pubDate>Wed, 01 Jun 2016 22:42:38 +0900</pubDate>
      
      <guid>https://www.330k.info/software/plain-text-steganography-with-unicode/</guid>
      <description>概要 ゼロ幅文字を使ってUnicodeのプレーンテキストにステガノグラフィを施す、 ブラウザのJavaScriptで動作するライブラリを書いてみた。 参考にしたのは以下のサイト ZERO WIDTH SPACE を使って Unicode ステガノグラフィ Unicode Text Steganography Encoders/Decoders 特徴としては以下の通り。 デフォルトではゼロ幅文字として4種類を使用(U+200C, U+200D, U+202C, U+FEFF)し、2種類の時よりもエンコード後の文字数を減少(それでも1文字埋め込むために8文字増える)</description>
    </item>
    
    <item>
      <title>Douglas-Peucker向けの優先度付きキュー実装の検討</title>
      <link>https://www.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</guid>
      <description>Nov. 29 2015: JavaScriptで実装した優先度付きキューをGitHubで公開→https://github.com/330k/priorityqueue_js/ 各ヒープのベンチマーク → http://330k.github.io/priorityqueue_js/benchmark.html これにはFibonacci Heapも比較対象に入れてある 折れ線を間引くで書いたように、 Douglas-Peuckerアルゴリズムを改良して指定した点数まで点を削減して折れ線を簡略化する場合、 優先度付きキューを使うことに</description>
    </item>
    
  </channel>
</rss>