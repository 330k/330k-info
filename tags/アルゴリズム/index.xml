<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>アルゴリズム on 330k info</title>
    <link>https://www.330k.info/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/</link>
    <description>Recent content in アルゴリズム on 330k info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sat, 22 Jul 2017 19:32:46 +0900</lastBuildDate>
    
	<atom:link href="https://www.330k.info/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>球面上の一様分布</title>
      <link>https://www.330k.info/essay/random_distribution_sphere_surface/</link>
      <pubDate>Sat, 22 Jul 2017 19:32:46 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/random_distribution_sphere_surface/</guid>
      <description>球面上に一様分布するランダムな点を生成したい時、 単純に極座標表示でθとφを一様分布させると、極付近に点が集まってしまう。 data1=Transpose[{Sin[t]Cos[f],Sin[t]Sin[f],Cos[t]}/.{f-&amp;gt;RandomReal[{0,2Pi},2000],t-&amp;gt;RandomReal[{0,Pi},2000]}];g1=ListPointPlot3D[data1,BoxRatios-&amp;gt;{1,1,1}] 球面上で一様分布させるには、下記のようにθにArcCosを使う (θの位置の確率をSinθに比例させたい→累積確率分布関数はCos→逆関数はArcCos)。 data2=Transpose[{Sin[t]Cos[f],Sin[t]Sin[f],Cos[t]}/.{f-&amp;gt;RandomReal[{0,2Pi},2000],t-&amp;gt;ArcCos[RandomReal[{-1,1},2000]]}];g2=ListPointPlot3D[data2,BoxRatios-&amp;gt;{1,1,1}] なお、多次元球面上の一様分布は球面上に一様分布する乱数の生成にあるように、 多次元ガウス分布を正規化すると得られる。 下記は3</description>
    </item>
    
    <item>
      <title>Douglas-Peucker向けの優先度付きキュー実装の検討</title>
      <link>https://www.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</link>
      <pubDate>Thu, 29 May 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/implement-of-priority-queue-for-douglas-peucker-simplify-algorithm/</guid>
      <description>Nov. 29 2015: JavaScriptで実装した優先度付きキューをGitHubで公開→https://github.com/330k/priorityqueue_js/ 各ヒープのベンチマーク → http://330k.github.io/priorityqueue_js/benchmark.html これにはFibonacci Heapも比較対象に入れてある 折れ線を間引くで書いたように、 Douglas-Peuckerアルゴリズムを改良して指定した点数まで点を削減して折れ線を簡略化する場合、 優先度付きキューを使うことに</description>
    </item>
    
    <item>
      <title>陽的Runge-Kutta法のButcher tableau</title>
      <link>https://www.330k.info/essay/explicit-runge-kutta-butcher-tableau/</link>
      <pubDate>Sat, 05 Dec 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/explicit-runge-kutta-butcher-tableau/</guid>
      <description>Explicit Runge-Kutta法の公式はいくつか知られているが、高次の公式になるほどButcher配列の項数が増えるため論文に誤植が多くなる。 それに気づかないまま実際に使うと、プログラムは正しく組めているはずなのに思うように精度が上がらないという落とし穴にはまってしまう。 覚書として、以下に代表的と思われる公式のButcher tableauをまとめる。 以下のButcher tableauはMathemati</description>
    </item>
    
    <item>
      <title>多角形の内外判定</title>
      <link>https://www.330k.info/essay/takakugatanonaigaihantei/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/takakugatanonaigaihantei/</guid>
      <description>ある点が多角形の内側にあるのか外側にあるのかを判定するには主に ある点から直線をひいて多角形の辺と何回交差するか判定する(偶数回なら外、奇数回なら中) ある点から多角形の各頂点を順番に見ていったときに何回転するか の2つの方法がある。 しかし辺との交差回数をカウントするのは、直線と辺が平行だったり、頂点で交差したりする場合などに特別な配慮が必要なので、 ここでは2番目の方法で実装する。 点から多角形上の点を順</description>
    </item>
    
    <item>
      <title>折れ線を間引く</title>
      <link>https://www.330k.info/essay/oresenwomabiku/</link>
      <pubDate>Sat, 24 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/oresenwomabiku/</guid>
      <description>読み込んだGPSログのデータを間引きたい、と思って調べたところ、 (Ramer-)Douglas-Peuckerのアルゴリズムというものがあることが分かった。 基本的な考え方は、 折れ線の始点と終点を結ぶ線分と各点の距離を求める。 すべての点との距離が許容誤差ε以内に入っていれば始点と終点だけを返して終了。 そうでなければ距離が最大の点Pを1つ選択。 始点から点Pまでの折れ線と、点Pから終点までの折れ線のそれ</description>
    </item>
    
  </channel>
</rss>