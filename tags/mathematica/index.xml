<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathematica on 330k info</title>
    <link>https://www.330k.info/tags/mathematica/</link>
    <description>Recent content in Mathematica on 330k info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Sep 2016 07:14:00 +0900</lastBuildDate>
    
	<atom:link href="https://www.330k.info/tags/mathematica/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>m-241のバイナリデータからトラックログを吸い出す</title>
      <link>https://www.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</link>
      <pubDate>Thu, 22 Sep 2016 07:14:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</guid>
      <description>GPSロガー(Holux m-241)のメモリが破損しているのか、 実は6月30日と7月3日の軽井沢→直江津ツーリングと、9月の西九州→佐多岬ツーリングでは、 ログが破損していたため、Googleのロケーション履歴を代用している。
バイナリデータは一応吸い出せているようなので、その構造を調べると、 HOLUX m-241 LoggerUtility .trlファイル構造の覚書 より以下のような構造になっている。
 1レコード20バイトの固定長 時刻4バイト 緯度4バイト 経度4バイト 高度3バイト 速度4バイト チェックサム1バイト  また、m-241は時折書き込み先のメモリアドレスがずれることがあるようだ、との情報も見つかったため、 バイナリエディタで除いてみると、どうも4バイトずつずれて記録されたデータがあるようだった。
そこで
 レコードの先頭バイトを4バイトずつオフセットさせて読み込んでみる 緯度と経度が日本付近のものと思われるものを片っ端から拾う 時刻は整数型なのでとりあえず読み込む 高度、速度のデータは無視！  という方針でMathematicaのプログラムを書いてみた。
data = Table[Module[{str, ret}, str = OpenRead[&amp;quot;2016091200.bin&amp;quot;, BinaryFormat -&amp;gt; True]; (* 最初に余分にiバイト読み込んで先頭をずらす *) Do[ BinaryRead[str, &amp;quot;Byte&amp;quot;], {i} ]; (* バイナリ形式で読み込む *) ret = Cases[ MapIndexed[ {First[#2], Sequence @@ #1} &amp;amp;, BinaryReadList[ str, {&amp;quot;Integer32&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Byte&amp;quot;, &amp;quot;Real32&amp;quot;, &amp;quot;Byte&amp;quot;}] ], {count_, d_Integer, lat_Real, lon_Real, __} /; (30 &amp;lt; lat &amp;lt; 40 &amp;amp;&amp;amp; 125 &amp;lt; lon &amp;lt; 140) :&amp;gt; {count, DateString[DatePlus[{1970, 1, 1, 0, 0, 0}, {d, &amp;quot;Second&amp;quot;}], {&amp;quot;Year&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;Month&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;Day&amp;quot;, &amp;quot;T&amp;quot;, &amp;quot;Time&amp;quot;, &amp;quot;Z&amp;quot;}], lat, lon}]; Close[str]; ret ], {i, 0, 19, 4}];  ※ 2016091200.</description>
    </item>
    
    <item>
      <title>Compileで使用するCコンパイラを変更する</title>
      <link>https://www.330k.info/essay/change-c-compiler-in-mathematica/</link>
      <pubDate>Tue, 08 Dec 2015 17:40:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/change-c-compiler-in-mathematica/</guid>
      <description>Mathematica 8から、CompileでCコンパイラを使って直接ネイティブコードにコンパイルできるようになった。 使用するCコンパイラは、
Needs[&amp;quot;CCompilerDriver`&amp;quot;]; CCompilerDriver`$CCompiler = { &amp;quot;Name&amp;quot; -&amp;gt; &amp;quot;GCC&amp;quot;, &amp;quot;Compiler&amp;quot; -&amp;gt; CCompilerDriver`GCCCompiler`GCCCompiler, &amp;quot;CompilerInstallation&amp;quot; -&amp;gt; &amp;quot;/usr/bin&amp;quot;, &amp;quot;CompilerName&amp;quot; -&amp;gt; Automatic };  というように、CCompilerDriver`$CCompilerを変更して指定する。
以前からのCompile(&amp;ldquo;WVM&amp;rdquo;)と、各コンパイラの比較のため、ベンチマークを行ってみた。 検証環境は以下の通り。
 CPU: Intel Core-i7 3770 (インテル® HT テクノロジー ON) OS: Ubuntu 14.04 LTS 64bit Memory: 16 GB DDR3 1333 MHz  検証するCコンパイラは、GCC、Intel C++ Compiler、Clangの3種類。
 gcc: (Ubuntu 4.8.4-2ubuntu1~14.04) 4.8.4 icc: icc (ICC) 14.0.3 20140422 clang: Ubuntu clang version 3.4-1ubuntu3 (tags/RELEASE_34/final) (based on LLVM 3.4)  Mathematicaコードは以下。1/i^2を総和してπ^2/6を求める単純な計算を行った。 ※私の環境ではICCは/media/storage/intel/compserxe/binにインストールしているので下記コードを使用する場合は注意。</description>
    </item>
    
    <item>
      <title>3Dグラフィックスが正常に表示されない問題</title>
      <link>https://www.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</guid>
      <description>たまたま私の環境の問題かもしれないが、
 Intel Core-i7 3770 Ubuntu 14.04 LTS Mathematica 8.0.4 Home Edition  という環境で、Mathematicaのノートブック上でPlot3DなどのGraphics3Dオブジェクトが、 うまく表示できないことに悩まされていたが、その解決法が分かった。
メニューの「編集」→「環境設定」から、「詳細」タブを開き、「オプションインスペクタを開く」をクリック。  オプションインスペクタでは「グラフィックス設定」「RenderingOptions」内の&amp;rdquo;Graphics3DRenderingEngine&amp;rdquo;を デフォルトの&amp;rdquo;Automatic&amp;rdquo;から&amp;rdquo;Software&amp;rdquo;に変更する。  私の場合は以上で上手く行った。 Windowsではこのようなことはなかったのだが・・・。</description>
    </item>
    
    <item>
      <title>Mathematicaで論文用の図やグラフを作成するときのまとめ</title>
      <link>https://www.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</guid>
      <description>Mathematicaで作る図やグラフは美しいんだ！ということを伝えたいので、 もう数年も前になるが、修士論文を書くときにMathematicaで作るグラフにこだわった点を思い出しながらまとめてみる。
論文を書くために使うソフトウェア 私はpLaTeXで論文を書いたが、研究室ではWordが推奨されていた。 図表の番号を管理する必要や図表の位置がずれて飛んでいってしまうといった事態も起きないし、目次や索引、参考文献リストの作成も自動でできる。 ただ、Wordだと添削をしやすいのは確か。
MathematicaでExportする画像の形式 Mathematicaでは多様な画像ファイル形式でExportできるが、論文用のグラフでは多分PNG、EPS、PDFから選択することになると思う。 各画像形式を比較すると、それぞれ以下の特徴がある。
 PNG  ラスタ形式のため、印刷に耐えられるようにするには予め解像度を計算して作成する必要がある 半透過色に対応 Word、pLaTeXどちらでも使える  EPS  ベクタ形式で保存できるため、印刷では自動的にプリンタの解像度で印刷してくれる 半透過色には非対応 pLaTeXで使用可 あまりにEPS画像が多いと、dvipdfm(x)が重くなるので注意  PDF  ベクタ形式で保存できる 半透過色に対応 pLaTeXで使用可 pLaTeXで使うには、予めebbやxbbで.bbファイルや.xbbファイルを作成して、pLaTeXに画像の大きさを知らせる必要がある   したがって、Wordでは基本的に画像をPNG形式で作ることになるが、pLaTeXではEPSやPDFといったベクタ形式の画像フォーマットが使えるのでおすすめ。
私は基本的にMathematicaからPDFでグラフを作成し、 すべての画像に対してpLaTeXについてくるebbを実行するPerlスクリプトを作って実行してからpLaTeXでコンパイルしていた。
もちろん写真はJPEG形式を使用したが、写真にいろいろ矢印や記号を書き加えるときはOpenOffice.orgのImpressでJPEG画像の上にいろいろ矢印などを書き込んでPDFにエクスポートしたものを使った。 当時はPowerPointではPDF出力できなかったためOpenOffice.orgを使ったが、今ではPowerPointでいいと思う。
図・グラフの論文におけるサイズを決め、ImageSizeオプションを指定 おそらくほとんどの論文はA4サイズ(210mm×297mm)で作成されると思う。
そこから左右の余白をそれぞれ30mmとすると、本文の幅は150mmとなる。 図やグラフの幅は本文より少し小さくしたいので、私は基本的に横幅140mmでグラフを作成した。
縦幅はMathematicaではデフォルトで黄金比(GoldenRatio)を使ってくれるので、そのままで良いと思う。 2段組のときは半分の70mmとか65mmとなる。
したがってMathematicaでは、PlotやShowなどのオプションImageSizeに
ImageSize -&amp;gt; 140 * 72 / 25.4  と指定する。これは140mmの横幅で、72dpi(dots per inch)、1 inch = 25.4mmという意味である。
論文用のグラフでは絶対にFrame -&amp;gt; Trueを指定する 論文用のグラフでは流儀として
Frame -&amp;gt; True  を指定して枠のついたグラフにする。
これはExcelなどでグラフを作るときも同様。
枠についた目盛りを細かく調整したい場合は、FrameTicksオプションとFrameTickesStyleオプションを指定する。 また、FrameLabelで各軸のラベルと単位を書き入れるのも忘れずに。</description>
    </item>
    
    <item>
      <title>Mathematicaでパーセプトロンとバックプロパゲーション</title>
      <link>https://www.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</guid>
      <description>拙作のリバーシプログラムViglaは高校時代に作ったものだが、 評価関数は手の広さと辺の形を適当に数値化したものであるためにあまり強いプログラムにはできなかった。
当時から強いリバーシプログラムは辺や隅のパターンを評価していることは知ってはいたものの、理解出来ずじまいだった。
今回もう一度挑戦してみようと思い、まずはMathematicaでパーセプトロンとバックプロパゲーションによる学習を実装してみた。
簡単のため、出力関数としてはシグモイド関数のみに限定した(一般の関数にできるようにするには、各層のネット値を別に保存する必要があり、煩雑だったため)。 しかしながら、任意の隠し層の数やニューロン数に対応できるように実装した。
というわけで、まずはシグモイド関数と順方向演算を定義。
f[x_] := 1/(1 + Exp[-x]); perceptron[w : {__}][x_] := FoldList[(f /@ (Append[#1, 1].#2)) &amp;amp;, x, w];  wが各層の重み行列のリストで、MathematicaならFoldListを使って1行で順方向演算が定義できる。 Mathematicaでは添字が1から始まるので、通常wi0で表されることが多いバイアス成分は一番最後に置いた。
次に、重み行列をランダムに初期化したパーセプトロンを返す関数として、以下のcreatePerceptronを定義。
createPerceptron[dimensions_, range_] := perceptron[MapThread[ RandomReal[range, {#1, #2}] &amp;amp;, {Most[dimensions] + 1, Rest[dimensions]}]]  dimensionsは各層のニューロン数で、乱数の範囲をrangeで指定する。
例えば、入力層のニューロン数が2、隠し層のニューロン数が2、出力層のニューロン数が1の3層パーセプトロンで、 重みが-0.2から0.2までの乱数となるパーセプトロンは、以下のようにして得られる。
p = createPerceptron[{2, 2, 1}, {-0.2, 0.2}]  この初期状態で、入力層に{0, 0}を与えた時の出力は、
p[{0, 0}] {{0, 0}, {0.512507, 0.510116}, {0.497566}}  となる。2番目の要素が隠し層の値で、最後の{0.497566}が出力層の値である。
次に、バックプロパゲーションによる学習を実装する。
backPropagation[pct : perceptron[w : {__}], x_List, teach_List, rate_: 1] := Module[{out, \[Delta], \[Delta]n, \[CapitalDelta]w}, out = pct[x]; \[Delta]n = With[{y = Last[out]}, (teach - y) y (1 - y)]; \[Delta] = Reverse@FoldList[(Most[#2[[2]]].</description>
    </item>
    
    <item>
      <title>GeoDistanceとその他の測地線距離算出式の精度</title>
      <link>https://www.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</guid>
      <description>Mathematicaには2点の緯度と経度を与えて、その間の測地線距離を返す関数としてGeoDistanceがある。 しかしながら、ここで書かれているように、その精度には疑問が呈されているようだ。
他の有名な測地線距離の計算方法として、
 ヒュベニの式(カシミール3Dが採用しているが、英語圏では情報が見つからない) 国土地理院の測量計算サイトの計算式のついてのドキュメントを実装したもの 完全な球体とみなして計算(Google EarthやGoogle Maps API v3のcomputeDistanceBetweenが採用、haversine formula)  が見つかったので、GeoDistanceのMethodオプション3種類(&amp;ldquo;Vincenty75&amp;rdquo;, &amp;ldquo;Robbin61&amp;rdquo;, &amp;ldquo;ExtendedNewtonRaphson&amp;rdquo;)と上記の3種類の計算方法の合計6種類について精度を評価してみた。
正確な距離としては、GeographicLib (Wikipediaによると誤差15nmらしい)をJLink経由で使って計算したもの採用し、準拠楕円体はWGS84とした。
ただし、完全な球体とした場合の半径はGoogle EarthやGoogle Mapsにあわせて6378137 mとした。
ランダムな2点間の距離の精度 地球表面上で一様分布となるよう、ランダムに2点を選び、その間の距離の精度を評価した。
 上図は横軸がGeographicLibで計算した正確な距離、縦軸が各計算方法で計算した距離である。
y = xの直線上にあれば正確ということだが、GeoDistanceの&amp;rdquo;Robbin61&amp;rdquo;では1万kmを超えると実際よりも極端に短く計算してしまうようだ。
またヒュベニの式は実際よりも長く計算することが多く、そのような場合について調べてみると高緯度になるほど誤差が大きくなることが分かった。
同じ計算結果を誤差についてプロットしたものが下図である。また表は各計算方法の最大誤差である。
    計算方法 誤差の絶対値     GeoDistance(&amp;ldquo;Vincenty75&amp;rdquo;) 7.119 * 10^-12   GeoDistance(&amp;ldquo;Robbin61&amp;rdquo;) 9.536 * 10^-1   GeoDistance(&amp;ldquo;ExtendedNewtonRaphson&amp;rdquo;) 1.247 * 10^-6   ヒュベニの式 2.022 * 10^1   測量計算サイト計算式 6.682 * 10^-3   完全球体モデル 6.</description>
    </item>
    
    <item>
      <title>Wolfram CDF Playerでローカルファイルの読み込みと書き込みを行う</title>
      <link>https://www.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</guid>
      <description>[Wolfram CDF Player を汎用する]()にあるように、 CDF PlayerでもJ/Linkを使えばローカルファイルの読み込み、書き込みができる(※CDFファイルの作成にはMathematicaが必要)。
上記リンク先ではテキストファイルを読み込む例が載っているが、バイナリファイルとして読み込んでImportStringを使えば、 Mathematicaが対応している形式すべてのファイルを読み込むことができる。
J/Linkでバイナリファイルを読み込むときのポイントとしては、
 &amp;ldquo;[B&amp;rdquo;というクラス名でbyte型の配列を作ってBufferedInputStream.read(byte[])で一気に読み込むことで高速化 読み込んだbyte[]がMathematicaに入った時に符号付き整数で扱われるため、FromCharacterCodeに突っ込む前に0〜255になるように修正  が挙げられる。
一方、CDF PlayerではExportのみならずExportStringが使えない(ImportStringは使えるのに)ので、書き込むほうは不自由が残る。 ここではテキストと画像(BMP、PNG、JPEG)に限って保存する関数を作ってみた。
ImportWithJLink[filepath_?(FileExistsQ[FindFile[#]] &amp;amp;), format_] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ Module[{br, byte, result}, br = JLink`JavaNew[&amp;quot;java.io.BufferedInputStream&amp;quot;, JLink`JavaNew[&amp;quot;java.io.FileInputStream&amp;quot;, FindFile@filepath]]; byte = JLink`JavaNew[&amp;quot;[B&amp;quot;, {FileByteCount[FindFile@filepath]}]; br@read[byte]; result = ImportString[ FromCharacterCode[ JLink`JavaObjectToExpression[byte] /. x_?Negative :&amp;gt; x + 256], format]; br@close[]; result]]); ExportWithJLink[filepath_, string_String, format : &amp;quot;Text&amp;quot;] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ Module[{bw}, bw = JLink`JavaNew[&amp;quot;java.io.BufferedWriter&amp;quot;, JLink`JavaNew[&amp;quot;java.io.FileWriter&amp;quot;, filepath] ]; bw@write[string]; bw@close[]; filepath ] ]); ExportWithJLink[filepath_, image_, format : &amp;quot;PNG&amp;quot; | &amp;quot;BMP&amp;quot; | &amp;quot;JPG&amp;quot;] := ( Needs[&amp;quot;JLink`&amp;quot;]; JLink`InstallJava[]; JLink`JavaBlock[ JLink`LoadJavaClass[&amp;quot;javax.</description>
    </item>
    
    <item>
      <title>ffmpeg&#43;Mathematicaで動画ファイルを作成する</title>
      <link>https://www.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</link>
      <pubDate>Fri, 27 Sep 2013 00:04:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</guid>
      <description>MathematicaのExportでAVIなどの動画ファイルを作成することは簡単に可能だが、 いかんせんすべてのフレームの画像を作成してからファイルに書きだすので、フレーム数に比例してメモリの使用量が多くなってしまう。 そのため長いムービーの作成は困難であった。
そこで、ffmpeg(avconv)と併用することでメモリ使用量を抑えつつ、長編の動画ファイルを制作する。 具体的には、
 ffmpegで標準入力から読み込ませるOutputStreamオブジェクトを作成する BinaryWriteでそのストリームに各フレームの画像を書き込む 終わったらCloseでストリームを閉じる  とする。ここで、各フレーム画像の形式をPPMにしないとうまく動作しなかった(BMP、PNGなどではなぜか動作せず)。
例えば、以下のようにするとtest001.aviができあがる。
s = OpenWrite[ &amp;quot;!ffmpeg -y -vcodec ppm -f image2pipe -i - -vcodec rawvideo test001.avi&amp;quot;, BinaryFormat -&amp;gt; True]; Do[ BinaryWrite[s, ExportString[ Plot[Sin[x + i], {x, 0, 2 Pi} , ImageSize -&amp;gt; {640, 480} , PlotRange -&amp;gt; {{0, 2 Pi}, {-1, 1}} , Frame -&amp;gt; True] , &amp;quot;PPM&amp;quot;]] , {i, 0, 2 Pi, Pi/50} ]; Close[s]  Exportと同じような使い勝手の関数ExportMovieを作るとこんな感じになる。
Options[ExportMovie] = { &amp;quot;FrameRate&amp;quot; -&amp;gt; 25, &amp;quot;VideoCodecOption&amp;quot; -&amp;gt; &amp;quot;-vcodec rawvideo&amp;quot;, &amp;quot;ExportOptions&amp;quot; -&amp;gt; {} }; ExportMovie[outputfilepath_String, expr_, {i_Symbol, imin_: 1, imax_, di_: 1}, OptionsPattern[]] := Module[{stream}, stream = OpenWrite[ ToString[ StringForm[ &amp;quot;!</description>
    </item>
    
    <item>
      <title>MathematicaからSQLiteでBLOBとマルチバイト文字列を扱う</title>
      <link>https://www.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</guid>
      <description>ドキュメントにはないものの、MathematicaではSQLiteを扱うことができる。 しかしながら、BLOB型や文字列で日本語などを扱うには少し工夫が必要なので、メモ。
BLOB型 select 直接BLOB型をselectすると$Failedが返ってくるので、hex関数で16進文字列として返す。
db = Database`OpenDatabase[sqlitefilepath]; rs = Database`QueryDatabase[db, &amp;quot;select hex(column_name) from table_name&amp;quot;];  これを16進文字列→数値→バイト列→文字列と変換して、最後にImportStringで読み込むと、Mathematicaで読み込める。
ImportSQLiteBLOB[hex_, format_] := ImportString[ FromCharacterCode[IntegerDigits[FromDigits[hex, 16], 256]], format]; ImportSQLiteBLOB[rs[[1, 1]], &amp;quot;PNG&amp;quot;]  insert insertする場合には逆に、データをExportStringで文字列に変換→バイト列→16進文字列と変換し&amp;rdquo;x&amp;rsquo;&amp;ldquo;と&amp;rdquo;&amp;lsquo;&amp;ldquo;で囲う。
ExportSQLiteBLOB[expr_, format_] := StringJoin[&amp;quot;x&#39;&amp;quot;, IntegerString[ToCharacterCode[ExportString[expr, format]], 16, 2], &amp;quot;&#39;&amp;quot;]; Database`QueryDatabase[db, &amp;quot;insert into table_name values (&amp;quot; &amp;lt;&amp;gt; ExportSQLiteBLOB[Plot[Sin[x], {x, 0, Pi}], &amp;quot;PNG&amp;quot;] &amp;lt;&amp;gt; &amp;quot;)&amp;quot;];  マルチバイト文字列 select 日本語などマルチバイト文字列が入っていても適切に変換してくれないので、自前で変換する。
ImportSQLiteString[str_] := FromCharacterCode[ToCharacterCode[str], &amp;quot;UTF8&amp;quot;]; rs = Database`QueryDatabase[db, &amp;quot;select column_name from table_name&amp;quot;]; ImportSQLiteString[rs[[1, 1]]]  insert そのまま突っ込むとエラーが出るので、変換してから突っ込む。ついでにシングルクォーテーションをエスケープしておく。</description>
    </item>
    
    <item>
      <title>Mathematica on Ubuntu 12.04 LTSで日本語関連のトラブル</title>
      <link>https://www.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</guid>
      <description>Mathematica 8 Home Edition 日本語版をUbuntu 12.04 LTS 64bit版にインストールしたところ、
 ディレクトリ、ファイル名に日本語が含まれるノートブックファイル(.nb)を開けない ディレクトリ、ファイル名に日本語が含まれるとImport/Exportできない、FileNamesで列挙できない ノートブック中に日本語を入力できない $SystemCharacterEncoding、$CharacterEncodingが&amp;rdquo;EUC-JP&amp;rdquo;になっている  などの言語関連の不具合があった。
これから作るノートブックは英語だけで書けば済むが、今までに作ったノートブックファイルが開けないのがつらい。 一応Wolframのサポートにはメールを出したが、期待できそうになかった。
/usr/local/Wolram/以下のファイルで関係有りそうなものを試行錯誤していじった結果、以下の方法で対処できたのでメモ。
 /usr/local/Wolfram/Mathematica/8.0/Executables以下の起動用スクリプトファイルMathematica、mathematicaの「LANG=ja_JP.eucJP」を「LANG=en_US.UTF-8」などに適当に変更orコメントアウト /usr/local/Wolfram/Mathematica/8.0/SystemFiles/CharacterEncodings/UTF-8.mの内容をISO8859-1.mにコピー  $SystemCharacterEncoding、$CharacterEncodingは&amp;rdquo;ISO8859-1&amp;rdquo;になってしまうのが気持ち悪いが、とりあえず実用上問題がなくなった。
あとは本当にISO8859-1の文字コードで書かれたファイルを読み込むことができなくなってしまうが、扱う機会はないので良しとする。
Oct. 7 2016 追記
4年越しにWolfram Researchから連絡が来た。
 In May 2012 you reported an issue with Mathematica wherein Mathematica was unable to open files from folders with non-English cahracters in the name. We believe that the issue has been resolved in the current release of Mathematica.
Thank you for your report and we look forward to a continued, productive relationship with you.</description>
    </item>
    
    <item>
      <title>Mathematicaにおけるプログラムの高速化手法</title>
      <link>https://www.330k.info/essay/how-to-optimize-mathematica-programs/</link>
      <pubDate>Mon, 14 Dec 2009 22:39:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/how-to-optimize-mathematica-programs/</guid>
      <description>Mathematicaにおいてプログラムの実行速度を最適化する際の項目を思いつく限り挙げてみた。 高速化に関する公式のドキュメントはこちら。
関数型パラダイムで書く 必然的に組み込み関数を多く使い、リストをまとめて操作することになるので手続き型で書くより速くなることが多い。 コード量も少なくなって読みやすくなるので、よほどのことでない限りMathematicaでは関数型で書く。
具体的には、手続き型ループ構文(Do, For, Whileなど)をやめて、MapやThreadを使うようにする。
出来る限り組み込みの関数を使う 組み込み関数でできることは出来る限りやらせる。 ドキュメントを探すと、Mathematicaは意外と多くのものが組み込みでできるようになっている。
リストは全体をまとめて扱う 大概のループの中身はリストへの関数の適用や、テンソルの演算などに帰着する。
四則演算はリストにそのまま適用可能。 内積はDot、外積はCrossがあるし、それらを一般化したInner、Outerといった関数もある。
Mathematicaでは個々の要素に対する操作は記述しなくてもよい場合が多い。
myDifferences1[v_] := Table[v[[i + 1]] - v[[i]], {i, Length[v] - 1}]; (* 個々の要素を操作する *) myDifferences2[v_] := Most[RotateLeft[v] - v]; (* リスト全体をまとめて操作する *) {Timing[myDifferences1[#];], Timing[myDifferences2[#];], Timing[Differences[#];]} &amp;amp;[RandomReal[{0, 5}, 5000000]] {{1.919, Null}, {0.296, Null}, {0.187, Null}}  リストの要素数変更を避ける 手続き型で要素数が分からないリストを生成するには、ReapとSowを用いる。AppendToやPrependToは厳禁。
myPrimeChoice1[n_] := Module[{r = {}, i}, Do[If[PrimeQ[i], AppendTo[r, i]], {i, n}]; r]; myPrimeChoice2[n_] := Module[{i}, Reap[Do[If[PrimeQ[i], Sow[i]], {i, n}]][[2, 1]]]; {Timing[myPrimeChoice1[200000];], Timing[myPrimeChoice2[200000];]} {{3.</description>
    </item>
    
    <item>
      <title>Mathematica 7でImportおよびExportを拡張する</title>
      <link>https://www.330k.info/essay/extend-import-and-export-of-mathematica7/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/extend-import-and-export-of-mathematica7/</guid>
      <description>MathematicaではImportやExportを使って様々な形式のファイルを読み書きできるが、 標準で対応していないファイル形式についても自分でローダやライタを作り、 それをImportやExportに対応させる方法がExtending Import &amp;amp; Export (Wolfram Library Archive)において解説されている。
しかしこの文書は2003年のもので以前はExperimental`RegisterConverterという関数で登録すればよかったのだが、 この関数はMathematica 7にはない。
Names[&amp;quot;*`*Register*&amp;quot;]  などとして探し回ったところ、
 ImportExport`RegisterFormat ImportExport`RegisterExport ImportExport`RegisterImport  というそれらしいものを見つけた。
早速
ClearAttributes[ImportExport`RegisterFormat, ReadProtected]  として読込みプロテクトを解除してどういう動作をするのか調べたところ、
 ImportExport`RegisterFormat[&amp;ldquo;ファイルフォーマット名&amp;rdquo;]としてファイルフォーマットを登録 ImportExport`RegisterImport[&amp;ldquo;ファイルフォーマット名&amp;rdquo;, myImport]で自前のローダmyImportをImportに登録 ImportExport`RegisterExport[&amp;ldquo;ファイルフォーマット名&amp;rdquo;, myExport]で自前のライタmyExportをExportに登録  という使い方をするようだ。ファイルフォーマット名は&amp;rdquo;GPX&amp;rdquo;でも&amp;rdquo;KML&amp;rdquo;でも&amp;rdquo;JSON&amp;rdquo;でも好きな名前を付けていい。
myImportやmyExportの書式は以前と変わっていないようで、
myImport[filename_String, options___?OptionQ] := Module[{...},...] myExport[filename_String, expression_, options___?OptionQ] := Module[{...},...]  でいい模様。
ImportExport`RegisterFormatには以下のオプションがある。
 BinaryFormat : バイナリファイルならTrue、そうでなければFalse。 ImportExport`Encoding : よくわからないが、標準では&amp;rdquo;BASE64&amp;rdquo;、&amp;rdquo;BZIP2&amp;rdquo;、&amp;rdquo;GZIP&amp;rdquo;、&amp;rdquo;UUE&amp;rdquo;だけでTrueになっている。 ImportExport`Extensions : 対応する拡張子またはそのリスト。{&amp;rdquo;.nb&amp;rdquo;,&amp;rdquo;.html&amp;rdquo;}などと指定する。 AlphaChannel : アルファチャンネルを使う画像かどうか？Exportの際のラスタライズに関係するかも。JPEG2000やPNGなどでTrueになっている。  ただ、ImportExportExtensionsに拡張子を指定して登録しても、Exportでは大丈夫だがImportではうまく判別されない。 ImportExportRegisterImportの動作についてもう少し調べる必要がある。
Wolfram Researchが新しいドキュメントを出してくれれば早いのだけれど…。
Feb. 20 2010追記
Importで自動判別させる方法が判明。
FileFormatDump`AddFormat[&amp;quot;ファイルフォーマット名&amp;quot;, bin, bundle, archive, encoding, magic, ext, mime, test, bundletestfunc]  として、判別するときに用いられる関数のほか、MIMEタイプも登録できる模様。</description>
    </item>
    
    <item>
      <title>多角形の内外判定</title>
      <link>https://www.330k.info/essay/takakugatanonaigaihantei/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/takakugatanonaigaihantei/</guid>
      <description>ある点が多角形の内側にあるのか外側にあるのかを判定するには主に
 ある点から直線をひいて多角形の辺と何回交差するか判定する(偶数回なら外、奇数回なら中) ある点から多角形の各頂点を順番に見ていったときに何回転するか  の2つの方法がある。
しかし辺との交差回数をカウントするのは、直線と辺が平行だったり、頂点で交差したりする場合などに特別な配慮が必要なので、 ここでは2番目の方法で実装する。
点から多角形上の点を順々に見たときの偏角(反時計まわりを正とする)の和を取ればよいので、ある点Pからみた多角形上の頂点Aから頂点Bまでの偏角∠APBを求める関数をまず作成する。
この実装方法にもベクトルの外積を考えるなど何通りか考えられるが、せっかくMathematicaを使うので楽をして、複素数にしてArgで偏角をとることにする。
Angle[{{x1_, y1_}, {x2_, y2_}, {x3_, y3_}}] := Module[{v1 = Complex[x1 - x3, y1 - y3], v2 = Complex[x2 - x3, y2 - y3]}, If[TrueQ[v1 == 0], 0, Arg[v2/v1]] ]  多角形の内外判定はMathematicaのPolygonなどの表示に合わせ、自己交差している場合は内部と外部を交互に繰り返すものとすると、
 偏角の和が0、±4π、±8π、…のとき点は多角形の外 偏角の和が±2π、±6π、±10π…のとき点は多角形の中  とできる。
以上より多角形の内外を判定する関数InsidePolygonQは以下のように実装できる。
InsidePolygonQ[poly : {{_, _} ..}, p : {_, _}] := Module[ {argsum}, argsum = Round[Total[MapThread[Angle[{##, p}] &amp;amp;, {poly, RotateLeft[poly]}]]/(2 Pi)]; OddQ[argsum] ]  丸め誤差が蓄積すると誤判定してしまうのだが、誤判定するために要求される丸め誤差はπなので、多分大丈夫だと思われる。</description>
    </item>
    
    <item>
      <title>16ビットアプリケーションの標準入出力をリダイレクト</title>
      <link>https://www.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</link>
      <pubDate>Mon, 26 Oct 2009 21:47:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</guid>
      <description>FORTRANで書かれた古いMS-DOSプログラムを.NET/Linkを使ってMathematicaから操るパッケージを作っていたところ、 Process.StartInfo.RedirectStandardInputやRedirectStandardOutputにTrueを設定してもまったく標準入出力をリダイレクトできなかった。(※OSはVista 32bit)
いろいろ試してみたところ、16ビットのプログラムだとリダイレクトができないらしいということが分かった。 さてどうしたものかとさらにいろいろ打開策を探してみた結果、
 FileNameに&amp;quot;cmd.exe&amp;quot;を設定して、Process.Start()でプロセスを起動。 必要ならStandardInput.WriteLine(&amp;quot;cd 16ビットプログラムのディレクトリ&amp;quot;)としてカレントディレクトリを移動。 StandardInput.WriteLine(&amp;quot;***.EXE&amp;quot;)として16ビットプログラムを起動。  とcmd.exeを間に挟むことにより、16ビットのプログラムに対しても標準入出力のリダイレクトが行えることが分かった。
以下はMathematica+.NET/Linkによるサンプル。 標準出力は書き出されるたびにイベントハンドラで捕捉してoutputsに追加するので、Dynamic[outputs]などとしておくと、本当のターミナルの挙動に近づく。 最初にcmd.exeの出力(&amp;ldquo;Microsoft Windows [Version &amp;hellip;&amp;ldquo;)が入るので、16ビットのプログラムの出力だけがほしい場合は16ビットプログラム起動後にフラグを立てれば大丈夫。
outputs = {}; outputhandler[o_, args_] := Module[ {data = args@Data}, AppendTo[outputs, data]; ]; NETBlock[ proc = NETNew[&amp;quot;System.Diagnostics.Process&amp;quot;]; LoadNETType[&amp;quot;System.Environment&amp;quot;]; proc@StartInfo@FileName = Environment`GetEnvironmentVariable[&amp;quot;ComSpec&amp;quot;]; proc@StartInfo@RedirectStandardInput = True; proc@StartInfo@RedirectStandardOutput = True; proc@StartInfo@UseShellExecute = False; proc@StartInfo@CreateNoWindow = True; proc@StartInfo@WorkingDirectory = DirectoryName[proc@StartInfo@FileName]; AddEventHandler[proc@OutputDataReceived, outputhandler]; proc@Start[]; proc@BeginOutputReadLine[]; proc@StandardInput@WriteLine[&amp;quot;cd &amp;quot; &amp;lt;&amp;gt; &amp;quot;16ビットプログラムのディレクトリ&amp;quot;]; proc@StandardInput@WriteLine[&amp;quot;******.EXE(16ビットプログラム)&amp;quot;]; proc@StandardInput@WriteLine[&amp;quot;16ビットプログラムの標準入力に渡す内容&amp;quot;]; proc@StandardInput@Close[]; proc@WaitForExit[]; proc@Close[]; ];  とはいっても64bit版のWindowsだと16bitのプログラムがそもそも動かない。</description>
    </item>
    
    <item>
      <title>GPXファイルを読み込む</title>
      <link>https://www.330k.info/essay/import-gpx-file-in-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/import-gpx-file-in-mathematica/</guid>
      <description>MathematicaでGPXファイルを読み込んで解釈する方法のメモ。
対象となるGPXファイルを
xml = Import[filepath, &amp;quot;XML&amp;quot;];  でまずXMLとして読み込んでおいて、
trk = Cases[xml, XMLElement[&amp;quot;trk&amp;quot;, _, _], Infinity];  でtrk要素を抜き出し、
trkpt = (ToExpression[{&amp;quot;lat&amp;quot;, &amp;quot;lon&amp;quot;} /. Cases[#1, XMLElement[&amp;quot;trkpt&amp;quot;, attr_, _] :&amp;gt; attr, Infinity]] &amp;amp; ) /@ trk;  でそれぞれのtrk要素からtrkpt要素を抜き出して緯度と経度を得る。
Sep. 28 2013追記
Mathematica 8からは標準でGPXをImport可能になった。</description>
    </item>
    
    <item>
      <title>友愛数を列挙する</title>
      <link>https://www.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</guid>
      <description>Mathematicaで友愛数を列挙するプログラム例として以下のようなものが見受けられる。
yakuwa[n_] := DivisorSigma[1, n] - n; Do[If[(yakuwa[yakuwa[k]] == k) &amp;amp;&amp;amp; (yakuwa[k] != k), Print[{k, yakuwa[k]}]], {k, 1, 1000}];  しかし、Doでループを回してPrintで書き出していくのはMathematica的に美しくないと思う。
Mathematicaなら関数型プログラミングとパターンマッチを用いるのが良いと思うので、私なら以下のように書く。
Cases[NestList[DivisorSigma[1, #] - # &amp;amp;, #, 2] &amp;amp; /@ Range[100000], {a_, b_, a_} /; a &amp;lt; b -&amp;gt; {a, b}]  実行速度もこちらのほうが1割程度速い。
この書き方から一般の社交数を求めるプログラムに拡張するのは簡単で、例えば5個組の社交数を探す場合は以下のようになる。
Cases[NestList[DivisorSigma[1, #] - # &amp;amp;, #, 5] &amp;amp; /@ Range[100000], {a_, b__, a_} /; a &amp;lt; Min[b] -&amp;gt; {a, b}]  ただし、私の方法はメモリを大量に使う。</description>
    </item>
    
    <item>
      <title>折れ線を間引く</title>
      <link>https://www.330k.info/essay/oresenwomabiku/</link>
      <pubDate>Sat, 24 Oct 2009 00:00:00 +0900</pubDate>
      
      <guid>https://www.330k.info/essay/oresenwomabiku/</guid>
      <description>読み込んだGPSログのデータを間引きたい、と思って調べたところ、 (Ramer-)Douglas-Peuckerのアルゴリズムというものがあることが分かった。
基本的な考え方は、
 折れ線の始点と終点を結ぶ線分と各点の距離を求める。 すべての点との距離が許容誤差ε以内に入っていれば始点と終点だけを返して終了。 そうでなければ距離が最大の点Pを1つ選択。 始点から点Pまでの折れ線と、点Pから終点までの折れ線のそれぞれについてまた1から処理する。  という再帰的なもの。
再帰的なものはMathematicaの得意分野なので、MathematicaでRamer-Douglas-Peuckerのアルゴリズムを実装してみた。
線分と点の距離 さて、まずは線分と点の距離を求める関数を作成する。
ネットで検索すると直線と点の距離を求めるものが多いが、線分と点の距離のほうが形状をよく保存できるのではないだろうか、と個人的に考えている。
線分ABに点Pから下ろした垂線の足が点Hだとすると、
 線分ABと直線PHは直交⇔内積が0 点Hは直線AB上にある⇔実数tに対してB = t H(B、Hは点Aから見た点B、点Hの位置ベクトル)  の条件から、Hの座標と実数tの値が求まる。 Mathematicaを使うと
A = {ax, ay}; B = {bx, by}; P = {px, py}; H = {x, y}; Solve[{ (H - A).(P - H) == 0, H == A + (B - A) t }, {x, y, t}][[2]] // FullSimplify {x -&amp;gt; (ay^2 bx + ax^2 px + ax ay (-by + py) - ay bx (by + py) + ax (by^2 - 2 bx px - by py) + bx (bx px + by py))/((ax - bx)^2 + (ay - by)^2), y -&amp;gt; ((ax - bx) (by (ax - px) + ay (-bx + px)) + (ay - by)^2 py)/((ax - bx)^2 + (ay - by)^2), t -&amp;gt; (ax^2 + ay^2 + bx px - ax (bx + px) + by py - ay (by + py))/((ax - bx)^2 + (ay - by)^2)}  となる。 これは2次元の場合だが、一般に</description>
    </item>
    
  </channel>
</rss>