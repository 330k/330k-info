<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathematica on 330k info</title>
    <link>https://www.330k.info/tags/mathematica/</link>
    <description>Recent content in Mathematica on 330k info</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Thu, 22 May 2025 00:00:19 +0900</lastBuildDate>
    <atom:link href="https://www.330k.info/tags/mathematica/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>どこからでもWolfram Engine &#43; JupyterLabにアクセスできる環境を構築する</title>
      <link>https://www.330k.info/essay/wolfram-jupyterlab-cloudflared/</link>
      <pubDate>Wed, 21 May 2025 22:26:45 +0900</pubDate>
      <guid>https://www.330k.info/essay/wolfram-jupyterlab-cloudflared/</guid>
      <description>&lt;p&gt;無料で使えるWolfram EngineをJupyterLabと組み合わせることでMathematicaっぽいノートブック環境を構築できる。&lt;/p&gt;&#xA;&lt;p&gt;ただ、既存のやり方では環境構築に結構手間がかかるほか、起動時に毎回トークンをブラウザにコピペする必要があった。&lt;/p&gt;&#xA;&lt;p&gt;そこで認証機能はCloudflare Accessに任せることで起動時のトークン入力を省略し、&#xA;またCloudflare Tunnelと組み合わせることでどこからでもアクセスできるようにしつつ、&#xA;docker composeを使ってコンテナに格納してしまうことで可搬性を高めた環境を構築してみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mathematicaで内部処理を隠蔽する</title>
      <link>https://www.330k.info/essay/hide-internal-procedure-in-mathematica/</link>
      <pubDate>Fri, 28 Oct 2022 15:20:32 +0900</pubDate>
      <guid>https://www.330k.info/essay/hide-internal-procedure-in-mathematica/</guid>
      <description>&lt;p&gt;Mathematicaのシンボルにはいくつかの属性を設定でき、&lt;code&gt;ReadProtected&lt;/code&gt;属性を付与することで定義を隠蔽することができるが、&#xA;&lt;code&gt;DownValues&lt;/code&gt;や&lt;code&gt;UpValues&lt;/code&gt;を使うことで定義を表示することができる他、&lt;code&gt;Trace&lt;/code&gt;や&lt;code&gt;TracePrint&lt;/code&gt;を使うことで内部処理を追跡することが可能である。&lt;/p&gt;&#xA;&lt;p&gt;そこで、&lt;code&gt;ReadProtected&lt;/code&gt;属性に加えて&lt;code&gt;Locked&lt;/code&gt;属性を付与することで内部処理を隠蔽することができる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>測地線距離計算式・計算ライブラリの精度評価 </title>
      <link>https://www.330k.info/essay/geodesic_distance_formula_comparison_2/</link>
      <pubDate>Thu, 17 Mar 2022 01:13:49 +0900</pubDate>
      <guid>https://www.330k.info/essay/geodesic_distance_formula_comparison_2/</guid>
      <description>&lt;p&gt;2地点の緯度経度を与えてその間の距離を求める計算式はいくつかあり、&#xA;&lt;a href=&#34;https://www.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/&#34;&gt;GeoDistanceとその他の測地線距離算出式の精度&lt;/a&gt;&#xA;ではランダムな2点間の距離や、日本での運転経路データを用いて代表的な計算式の精度を評価したが、&#xA;短い距離の計算精度の評価と、対蹠点付近の計算精度の評価が不十分であった。&lt;/p&gt;&#xA;&lt;p&gt;そこで、比較する計算式を追加した上で、GeographicLibのテストデータを用いて計算精度の再評価を行った。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mathematicaプログラムの難読化・隠しメッセージ埋め込み手法の検討</title>
      <link>https://www.330k.info/essay/obfuscate-mathematica-program/</link>
      <pubDate>Mon, 29 Nov 2021 20:39:12 +0900</pubDate>
      <guid>https://www.330k.info/essay/obfuscate-mathematica-program/</guid>
      <description>&lt;p&gt;Mathematicaのプログラムを難読化し、またそこに隠しメッセージを埋め込む手法をいくつか検討してみた。&lt;/p&gt;&#xA;&lt;p&gt;円周率をモンテカルロ法で求めるプログラムを難読化し、隠しメッセージを埋め込む例をいくつか考えた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UbuntuでMathematicaノートブックを関連付ける</title>
      <link>https://www.330k.info/essay/open-mathematica-notebook-in-ubuntu/</link>
      <pubDate>Fri, 07 May 2021 21:01:21 +0900</pubDate>
      <guid>https://www.330k.info/essay/open-mathematica-notebook-in-ubuntu/</guid>
      <description>&lt;p&gt;Ubuntuのアップデート時にMathematicaノートブックをNautilusから起動できなくなってしまって少し面倒だったので、再度設定を行った。&lt;/p&gt;&#xA;&lt;p&gt;ついでに、すでにMathematicaが起動している時に2つ目のノートブックをNautilusから開いた時、デフォルトでは別プロセスのMathematicaが起動してしまってライセンスが要求されてしまう点にも対処した。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mathematicaの特殊・省略記法一覧</title>
      <link>https://www.330k.info/essay/mathematica-special-notation/</link>
      <pubDate>Tue, 22 May 2018 04:34:15 +0900</pubDate>
      <guid>https://www.330k.info/essay/mathematica-special-notation/</guid>
      <description>Mathematicaの省略記法はドキュメントやヘルプで調べにくいのでまとめてみる。 関数適用 @ (前置記法) f@aはf[a]と等価。 後ろのカッコ(])を入力しなくてもすむ。 Plot[Evaluate@Integrate[x^2, x], {x, -3, 3}] // (後置記法) a // fはf[a]と等価。 数値にする(N)や簡約化(Simplify、FullSimplify)でよく使う。 In[1]:= Sin[2] // N Out[1]= 0.909297 ~ ~ (中置記法) a~f~bとすると、f[a, b]と等価になる。 In[1]:= {1, 2}~Join~{3, 4} Out[1]= {1, 2, 3, 4} 関数適用</description>
    </item>
    <item>
      <title>GeForce 1060搭載ノートPCにUbuntu 17.10 &#43; NVIDIAドライバ &#43; CUDA &#43; Mathematia 8をインストール</title>
      <link>https://www.330k.info/essay/ubuntu_nvidia_cuda_mathematica_geforce1060/</link>
      <pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/ubuntu_nvidia_cuda_mathematica_geforce1060/</guid>
      <description>MathematicaからCUDAを使いたかったので、GPU搭載のノートPCを購入してセットアップした。 購入PC PC工房のGeForce 1060搭載ノートPC(OSなし) : STYLE-15FX093-i7-RNFR [OS LESS] CPU: Intel Core i7-7700HQ 2.8GHz Memory: 16GB Storage: SSD 240GB + HDD 2TB GPU: NVIDIA GeForce 1060 6GB Ubuntu 17.10 日本語Remixをダウンロード 旧PC(Ubuntu 16.04)で Ubuntu Desktop 日本語 Remixのダウンロードから、ubuntu-ja-17.10-desktop-amd64.isoをダウンロー</description>
    </item>
    <item>
      <title>Unicode制御文字(LRO, RLO)でコピー・改変を防止 (構想)</title>
      <link>https://www.330k.info/essay/scramble_unicode_lro_rlo/</link>
      <pubDate>Mon, 21 Aug 2017 22:38:20 +0900</pubDate>
      <guid>https://www.330k.info/essay/scramble_unicode_lro_rlo/</guid>
      <description>Unicode制御文字のうち、LRO(Left-to-right override, U+202D)とRLO(Right-to-left override, U+202E)は行中でも文字列の方向を変更する。 1行の中に何度もLROとRLOが入ると、カーソルキーが踊って楽しいことになる。 例えば、下のテキストの中でカーソルを動かしたり、文字列を選択しようとしても上手くできないはず。 ‮‭い‮を‭ろ‮る‭は‮ぬ‭に‮り‭ほ‮ち‭へ‮と ‮‭わ‮む‭</description>
    </item>
    <item>
      <title>球面上の一様分布</title>
      <link>https://www.330k.info/essay/random_distribution_sphere_surface/</link>
      <pubDate>Sat, 22 Jul 2017 19:32:46 +0900</pubDate>
      <guid>https://www.330k.info/essay/random_distribution_sphere_surface/</guid>
      <description>球面上に一様分布するランダムな点を生成したい時、 単純に極座標表示で$\theta$と$\varphi$を一様分布させると、極付近に点が集まってしまう。 data1 = Transpose[{Sin[t] Cos[f], Sin[t] Sin[f], Cos[t]} /. { f -&amp;gt; RandomReal[{0, 2 Pi}, 2000], t -&amp;gt; RandomReal[{0, Pi}, 2000]}]; g1 = ListPointPlot3D[data1, BoxRatios -&amp;gt; {1, 1, 1}] 球面上で一様分布させるには、下記のように$\theta$にArcCosを使う ($\theta$の位置の確率を$\sin\theta$に比例させたい→累積確率分布関数は$\cos$→逆関数は$\a</description>
    </item>
    <item>
      <title>m-241のバイナリデータからトラックログを吸い出す</title>
      <link>https://www.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</link>
      <pubDate>Thu, 22 Sep 2016 07:14:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/rescue_gps_log_from_binary_data_of_holux_m241/</guid>
      <description>GPSロガー(Holux m-241)のメモリが破損しているのか、 実は6月30日と7月3日の軽井沢→直江津ツーリングと、9月の西九州→佐多岬ツーリングでは、 ログが破損していたため、Googleのロケーション履歴を代用している。 バイナリデータは一応吸い出せているようなので、その構造を調べると、 HOLUX m-241 LoggerUtility .trlファイル構造の覚書 より以下のような構造になっている。 1レコード20バイトの固定長 時刻4バイト 緯度</description>
    </item>
    <item>
      <title>Compileで使用するCコンパイラを変更する</title>
      <link>https://www.330k.info/essay/change-c-compiler-in-mathematica/</link>
      <pubDate>Tue, 08 Dec 2015 17:40:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/change-c-compiler-in-mathematica/</guid>
      <description>Mathematica 8から、CompileでCコンパイラを使って直接ネイティブコードにコンパイルできるようになった。 使用するCコンパイラは、 Needs[&amp;#34;CCompilerDriver`&amp;#34;]; CCompilerDriver`$CCompiler = { &amp;#34;Name&amp;#34; -&amp;gt; &amp;#34;GCC&amp;#34;, &amp;#34;Compiler&amp;#34; -&amp;gt; CCompilerDriver`GCCCompiler`GCCCompiler, &amp;#34;CompilerInstallation&amp;#34; -&amp;gt; &amp;#34;/usr/bin&amp;#34;, &amp;#34;CompilerName&amp;#34; -&amp;gt; Automatic }; というように、CCompilerDriver`$CCompilerを変更して指定する。 以前からのCompile(&amp;ldquo;WVM&amp;rdquo;)と、各コンパイラの比較のため、ベンチマークを行ってみた。 検証環境は以下の通り。 CPU: Intel Core-i7 3770 (インテル</description>
    </item>
    <item>
      <title>3Dグラフィックスが正常に表示されない問題</title>
      <link>https://www.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</link>
      <pubDate>Fri, 09 Jan 2015 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/3d-graphics-not-showed-in-ubuntu-mathematica/</guid>
      <description>たまたま私の環境の問題かもしれないが、 Intel Core-i7 3770 Ubuntu 14.04 LTS Mathematica 8.0.4 Home Edition という環境で、Mathematicaのノートブック上でPlot3DなどのGraphics3Dオブジェクトが、 うまく表示できないことに悩まされていたが、その解決法が分かった。 メニューの「編集」→「環境設定」から、「詳細」タブを開き、「オプションインスペクタを開く」をクリック。 オプションインスペクタでは「グラフィックス設定」「Rendering</description>
    </item>
    <item>
      <title>Mathematicaで論文用の図やグラフを作成するときのまとめ</title>
      <link>https://www.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</link>
      <pubDate>Sun, 14 Dec 2014 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/how-to-create-graphs-for-papers-with-mathematica/</guid>
      <description>Mathematicaで作る図やグラフは美しいんだ！ということを伝えたいので、 もう数年も前になるが、修士論文を書くときにMathematicaで作るグラフにこだわった点を思い出しながらまとめてみる。 論文を書くために使うソフトウェア 私はpLaTeXで論文を書いたが、研究室ではWordが推奨されていた。 図表の番号を管理する必要や図表の位置がずれて飛んでいってしまうといった事態も起きないし、目次や索引、</description>
    </item>
    <item>
      <title>Mathematicaでパーセプトロンとバックプロパゲーション</title>
      <link>https://www.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</link>
      <pubDate>Mon, 14 Jul 2014 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/implement_perceptron_and_backpropagation_with_mathematica/</guid>
      <description>拙作のリバーシプログラムViglaは高校時代に作ったものだが、 評価関数は手の広さと辺の形を適当に数値化したものであるためにあまり強いプログラムにはできなかった。 当時から強いリバーシプログラムは辺や隅のパターンを評価していることは知ってはいたものの、理解出来ずじまいだった。 今回もう一度挑戦してみようと思い、まずはMathematicaでパーセプトロンとバックプロパゲーションによる学習を実装してみた。</description>
    </item>
    <item>
      <title>GeoDistanceとその他の測地線距離算出式の精度</title>
      <link>https://www.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/precision-of-mathematica-geodistance-and-geographical-distance-formula/</guid>
      <description>&lt;p&gt;Mathematicaには2点の緯度と経度を与えて、その間の測地線距離を返す関数としてGeoDistanceがある。&#xA;しかしながら、&lt;a href=&#34;http://mathematica.stackexchange.com/questions/26526/how-accurate-is-geodistance&#34;&gt;ここ&lt;/a&gt;で書かれているように、その精度には疑問が呈されているようだ。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;17 Mar. 2022 追記)&#xA;&lt;strong&gt;&lt;a href=&#34;https://www.330k.info/essay/geodesic_distance_formula_comparison_2/&#34;&gt;続編記事&lt;/a&gt;を投稿&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Wolfram CDF Playerでローカルファイルの読み込みと書き込みを行う</title>
      <link>https://www.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</link>
      <pubDate>Fri, 18 Oct 2013 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/read-and-write-a-local-file-with-wolfram-cdf-player/</guid>
      <description>Wolfram CDF Player を汎用するにあるように、 CDF PlayerでもJ/Linkを使えばローカルファイルの読み込み、書き込みができる(※CDFファイルの作成にはMathematicaが必要)。 上記リンク先ではテキストファイルを読み込む例が載っているが、バイナリファイルとして読み込んでImportStringを使えば、 Mathematicaが対応している形式すべてのファイルを読み込むことができる。 J/Linkでバイナリ</description>
    </item>
    <item>
      <title>ffmpeg &#43; Mathematicaで動画ファイルを作成する</title>
      <link>https://www.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</link>
      <pubDate>Fri, 27 Sep 2013 00:04:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/make-a-movie-with-mathematica-and-ffmpeg/</guid>
      <description>MathematicaのExportでAVIなどの動画ファイルを作成することは簡単に可能だが、 いかんせんすべてのフレームの画像を作成してからファイルに書きだすので、フレーム数に比例してメモリの使用量が多くなってしまう。 そのため長いムービーの作成は困難であった。 そこで、ffmpegと併用することでメモリ使用量を抑えつつ、長編の動画ファイルを制作する。 具体的には、 ffmpegで標準入力から読み込ませる</description>
    </item>
    <item>
      <title>MathematicaからSQLiteでBLOBとマルチバイト文字列を扱う</title>
      <link>https://www.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</link>
      <pubDate>Sun, 14 Oct 2012 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/process-blob-and-multibyte-string-from-sqlite-with-mathematica/</guid>
      <description>ドキュメントにはないものの、MathematicaではSQLiteを扱うことができる。 しかしながら、BLOB型や文字列で日本語などを扱うには少し工夫が必要なので、メモ。 BLOB型 select 直接BLOB型をselectすると$Failedが返ってくるので、hex関数で16進文字列として返す。 db = Database`OpenDatabase[sqlitefilepath]; rs = Database`QueryDatabase[db, &amp;#34;select hex(column_name) from table_name&amp;#34;]; これを16進文字列→数値→バイト列→文字列と変換して、最後にImportStringで読み込むと、</description>
    </item>
    <item>
      <title>Mathematica on Ubuntu 12.04 LTSで日本語関連のトラブル</title>
      <link>https://www.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</link>
      <pubDate>Tue, 09 Oct 2012 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/how-to-make-mathematica8-process-japanese-on-ubuntu-1204-ltf-64bit/</guid>
      <description>Mathematica 8 Home Edition 日本語版をUbuntu 12.04 LTS 64bit版にインストールしたところ、 ディレクトリ、ファイル名に日本語が含まれるノートブックファイル(.nb)を開けない ディレクトリ、ファイル名に日本語が含まれるとImport/Exportできない、FileNamesで列挙できない ノートブック中に日本語を入力できない $SystemCharacterEncoding、$CharacterEncodingが&amp;quot</description>
    </item>
    <item>
      <title>Mathematicaにおけるプログラムの高速化手法</title>
      <link>https://www.330k.info/essay/how-to-optimize-mathematica-programs/</link>
      <pubDate>Mon, 14 Dec 2009 22:39:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/how-to-optimize-mathematica-programs/</guid>
      <description>Mathematicaにおいてプログラムの実行速度を最適化する際の項目を思いつく限り挙げてみた。 関数型パラダイムで書く 必然的に組み込み関数を多く使い、リストをまとめて操作することになるので手続き型で書くより速くなることが多い。 コード量も少なくなって読みやすくなるので、よほどのことでない限りMathematicaでは関数型で書く。 具体的には、手続き型ループ構文(Do, For, Whileなど)をやめて、Ma</description>
    </item>
    <item>
      <title>Mathematica 7でImportおよびExportを拡張する</title>
      <link>https://www.330k.info/essay/extend-import-and-export-of-mathematica7/</link>
      <pubDate>Mon, 23 Nov 2009 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/extend-import-and-export-of-mathematica7/</guid>
      <description>MathematicaではImportやExportを使って様々な形式のファイルを読み書きできるが、 標準で対応していないファイル形式についても自分でローダやライタを作り、 それをImportやExportに対応させる方法がExtending Import &amp;amp; Export (Wolfram Library Archive)において解説されている。 しかしこの文書は2003年のもので以前はExperimental`RegisterConverterという関数で</description>
    </item>
    <item>
      <title>多角形の内外判定</title>
      <link>https://www.330k.info/essay/takakugatanonaigaihantei/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/takakugatanonaigaihantei/</guid>
      <description>ある点が多角形の内側にあるのか外側にあるのかを判定するには主に ある点から直線をひいて多角形の辺と何回交差するか判定する(偶数回なら外、奇数回なら中) ある点から多角形の各頂点を順番に見ていったときに何回転するか の2つの方法がある。 しかし辺との交差回数をカウントするのは、直線と辺が平行だったり、頂点で交差したりする場合などに特別な配慮が必要なので、 ここでは2番目の方法で実装する。 点から多角形上の点を順</description>
    </item>
    <item>
      <title>16ビットアプリケーションの標準入出力をリダイレクト</title>
      <link>https://www.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</link>
      <pubDate>Mon, 26 Oct 2009 21:47:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/how-to-redirect-standard-input-output-of-16bit-application/</guid>
      <description>FORTRANで書かれた古いMS-DOSプログラムを.NET/Linkを使ってMathematicaから操るパッケージを作っていたところ、 Process.StartInfo.RedirectStandardInputやRedirectStandardOutputにTrueを設定してもまったく標準入出力をリダイレクトできなかった。(※OSはVista 32bit) いろいろ試してみたところ、16ビットのプログラム</description>
    </item>
    <item>
      <title>GPXファイルを読み込む</title>
      <link>https://www.330k.info/essay/import-gpx-file-in-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/import-gpx-file-in-mathematica/</guid>
      <description>MathematicaでGPXファイルを読み込んで解釈する方法のメモ。 対象となるGPXファイルを xml = Import[filepath, &amp;#34;XML&amp;#34;]; でまずXMLとして読み込んでおいて、 trk = Cases[xml, XMLElement[&amp;#34;trk&amp;#34;, _, _], Infinity]; でtrk要素を抜き出し、 trkpt = (ToExpression[{&amp;#34;lat&amp;#34;, &amp;#34;lon&amp;#34;} /. Cases[#1, XMLElement[&amp;#34;trkpt&amp;#34;, attr_, _] :&amp;gt; attr, Infinity]] &amp;amp; ) /@ trk; でそれぞれのtrk要素からtrkpt要素を抜き出して緯度と経度を得る。 Sep. 28 2013追記 Mathematica 8からは標準でGPXをImport可能になった。</description>
    </item>
    <item>
      <title>友愛数を列挙する</title>
      <link>https://www.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</link>
      <pubDate>Sun, 25 Oct 2009 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/enumurate-amicable-numbers-with-mathematica/</guid>
      <description>Mathematicaで友愛数を列挙するプログラム例として以下のようなものが見受けられる。 yakuwa[n_] := DivisorSigma[1, n] - n; Do[If[(yakuwa[yakuwa[k]] == k) &amp;amp;&amp;amp; (yakuwa[k] != k), Print[{k, yakuwa[k]}]], {k, 1, 1000}]; しかし、Doでループを回してPrintで書き出していくのはMathematica的に美しくないと思う。 Mathematicaなら関数型プログラミングとパターンマッチを用いるのが良いと思うので、私なら以下のように書く。 Cases[NestList[DivisorSigma[1, #] - # &amp;amp;, #, 2] &amp;amp; /@ Range[100000], {a_, b_, a_} /; a &amp;lt; b -&amp;gt; {a, b}] 実行速度もこちらの</description>
    </item>
    <item>
      <title>折れ線を間引く(Ramer-Douglas-Peuckerアルゴリズム)</title>
      <link>https://www.330k.info/essay/oresenwomabiku/</link>
      <pubDate>Sat, 24 Oct 2009 00:00:00 +0900</pubDate>
      <guid>https://www.330k.info/essay/oresenwomabiku/</guid>
      <description>&lt;p&gt;読み込んだGPSログのデータを間引きたい、と思って調べたところ、&#xA;(Ramer-)Douglas-Peuckerのアルゴリズムというものがあることが分かった。&lt;/p&gt;&#xA;&lt;p&gt;基本的な考え方は、&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;折れ線の始点と終点を結ぶ線分と各点の距離を求める。&lt;/li&gt;&#xA;&lt;li&gt;すべての点との距離が許容誤差$\varepsilon$以内に入っていれば始点と終点だけを返して終了。&lt;/li&gt;&#xA;&lt;li&gt;そうでなければ距離が最大の点Pを選択。&lt;/li&gt;&#xA;&lt;li&gt;始点から点Pまでの折れ線と、点Pから終点までの折れ線のそれぞれについてまた1から処理する。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;という再帰的なもの。&lt;/p&gt;&#xA;&lt;p&gt;再帰的なものはMathematicaの得意分野なので、MathematicaでRamer-Douglas-Peuckerのアルゴリズムを実装してみた。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
